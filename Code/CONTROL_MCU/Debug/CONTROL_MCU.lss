
CONTROL_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001886  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001886  0000191a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800072  00800072  0000192c  2**0
                  ALLOC
  3 .stab         00002694  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001309  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_3>
      10:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_8>
      24:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
      8a:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER_Init>:
/*
 * Description:
 * Initialize buzzer by specifying its pin as output pin.
 */
void BUZZER_Init( void )
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <GPIO_setupPinDirection>
}
      a4:	cf 91       	pop	r28
      a6:	df 91       	pop	r29
      a8:	08 95       	ret

000000aa <BUZZER_On>:
/*
 * Description:
 * Turn on buzzer.
 */
void BUZZER_On( void )
{
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
      b2:	81 e0       	ldi	r24, 0x01	; 1
      b4:	61 e0       	ldi	r22, 0x01	; 1
      b6:	41 e0       	ldi	r20, 0x01	; 1
      b8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <BUZZER_Off>:
/*
 * Description:
 * Turn off buzzer.
 */
void BUZZER_Off( void )
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	61 e0       	ldi	r22, 0x01	; 1
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
}
      d4:	cf 91       	pop	r28
      d6:	df 91       	pop	r29
      d8:	08 95       	ret

000000da <DcMotor_Init>:
 * The Function responsible for setup the direction for the two
 * motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
	/* Setup motor control pins as output */
	GPIO_setupPinDirection(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN1_ID, PIN_OUTPUT);
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	62 e0       	ldi	r22, 0x02	; 2
      e6:	41 e0       	ldi	r20, 0x01	; 1
      e8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN2_ID, PIN_OUTPUT);
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	63 e0       	ldi	r22, 0x03	; 3
      f0:	41 e0       	ldi	r20, 0x01	; 1
      f2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <GPIO_setupPinDirection>
	/* Initially stop motor */
	GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN1_ID, LOGIC_LOW);
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
	GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN2_ID, LOGIC_LOW);
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	63 e0       	ldi	r22, 0x03	; 3
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <DcMotor_Rotate>:
/*
 * The function responsible for rotate the DC Motor CW/ or A-CW or
 * stop the motor based on the state input state value.
 */
void DcMotor_Rotate(DcMotor_State state)
{
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	00 d0       	rcall	.+0      	; 0x116 <DcMotor_Rotate+0x6>
     116:	0f 92       	push	r0
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	28 2f       	mov	r18, r24
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	3b 83       	std	Y+3, r19	; 0x03
     126:	2a 83       	std	Y+2, r18	; 0x02
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	9b 81       	ldd	r25, Y+3	; 0x03
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	91 05       	cpc	r25, r1
     130:	a1 f0       	breq	.+40     	; 0x15a <DcMotor_Rotate+0x4a>
     132:	2a 81       	ldd	r18, Y+2	; 0x02
     134:	3b 81       	ldd	r19, Y+3	; 0x03
     136:	22 30       	cpi	r18, 0x02	; 2
     138:	31 05       	cpc	r19, r1
     13a:	d1 f0       	breq	.+52     	; 0x170 <DcMotor_Rotate+0x60>
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	9b 81       	ldd	r25, Y+3	; 0x03
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	01 f5       	brne	.+64     	; 0x184 <DcMotor_Rotate+0x74>
	{
	case CW:
		GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN1_ID, LOGIC_LOW);
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	62 e0       	ldi	r22, 0x02	; 2
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN2_ID, LOGIC_HIGH);
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	63 e0       	ldi	r22, 0x03	; 3
     152:	41 e0       	ldi	r20, 0x01	; 1
     154:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
     158:	15 c0       	rjmp	.+42     	; 0x184 <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN1_ID, LOGIC_HIGH);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	62 e0       	ldi	r22, 0x02	; 2
     15e:	41 e0       	ldi	r20, 0x01	; 1
     160:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN2_ID, LOGIC_LOW);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	63 e0       	ldi	r22, 0x03	; 3
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
     16e:	0a c0       	rjmp	.+20     	; 0x184 <DcMotor_Rotate+0x74>
		break;
	case STOP:
		GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN1_ID, LOGIC_LOW);
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	62 e0       	ldi	r22, 0x02	; 2
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_M1_PORT_ID, DCMOTOR_M1_PIN2_ID, LOGIC_LOW);
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	63 e0       	ldi	r22, 0x03	; 3
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GPIO_writePin>
		break;
	}
}
     184:	0f 90       	pop	r0
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0
     18a:	cf 91       	pop	r28
     18c:	df 91       	pop	r29
     18e:	08 95       	ret

00000190 <timer1Tick>:
 * Description:
 * This function used as callback function for timer1 to help making the delay.
 * This function will be called each when the Compare or overflow interrupt of TIMER1 occurs.
 */
static void timer1Tick( void )
{
     190:	df 93       	push	r29
     192:	cf 93       	push	r28
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
	g_timer1Tick++;
     198:	80 91 72 00 	lds	r24, 0x0072
     19c:	90 91 73 00 	lds	r25, 0x0073
     1a0:	a0 91 74 00 	lds	r26, 0x0074
     1a4:	b0 91 75 00 	lds	r27, 0x0075
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	a1 1d       	adc	r26, r1
     1ac:	b1 1d       	adc	r27, r1
     1ae:	80 93 72 00 	sts	0x0072, r24
     1b2:	90 93 73 00 	sts	0x0073, r25
     1b6:	a0 93 74 00 	sts	0x0074, r26
     1ba:	b0 93 75 00 	sts	0x0075, r27
}
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	08 95       	ret

000001c4 <delay_ms>:
 * Description:
 * Make busy waiting delay by n ms.
 * This function uses Timer 1 in compare match mode.
 */
void delay_ms( uint32 n )
{
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	60 97       	sbiw	r28, 0x10	; 16
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	68 87       	std	Y+8, r22	; 0x08
     1da:	79 87       	std	Y+9, r23	; 0x09
     1dc:	8a 87       	std	Y+10, r24	; 0x0a
     1de:	9b 87       	std	Y+11, r25	; 0x0b
	g_timer1Tick = 0;
     1e0:	10 92 72 00 	sts	0x0072, r1
     1e4:	10 92 73 00 	sts	0x0073, r1
     1e8:	10 92 74 00 	sts	0x0074, r1
     1ec:	10 92 75 00 	sts	0x0075, r1
	 * Configuration structure for timer.
	 * timer id, required mode of operation, initial value to be loaded before timer start,
	 * compare value that is used only in compare mode and prescaler value.
	 */
	/* T_TIMER1 = 1us, to get 1ms, Put compare value = 1000 to get 1ms. */
	TIMER_ConfigType config = {TIMER1_ID, COMPARE_MODE, 0, 1000, F_CPU_8};
     1f0:	ce 01       	movw	r24, r28
     1f2:	01 96       	adiw	r24, 0x01	; 1
     1f4:	9d 87       	std	Y+13, r25	; 0x0d
     1f6:	8c 87       	std	Y+12, r24	; 0x0c
     1f8:	e0 e6       	ldi	r30, 0x60	; 96
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	ff 87       	std	Y+15, r31	; 0x0f
     1fe:	ee 87       	std	Y+14, r30	; 0x0e
     200:	f7 e0       	ldi	r31, 0x07	; 7
     202:	f8 8b       	std	Y+16, r31	; 0x10
     204:	ee 85       	ldd	r30, Y+14	; 0x0e
     206:	ff 85       	ldd	r31, Y+15	; 0x0f
     208:	00 80       	ld	r0, Z
     20a:	8e 85       	ldd	r24, Y+14	; 0x0e
     20c:	9f 85       	ldd	r25, Y+15	; 0x0f
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	9f 87       	std	Y+15, r25	; 0x0f
     212:	8e 87       	std	Y+14, r24	; 0x0e
     214:	ec 85       	ldd	r30, Y+12	; 0x0c
     216:	fd 85       	ldd	r31, Y+13	; 0x0d
     218:	00 82       	st	Z, r0
     21a:	8c 85       	ldd	r24, Y+12	; 0x0c
     21c:	9d 85       	ldd	r25, Y+13	; 0x0d
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9d 87       	std	Y+13, r25	; 0x0d
     222:	8c 87       	std	Y+12, r24	; 0x0c
     224:	98 89       	ldd	r25, Y+16	; 0x10
     226:	91 50       	subi	r25, 0x01	; 1
     228:	98 8b       	std	Y+16, r25	; 0x10
     22a:	e8 89       	ldd	r30, Y+16	; 0x10
     22c:	ee 23       	and	r30, r30
     22e:	51 f7       	brne	.-44     	; 0x204 <delay_ms+0x40>
	TIMER_Init(&config);
     230:	ce 01       	movw	r24, r28
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	0e 94 90 07 	call	0xf20	; 0xf20 <TIMER_Init>
	TIMER_setCallBack(timer1Tick, TIMER1_ID);
     238:	88 ec       	ldi	r24, 0xC8	; 200
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	0e 94 92 08 	call	0x1124	; 0x1124 <TIMER_setCallBack>
	/* Busy wait for n ms. */
	while( g_timer1Tick< n );
     242:	20 91 72 00 	lds	r18, 0x0072
     246:	30 91 73 00 	lds	r19, 0x0073
     24a:	40 91 74 00 	lds	r20, 0x0074
     24e:	50 91 75 00 	lds	r21, 0x0075
     252:	88 85       	ldd	r24, Y+8	; 0x08
     254:	99 85       	ldd	r25, Y+9	; 0x09
     256:	aa 85       	ldd	r26, Y+10	; 0x0a
     258:	bb 85       	ldd	r27, Y+11	; 0x0b
     25a:	28 17       	cp	r18, r24
     25c:	39 07       	cpc	r19, r25
     25e:	4a 07       	cpc	r20, r26
     260:	5b 07       	cpc	r21, r27
     262:	78 f3       	brcs	.-34     	; 0x242 <delay_ms+0x7e>
	TIMER_Deinit(TIMER1_ID);
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 cb 08 	call	0x1196	; 0x1196 <TIMER_Deinit>
}
     26a:	60 96       	adiw	r28, 0x10	; 16
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <main>:
void openDoor( void );
void closeDoor( void );
void stopDoor( void );

int main ( void )
{
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	2b 97       	sbiw	r28, 0x0b	; 11
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     290:	af e5       	ldi	r26, 0x5F	; 95
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	ef e5       	ldi	r30, 0x5F	; 95
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	80 68       	ori	r24, 0x80	; 128
     29c:	8c 93       	st	X, r24
	/* Delay to let UART in the other MCU to be initialized */
	EEPROM_init();
     29e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <EEPROM_init>
	delay_ms(1);
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <delay_ms>
	UART_ConfigType config = {9600,BITS_8,NO_PARITY,ONE_STOP_BIT};
     2ae:	ce 01       	movw	r24, r28
     2b0:	02 96       	adiw	r24, 0x02	; 2
     2b2:	98 87       	std	Y+8, r25	; 0x08
     2b4:	8f 83       	std	Y+7, r24	; 0x07
     2b6:	e7 e6       	ldi	r30, 0x67	; 103
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	fa 87       	std	Y+10, r31	; 0x0a
     2bc:	e9 87       	std	Y+9, r30	; 0x09
     2be:	f5 e0       	ldi	r31, 0x05	; 5
     2c0:	fb 87       	std	Y+11, r31	; 0x0b
     2c2:	e9 85       	ldd	r30, Y+9	; 0x09
     2c4:	fa 85       	ldd	r31, Y+10	; 0x0a
     2c6:	00 80       	ld	r0, Z
     2c8:	89 85       	ldd	r24, Y+9	; 0x09
     2ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	9a 87       	std	Y+10, r25	; 0x0a
     2d0:	89 87       	std	Y+9, r24	; 0x09
     2d2:	ef 81       	ldd	r30, Y+7	; 0x07
     2d4:	f8 85       	ldd	r31, Y+8	; 0x08
     2d6:	00 82       	st	Z, r0
     2d8:	8f 81       	ldd	r24, Y+7	; 0x07
     2da:	98 85       	ldd	r25, Y+8	; 0x08
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	98 87       	std	Y+8, r25	; 0x08
     2e0:	8f 83       	std	Y+7, r24	; 0x07
     2e2:	9b 85       	ldd	r25, Y+11	; 0x0b
     2e4:	91 50       	subi	r25, 0x01	; 1
     2e6:	9b 87       	std	Y+11, r25	; 0x0b
     2e8:	eb 85       	ldd	r30, Y+11	; 0x0b
     2ea:	ee 23       	and	r30, r30
     2ec:	51 f7       	brne	.-44     	; 0x2c2 <main+0x46>
	UART_init(&config);
     2ee:	ce 01       	movw	r24, r28
     2f0:	02 96       	adiw	r24, 0x02	; 2
     2f2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <UART_init>
	DcMotor_Init();
     2f6:	0e 94 6d 00 	call	0xda	; 0xda <DcMotor_Init>
	BUZZER_Init();
     2fa:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_Init>

	while(1)
	{
		UART_sendByte(CONTROL_MCU_READY);
     2fe:	80 e1       	ldi	r24, 0x10	; 16
     300:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
		uint8 command = UART_recieveByte();
     304:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     308:	89 83       	std	Y+1, r24	; 0x01
		performCommand( command );
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	0e 94 89 01 	call	0x312	; 0x312 <performCommand>
     310:	f6 cf       	rjmp	.-20     	; 0x2fe <main+0x82>

00000312 <performCommand>:

	return 0;
}

void performCommand( uint8 command )
{
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	00 d0       	rcall	.+0      	; 0x318 <performCommand+0x6>
     318:	0f 92       	push	r0
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	89 83       	std	Y+1, r24	; 0x01
	switch(command)
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	28 2f       	mov	r18, r24
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	3b 83       	std	Y+3, r19	; 0x03
     328:	2a 83       	std	Y+2, r18	; 0x02
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	85 30       	cpi	r24, 0x05	; 5
     330:	91 05       	cpc	r25, r1
     332:	09 f4       	brne	.+2      	; 0x336 <performCommand+0x24>
     334:	4c c0       	rjmp	.+152    	; 0x3ce <performCommand+0xbc>
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	3b 81       	ldd	r19, Y+3	; 0x03
     33a:	26 30       	cpi	r18, 0x06	; 6
     33c:	31 05       	cpc	r19, r1
     33e:	dc f4       	brge	.+54     	; 0x376 <performCommand+0x64>
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	9b 81       	ldd	r25, Y+3	; 0x03
     344:	82 30       	cpi	r24, 0x02	; 2
     346:	91 05       	cpc	r25, r1
     348:	c9 f1       	breq	.+114    	; 0x3bc <performCommand+0xaa>
     34a:	2a 81       	ldd	r18, Y+2	; 0x02
     34c:	3b 81       	ldd	r19, Y+3	; 0x03
     34e:	23 30       	cpi	r18, 0x03	; 3
     350:	31 05       	cpc	r19, r1
     352:	34 f4       	brge	.+12     	; 0x360 <performCommand+0x4e>
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	91 05       	cpc	r25, r1
     35c:	61 f1       	breq	.+88     	; 0x3b6 <performCommand+0xa4>
     35e:	48 c0       	rjmp	.+144    	; 0x3f0 <performCommand+0xde>
     360:	2a 81       	ldd	r18, Y+2	; 0x02
     362:	3b 81       	ldd	r19, Y+3	; 0x03
     364:	23 30       	cpi	r18, 0x03	; 3
     366:	31 05       	cpc	r19, r1
     368:	61 f1       	breq	.+88     	; 0x3c2 <performCommand+0xb0>
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	9b 81       	ldd	r25, Y+3	; 0x03
     36e:	84 30       	cpi	r24, 0x04	; 4
     370:	91 05       	cpc	r25, r1
     372:	51 f1       	breq	.+84     	; 0x3c8 <performCommand+0xb6>
     374:	3d c0       	rjmp	.+122    	; 0x3f0 <performCommand+0xde>
     376:	2a 81       	ldd	r18, Y+2	; 0x02
     378:	3b 81       	ldd	r19, Y+3	; 0x03
     37a:	28 30       	cpi	r18, 0x08	; 8
     37c:	31 05       	cpc	r19, r1
     37e:	81 f1       	breq	.+96     	; 0x3e0 <performCommand+0xce>
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	9b 81       	ldd	r25, Y+3	; 0x03
     384:	89 30       	cpi	r24, 0x09	; 9
     386:	91 05       	cpc	r25, r1
     388:	5c f4       	brge	.+22     	; 0x3a0 <performCommand+0x8e>
     38a:	2a 81       	ldd	r18, Y+2	; 0x02
     38c:	3b 81       	ldd	r19, Y+3	; 0x03
     38e:	26 30       	cpi	r18, 0x06	; 6
     390:	31 05       	cpc	r19, r1
     392:	01 f1       	breq	.+64     	; 0x3d4 <performCommand+0xc2>
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	9b 81       	ldd	r25, Y+3	; 0x03
     398:	87 30       	cpi	r24, 0x07	; 7
     39a:	91 05       	cpc	r25, r1
     39c:	f1 f0       	breq	.+60     	; 0x3da <performCommand+0xc8>
     39e:	28 c0       	rjmp	.+80     	; 0x3f0 <performCommand+0xde>
     3a0:	2a 81       	ldd	r18, Y+2	; 0x02
     3a2:	3b 81       	ldd	r19, Y+3	; 0x03
     3a4:	29 30       	cpi	r18, 0x09	; 9
     3a6:	31 05       	cpc	r19, r1
     3a8:	f1 f0       	breq	.+60     	; 0x3e6 <performCommand+0xd4>
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	8a 30       	cpi	r24, 0x0A	; 10
     3b0:	91 05       	cpc	r25, r1
     3b2:	e1 f0       	breq	.+56     	; 0x3ec <performCommand+0xda>
     3b4:	1d c0       	rjmp	.+58     	; 0x3f0 <performCommand+0xde>
	{
	case CONTROL_COMPARE_TWO_PASSWORDS:
		checkNewPassword();
     3b6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <checkNewPassword>
     3ba:	1a c0       	rjmp	.+52     	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_CHECK_PASSWORD_LENGTH:
		checkPasswordLength();
     3bc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <checkPasswordLength>
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_CHECK_SAVED_PASSWORD_FLAG:
		checkSavedPassword();
     3c2:	0e 94 c4 02 	call	0x588	; 0x588 <checkSavedPassword>
     3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_ERASE_SAVED_PASSWORD:
		eraseSavedPassword();
     3c8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <eraseSavedPassword>
     3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <performCommand+0xde>
		break;
	case CHECK_PASSWORD_WITH_SAVED_PASSWORD:
		checkPassword();
     3ce:	0e 94 ee 02 	call	0x5dc	; 0x5dc <checkPassword>
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_MOTOR_ROTATE_CW:
		openDoor();
     3d4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <openDoor>
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_MOTOR_STOP:
		stopDoor();
     3da:	0e 94 70 03 	call	0x6e0	; 0x6e0 <stopDoor>
     3de:	08 c0       	rjmp	.+16     	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_MOTOR_ROTATE_CCW:
		closeDoor();
     3e0:	0e 94 66 03 	call	0x6cc	; 0x6cc <closeDoor>
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_BUZZER_ON:
		BUZZER_On();
     3e6:	0e 94 55 00 	call	0xaa	; 0xaa <BUZZER_On>
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <performCommand+0xde>
		break;
	case CONTROL_BUZZER_OFF:
		BUZZER_Off();
     3ec:	0e 94 61 00 	call	0xc2	; 0xc2 <BUZZER_Off>
		break;
	default:
		break;
	}
}
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <checkNewPassword>:

void checkNewPassword( void )
{
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	2e 97       	sbiw	r28, 0x0e	; 14
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_LENGTH];
	uint8 reEnteredPassword[PASSWORD_LENGTH];

	UART_sendByte(CONTROL_MCU_READY);
     414:	80 e1       	ldi	r24, 0x10	; 16
     416:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>

	/* Receiving password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     41a:	1b 82       	std	Y+3, r1	; 0x03
     41c:	0f c0       	rjmp	.+30     	; 0x43c <checkNewPassword+0x40>
	{
		password[i] = UART_recieveByte();
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	08 2f       	mov	r16, r24
     422:	10 e0       	ldi	r17, 0x00	; 0
     424:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     428:	28 2f       	mov	r18, r24
     42a:	ce 01       	movw	r24, r28
     42c:	05 96       	adiw	r24, 0x05	; 5
     42e:	fc 01       	movw	r30, r24
     430:	e0 0f       	add	r30, r16
     432:	f1 1f       	adc	r31, r17
     434:	20 83       	st	Z, r18
	uint8 reEnteredPassword[PASSWORD_LENGTH];

	UART_sendByte(CONTROL_MCU_READY);

	/* Receiving password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     436:	8b 81       	ldd	r24, Y+3	; 0x03
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	8b 83       	std	Y+3, r24	; 0x03
     43c:	8b 81       	ldd	r24, Y+3	; 0x03
     43e:	85 30       	cpi	r24, 0x05	; 5
     440:	70 f3       	brcs	.-36     	; 0x41e <checkNewPassword+0x22>
	{
		password[i] = UART_recieveByte();
	}
	/* Receiving reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     442:	1a 82       	std	Y+2, r1	; 0x02
     444:	0f c0       	rjmp	.+30     	; 0x464 <__stack+0x5>
	{
		reEnteredPassword[i] = UART_recieveByte();
     446:	8a 81       	ldd	r24, Y+2	; 0x02
     448:	08 2f       	mov	r16, r24
     44a:	10 e0       	ldi	r17, 0x00	; 0
     44c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     450:	28 2f       	mov	r18, r24
     452:	ce 01       	movw	r24, r28
     454:	0a 96       	adiw	r24, 0x0a	; 10
     456:	fc 01       	movw	r30, r24
     458:	e0 0f       	add	r30, r16
     45a:	f1 1f       	adc	r31, r17
     45c:	20 83       	st	Z, r18
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		password[i] = UART_recieveByte();
	}
	/* Receiving reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	8f 5f       	subi	r24, 0xFF	; 255
     462:	8a 83       	std	Y+2, r24	; 0x02
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	85 30       	cpi	r24, 0x05	; 5
     468:	70 f3       	brcs	.-36     	; 0x446 <checkNewPassword+0x4a>
	{
		reEnteredPassword[i] = UART_recieveByte();
	}

	boolean result = COMPARE_RESULT_TRUE;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	8c 83       	std	Y+4, r24	; 0x04
	/* Comparing passwords*/
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     46e:	19 82       	std	Y+1, r1	; 0x01
     470:	19 c0       	rjmp	.+50     	; 0x4a4 <__stack+0x45>
	{
		if(password[i] != reEnteredPassword[i])
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	28 2f       	mov	r18, r24
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	ce 01       	movw	r24, r28
     47a:	05 96       	adiw	r24, 0x05	; 5
     47c:	fc 01       	movw	r30, r24
     47e:	e2 0f       	add	r30, r18
     480:	f3 1f       	adc	r31, r19
     482:	40 81       	ld	r20, Z
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	28 2f       	mov	r18, r24
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	ce 01       	movw	r24, r28
     48c:	0a 96       	adiw	r24, 0x0a	; 10
     48e:	fc 01       	movw	r30, r24
     490:	e2 0f       	add	r30, r18
     492:	f3 1f       	adc	r31, r19
     494:	80 81       	ld	r24, Z
     496:	48 17       	cp	r20, r24
     498:	11 f0       	breq	.+4      	; 0x49e <__stack+0x3f>
		{
			result = COMPARE_RESULT_FALSE;
     49a:	1c 82       	std	Y+4, r1	; 0x04
     49c:	06 c0       	rjmp	.+12     	; 0x4aa <__stack+0x4b>
		reEnteredPassword[i] = UART_recieveByte();
	}

	boolean result = COMPARE_RESULT_TRUE;
	/* Comparing passwords*/
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	85 30       	cpi	r24, 0x05	; 5
     4a8:	20 f3       	brcs	.-56     	; 0x472 <__stack+0x13>
			result = COMPARE_RESULT_FALSE;
			break;
		}
	}
	/* If result and re-enterred passwords are identical, save password to EEPROM. */
	if(result == COMPARE_RESULT_TRUE)
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	21 f4       	brne	.+8      	; 0x4b8 <__stack+0x59>
	{
		savePassword( password );
     4b0:	ce 01       	movw	r24, r28
     4b2:	05 96       	adiw	r24, 0x05	; 5
     4b4:	0e 94 8b 02 	call	0x516	; 0x516 <savePassword>
	}
	while(UART_recieveByte() != HMI_MCU_READY);
     4b8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     4bc:	8f 3f       	cpi	r24, 0xFF	; 255
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <__stack+0x59>
	UART_sendByte(result);
     4c0:	8c 81       	ldd	r24, Y+4	; 0x04
     4c2:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
}
     4c6:	2e 96       	adiw	r28, 0x0e	; 14
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	cf 91       	pop	r28
     4d4:	df 91       	pop	r29
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <checkPasswordLength>:

void checkPasswordLength( void )
{
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <checkPasswordLength+0x6>
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
	/* Get length of the entered password. */
	UART_sendByte(CONTROL_MCU_READY);
     4e6:	80 e1       	ldi	r24, 0x10	; 16
     4e8:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
	uint8 length = UART_recieveByte();
     4ec:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     4f0:	89 83       	std	Y+1, r24	; 0x01
	/* Send the result of comparison to HMI MCU to represent an error. */
	while(UART_recieveByte() != HMI_MCU_READY);
     4f2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     4f6:	8f 3f       	cpi	r24, 0xFF	; 255
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <checkPasswordLength+0x16>
	UART_sendByte(length == PASSWORD_LENGTH);
     4fa:	1a 82       	std	Y+2, r1	; 0x02
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	85 30       	cpi	r24, 0x05	; 5
     500:	11 f4       	brne	.+4      	; 0x506 <checkPasswordLength+0x2a>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	8a 83       	std	Y+2, r24	; 0x02
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
}
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	08 95       	ret

00000516 <savePassword>:

void savePassword( uint8* const password )
{
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	00 d0       	rcall	.+0      	; 0x51c <savePassword+0x6>
     51c:	0f 92       	push	r0
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	9b 83       	std	Y+3, r25	; 0x03
     524:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
     526:	19 82       	std	Y+1, r1	; 0x01
     528:	1b c0       	rjmp	.+54     	; 0x560 <savePassword+0x4a>
	{
		EEPROM_writeByte(PASSWORD_START_ADDRESS + i, password[i]);
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	88 2f       	mov	r24, r24
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	ac 01       	movw	r20, r24
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	9b 81       	ldd	r25, Y+3	; 0x03
     53e:	fc 01       	movw	r30, r24
     540:	e2 0f       	add	r30, r18
     542:	f3 1f       	adc	r31, r19
     544:	20 81       	ld	r18, Z
     546:	ca 01       	movw	r24, r20
     548:	62 2f       	mov	r22, r18
     54a:	0e 94 b1 03 	call	0x762	; 0x762 <EEPROM_writeByte>
		delay_ms(10);
     54e:	6a e0       	ldi	r22, 0x0A	; 10
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <delay_ms>
	UART_sendByte(length == PASSWORD_LENGTH);
}

void savePassword( uint8* const password )
{
	for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	89 83       	std	Y+1, r24	; 0x01
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	85 30       	cpi	r24, 0x05	; 5
     564:	10 f3       	brcs	.-60     	; 0x52a <savePassword+0x14>
	{
		EEPROM_writeByte(PASSWORD_START_ADDRESS + i, password[i]);
		delay_ms(10);
	}
	EEPROM_writeByte(SAVED_PASSWORD_FLAG_ADDRESS, LOGIC_HIGH);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	0e 94 b1 03 	call	0x762	; 0x762 <EEPROM_writeByte>
	delay_ms(10);
     570:	6a e0       	ldi	r22, 0x0A	; 10
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <delay_ms>
}
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	cf 91       	pop	r28
     584:	df 91       	pop	r29
     586:	08 95       	ret

00000588 <checkSavedPassword>:

void checkSavedPassword( void )
{
     588:	df 93       	push	r29
     58a:	cf 93       	push	r28
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	uint8 flag;
	EEPROM_readByte(SAVED_PASSWORD_FLAG_ADDRESS, &flag);
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	9e 01       	movw	r18, r28
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	b9 01       	movw	r22, r18
     59e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <EEPROM_readByte>
	while(UART_recieveByte() != HMI_MCU_READY);
     5a2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     5a6:	8f 3f       	cpi	r24, 0xFF	; 255
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <checkSavedPassword+0x1a>
	UART_sendByte(flag);
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
}
     5b0:	0f 90       	pop	r0
     5b2:	cf 91       	pop	r28
     5b4:	df 91       	pop	r29
     5b6:	08 95       	ret

000005b8 <eraseSavedPassword>:

void eraseSavedPassword( void )
{
     5b8:	df 93       	push	r29
     5ba:	cf 93       	push	r28
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
	EEPROM_writeByte(SAVED_PASSWORD_FLAG_ADDRESS, LOGIC_LOW);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	0e 94 b1 03 	call	0x762	; 0x762 <EEPROM_writeByte>
	delay_ms(10);
     5ca:	6a e0       	ldi	r22, 0x0A	; 10
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <delay_ms>
}
     5d6:	cf 91       	pop	r28
     5d8:	df 91       	pop	r29
     5da:	08 95       	ret

000005dc <checkPassword>:

void checkPassword( void )
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	df 93       	push	r29
     5e2:	cf 93       	push	r28
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	2e 97       	sbiw	r28, 0x0e	; 14
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
	uint8 savedPassword[PASSWORD_LENGTH];
	uint8 enteredPassword[PASSWORD_LENGTH];
	UART_sendByte(CONTROL_MCU_READY);
     5f4:	80 e1       	ldi	r24, 0x10	; 16
     5f6:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
	/* Receiving password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     5fa:	1b 82       	std	Y+3, r1	; 0x03
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <checkPassword+0x40>
	{
		enteredPassword[i] = UART_recieveByte();
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	08 2f       	mov	r16, r24
     602:	10 e0       	ldi	r17, 0x00	; 0
     604:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     608:	28 2f       	mov	r18, r24
     60a:	ce 01       	movw	r24, r28
     60c:	0a 96       	adiw	r24, 0x0a	; 10
     60e:	fc 01       	movw	r30, r24
     610:	e0 0f       	add	r30, r16
     612:	f1 1f       	adc	r31, r17
     614:	20 83       	st	Z, r18
{
	uint8 savedPassword[PASSWORD_LENGTH];
	uint8 enteredPassword[PASSWORD_LENGTH];
	UART_sendByte(CONTROL_MCU_READY);
	/* Receiving password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	8b 83       	std	Y+3, r24	; 0x03
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	85 30       	cpi	r24, 0x05	; 5
     620:	70 f3       	brcs	.-36     	; 0x5fe <checkPassword+0x22>
	{
		enteredPassword[i] = UART_recieveByte();
	}
	/* Getting saved password from EEPROM */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     622:	1a 82       	std	Y+2, r1	; 0x02
     624:	14 c0       	rjmp	.+40     	; 0x64e <checkPassword+0x72>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS + i, savedPassword + i);
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	ac 01       	movw	r20, r24
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	88 2f       	mov	r24, r24
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	9e 01       	movw	r18, r28
     638:	2b 5f       	subi	r18, 0xFB	; 251
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	28 0f       	add	r18, r24
     63e:	39 1f       	adc	r19, r25
     640:	ca 01       	movw	r24, r20
     642:	b9 01       	movw	r22, r18
     644:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <EEPROM_readByte>
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		enteredPassword[i] = UART_recieveByte();
	}
	/* Getting saved password from EEPROM */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	8a 83       	std	Y+2, r24	; 0x02
     64e:	8a 81       	ldd	r24, Y+2	; 0x02
     650:	85 30       	cpi	r24, 0x05	; 5
     652:	48 f3       	brcs	.-46     	; 0x626 <checkPassword+0x4a>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS + i, savedPassword + i);
	}
	boolean result = COMPARE_RESULT_TRUE;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	8c 83       	std	Y+4, r24	; 0x04
	/* Comparing passwords*/
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     658:	19 82       	std	Y+1, r1	; 0x01
     65a:	19 c0       	rjmp	.+50     	; 0x68e <checkPassword+0xb2>
	{
		if(enteredPassword[i] != savedPassword[i])
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	ce 01       	movw	r24, r28
     664:	0a 96       	adiw	r24, 0x0a	; 10
     666:	fc 01       	movw	r30, r24
     668:	e2 0f       	add	r30, r18
     66a:	f3 1f       	adc	r31, r19
     66c:	40 81       	ld	r20, Z
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	28 2f       	mov	r18, r24
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	ce 01       	movw	r24, r28
     676:	05 96       	adiw	r24, 0x05	; 5
     678:	fc 01       	movw	r30, r24
     67a:	e2 0f       	add	r30, r18
     67c:	f3 1f       	adc	r31, r19
     67e:	80 81       	ld	r24, Z
     680:	48 17       	cp	r20, r24
     682:	11 f0       	breq	.+4      	; 0x688 <checkPassword+0xac>
		{
			result = COMPARE_RESULT_FALSE;
     684:	1c 82       	std	Y+4, r1	; 0x04
     686:	06 c0       	rjmp	.+12     	; 0x694 <checkPassword+0xb8>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS + i, savedPassword + i);
	}
	boolean result = COMPARE_RESULT_TRUE;
	/* Comparing passwords*/
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	85 30       	cpi	r24, 0x05	; 5
     692:	20 f3       	brcs	.-56     	; 0x65c <checkPassword+0x80>
		{
			result = COMPARE_RESULT_FALSE;
			break;
		}
	}
	while(UART_recieveByte() != HMI_MCU_READY);
     694:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
     698:	8f 3f       	cpi	r24, 0xFF	; 255
     69a:	e1 f7       	brne	.-8      	; 0x694 <checkPassword+0xb8>
	UART_sendByte(result);
     69c:	8c 81       	ldd	r24, Y+4	; 0x04
     69e:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
}
     6a2:	2e 96       	adiw	r28, 0x0e	; 14
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	08 95       	ret

000006b8 <openDoor>:

void openDoor( void )
{
     6b8:	df 93       	push	r29
     6ba:	cf 93       	push	r28
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(CW);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 88 00 	call	0x110	; 0x110 <DcMotor_Rotate>
}
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	08 95       	ret

000006cc <closeDoor>:
void closeDoor( void )
{
     6cc:	df 93       	push	r29
     6ce:	cf 93       	push	r28
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(A_CW);
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 88 00 	call	0x110	; 0x110 <DcMotor_Rotate>
}
     6da:	cf 91       	pop	r28
     6dc:	df 91       	pop	r29
     6de:	08 95       	ret

000006e0 <stopDoor>:
void stopDoor( void )
{
     6e0:	df 93       	push	r29
     6e2:	cf 93       	push	r28
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(STOP);
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 88 00 	call	0x110	; 0x110 <DcMotor_Rotate>
}
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <EEPROM_init>:
#include "external_eeprom.h"
#include "twi.h"
#include "delay.h"

void EEPROM_init()
{
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	2a 97       	sbiw	r28, 0x0a	; 10
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
	TWI_ConfigType config = { 400000, 0x01 };
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	9f 83       	std	Y+7, r25	; 0x07
     70e:	8e 83       	std	Y+6, r24	; 0x06
     710:	ec e6       	ldi	r30, 0x6C	; 108
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	f9 87       	std	Y+9, r31	; 0x09
     716:	e8 87       	std	Y+8, r30	; 0x08
     718:	f5 e0       	ldi	r31, 0x05	; 5
     71a:	fa 87       	std	Y+10, r31	; 0x0a
     71c:	e8 85       	ldd	r30, Y+8	; 0x08
     71e:	f9 85       	ldd	r31, Y+9	; 0x09
     720:	00 80       	ld	r0, Z
     722:	88 85       	ldd	r24, Y+8	; 0x08
     724:	99 85       	ldd	r25, Y+9	; 0x09
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	99 87       	std	Y+9, r25	; 0x09
     72a:	88 87       	std	Y+8, r24	; 0x08
     72c:	ee 81       	ldd	r30, Y+6	; 0x06
     72e:	ff 81       	ldd	r31, Y+7	; 0x07
     730:	00 82       	st	Z, r0
     732:	8e 81       	ldd	r24, Y+6	; 0x06
     734:	9f 81       	ldd	r25, Y+7	; 0x07
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	9f 83       	std	Y+7, r25	; 0x07
     73a:	8e 83       	std	Y+6, r24	; 0x06
     73c:	9a 85       	ldd	r25, Y+10	; 0x0a
     73e:	91 50       	subi	r25, 0x01	; 1
     740:	9a 87       	std	Y+10, r25	; 0x0a
     742:	ea 85       	ldd	r30, Y+10	; 0x0a
     744:	ee 23       	and	r30, r30
     746:	51 f7       	brne	.-44     	; 0x71c <EEPROM_init+0x28>
	TWI_init(&config);
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_init>
}
     750:	2a 96       	adiw	r28, 0x0a	; 10
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	00 d0       	rcall	.+0      	; 0x768 <EEPROM_writeByte+0x6>
     768:	00 d0       	rcall	.+0      	; 0x76a <EEPROM_writeByte+0x8>
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     774:	0e 94 8a 0a 	call	0x1514	; 0x1514 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     778:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     77c:	88 30       	cpi	r24, 0x08	; 8
     77e:	11 f0       	breq	.+4      	; 0x784 <EEPROM_writeByte+0x22>
        return ERROR;
     780:	1c 82       	std	Y+4, r1	; 0x04
     782:	28 c0       	rjmp	.+80     	; 0x7d4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	80 70       	andi	r24, 0x00	; 0
     78a:	97 70       	andi	r25, 0x07	; 7
     78c:	88 0f       	add	r24, r24
     78e:	89 2f       	mov	r24, r25
     790:	88 1f       	adc	r24, r24
     792:	99 0b       	sbc	r25, r25
     794:	91 95       	neg	r25
     796:	80 6a       	ori	r24, 0xA0	; 160
     798:	0e 94 a5 0a 	call	0x154a	; 0x154a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     79c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     7a0:	88 31       	cpi	r24, 0x18	; 24
     7a2:	11 f0       	breq	.+4      	; 0x7a8 <EEPROM_writeByte+0x46>
        return ERROR; 
     7a4:	1c 82       	std	Y+4, r1	; 0x04
     7a6:	16 c0       	rjmp	.+44     	; 0x7d4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	0e 94 a5 0a 	call	0x154a	; 0x154a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     7ae:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     7b2:	88 32       	cpi	r24, 0x28	; 40
     7b4:	11 f0       	breq	.+4      	; 0x7ba <EEPROM_writeByte+0x58>
        return ERROR;
     7b6:	1c 82       	std	Y+4, r1	; 0x04
     7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	0e 94 a5 0a 	call	0x154a	; 0x154a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     7c0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     7c4:	88 32       	cpi	r24, 0x28	; 40
     7c6:	11 f0       	breq	.+4      	; 0x7cc <EEPROM_writeByte+0x6a>
        return ERROR;
     7c8:	1c 82       	std	Y+4, r1	; 0x04
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     7cc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <TWI_stop>
	
    return SUCCESS;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	8c 83       	std	Y+4, r24	; 0x04
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <EEPROM_readByte+0x6>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <EEPROM_readByte+0x8>
     7ec:	0f 92       	push	r0
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
     7f6:	7c 83       	std	Y+4, r23	; 0x04
     7f8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     7fa:	0e 94 8a 0a 	call	0x1514	; 0x1514 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     7fe:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     802:	88 30       	cpi	r24, 0x08	; 8
     804:	11 f0       	breq	.+4      	; 0x80a <EEPROM_readByte+0x26>
        return ERROR;
     806:	1d 82       	std	Y+5, r1	; 0x05
     808:	44 c0       	rjmp	.+136    	; 0x892 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	80 70       	andi	r24, 0x00	; 0
     810:	97 70       	andi	r25, 0x07	; 7
     812:	88 0f       	add	r24, r24
     814:	89 2f       	mov	r24, r25
     816:	88 1f       	adc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	91 95       	neg	r25
     81c:	80 6a       	ori	r24, 0xA0	; 160
     81e:	0e 94 a5 0a 	call	0x154a	; 0x154a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     822:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     826:	88 31       	cpi	r24, 0x18	; 24
     828:	11 f0       	breq	.+4      	; 0x82e <EEPROM_readByte+0x4a>
        return ERROR;
     82a:	1d 82       	std	Y+5, r1	; 0x05
     82c:	32 c0       	rjmp	.+100    	; 0x892 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	0e 94 a5 0a 	call	0x154a	; 0x154a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     834:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     838:	88 32       	cpi	r24, 0x28	; 40
     83a:	11 f0       	breq	.+4      	; 0x840 <EEPROM_readByte+0x5c>
        return ERROR;
     83c:	1d 82       	std	Y+5, r1	; 0x05
     83e:	29 c0       	rjmp	.+82     	; 0x892 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     840:	0e 94 8a 0a 	call	0x1514	; 0x1514 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     844:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     848:	80 31       	cpi	r24, 0x10	; 16
     84a:	11 f0       	breq	.+4      	; 0x850 <EEPROM_readByte+0x6c>
        return ERROR;
     84c:	1d 82       	std	Y+5, r1	; 0x05
     84e:	21 c0       	rjmp	.+66     	; 0x892 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	80 70       	andi	r24, 0x00	; 0
     856:	97 70       	andi	r25, 0x07	; 7
     858:	88 0f       	add	r24, r24
     85a:	89 2f       	mov	r24, r25
     85c:	88 1f       	adc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	91 95       	neg	r25
     862:	81 6a       	ori	r24, 0xA1	; 161
     864:	0e 94 a5 0a 	call	0x154a	; 0x154a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     868:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     86c:	80 34       	cpi	r24, 0x40	; 64
     86e:	11 f0       	breq	.+4      	; 0x874 <EEPROM_readByte+0x90>
        return ERROR;
     870:	1d 82       	std	Y+5, r1	; 0x05
     872:	0f c0       	rjmp	.+30     	; 0x892 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     874:	0e 94 cf 0a 	call	0x159e	; 0x159e <TWI_readByteWithNACK>
     878:	eb 81       	ldd	r30, Y+3	; 0x03
     87a:	fc 81       	ldd	r31, Y+4	; 0x04
     87c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     87e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TWI_getStatus>
     882:	88 35       	cpi	r24, 0x58	; 88
     884:	11 f0       	breq	.+4      	; 0x88a <EEPROM_readByte+0xa6>
        return ERROR;
     886:	1d 82       	std	Y+5, r1	; 0x05
     888:	04 c0       	rjmp	.+8      	; 0x892 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     88a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <TWI_stop>

    return SUCCESS;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	8d 83       	std	Y+5, r24	; 0x05
     892:	8d 81       	ldd	r24, Y+5	; 0x05
}
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	cf 91       	pop	r28
     8a0:	df 91       	pop	r29
     8a2:	08 95       	ret

000008a4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     8a4:	df 93       	push	r29
     8a6:	cf 93       	push	r28
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <GPIO_setupPinDirection+0x6>
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <GPIO_setupPinDirection+0x8>
     8ac:	0f 92       	push	r0
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	6a 83       	std	Y+2, r22	; 0x02
     8b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	88 30       	cpi	r24, 0x08	; 8
     8bc:	08 f0       	brcs	.+2      	; 0x8c0 <GPIO_setupPinDirection+0x1c>
     8be:	d5 c0       	rjmp	.+426    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	08 f0       	brcs	.+2      	; 0x8c8 <GPIO_setupPinDirection+0x24>
     8c6:	d1 c0       	rjmp	.+418    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	28 2f       	mov	r18, r24
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	3d 83       	std	Y+5, r19	; 0x05
     8d0:	2c 83       	std	Y+4, r18	; 0x04
     8d2:	8c 81       	ldd	r24, Y+4	; 0x04
     8d4:	9d 81       	ldd	r25, Y+5	; 0x05
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	91 05       	cpc	r25, r1
     8da:	09 f4       	brne	.+2      	; 0x8de <GPIO_setupPinDirection+0x3a>
     8dc:	43 c0       	rjmp	.+134    	; 0x964 <GPIO_setupPinDirection+0xc0>
     8de:	2c 81       	ldd	r18, Y+4	; 0x04
     8e0:	3d 81       	ldd	r19, Y+5	; 0x05
     8e2:	22 30       	cpi	r18, 0x02	; 2
     8e4:	31 05       	cpc	r19, r1
     8e6:	2c f4       	brge	.+10     	; 0x8f2 <GPIO_setupPinDirection+0x4e>
     8e8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ea:	9d 81       	ldd	r25, Y+5	; 0x05
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	71 f0       	breq	.+28     	; 0x90c <GPIO_setupPinDirection+0x68>
     8f0:	bc c0       	rjmp	.+376    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
     8f2:	2c 81       	ldd	r18, Y+4	; 0x04
     8f4:	3d 81       	ldd	r19, Y+5	; 0x05
     8f6:	22 30       	cpi	r18, 0x02	; 2
     8f8:	31 05       	cpc	r19, r1
     8fa:	09 f4       	brne	.+2      	; 0x8fe <GPIO_setupPinDirection+0x5a>
     8fc:	5f c0       	rjmp	.+190    	; 0x9bc <GPIO_setupPinDirection+0x118>
     8fe:	8c 81       	ldd	r24, Y+4	; 0x04
     900:	9d 81       	ldd	r25, Y+5	; 0x05
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	91 05       	cpc	r25, r1
     906:	09 f4       	brne	.+2      	; 0x90a <GPIO_setupPinDirection+0x66>
     908:	85 c0       	rjmp	.+266    	; 0xa14 <GPIO_setupPinDirection+0x170>
     90a:	af c0       	rjmp	.+350    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	a1 f4       	brne	.+40     	; 0x93a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     912:	aa e3       	ldi	r26, 0x3A	; 58
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	ea e3       	ldi	r30, 0x3A	; 58
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	48 2f       	mov	r20, r24
     91e:	8a 81       	ldd	r24, Y+2	; 0x02
     920:	28 2f       	mov	r18, r24
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 2e       	mov	r0, r18
     92a:	02 c0       	rjmp	.+4      	; 0x930 <GPIO_setupPinDirection+0x8c>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	0a 94       	dec	r0
     932:	e2 f7       	brpl	.-8      	; 0x92c <GPIO_setupPinDirection+0x88>
     934:	84 2b       	or	r24, r20
     936:	8c 93       	st	X, r24
     938:	98 c0       	rjmp	.+304    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     93a:	aa e3       	ldi	r26, 0x3A	; 58
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	ea e3       	ldi	r30, 0x3A	; 58
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	48 2f       	mov	r20, r24
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	28 2f       	mov	r18, r24
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	02 2e       	mov	r0, r18
     952:	02 c0       	rjmp	.+4      	; 0x958 <GPIO_setupPinDirection+0xb4>
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	0a 94       	dec	r0
     95a:	e2 f7       	brpl	.-8      	; 0x954 <GPIO_setupPinDirection+0xb0>
     95c:	80 95       	com	r24
     95e:	84 23       	and	r24, r20
     960:	8c 93       	st	X, r24
     962:	83 c0       	rjmp	.+262    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	a1 f4       	brne	.+40     	; 0x992 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     96a:	a7 e3       	ldi	r26, 0x37	; 55
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	e7 e3       	ldi	r30, 0x37	; 55
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	48 2f       	mov	r20, r24
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	28 2f       	mov	r18, r24
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	02 2e       	mov	r0, r18
     982:	02 c0       	rjmp	.+4      	; 0x988 <GPIO_setupPinDirection+0xe4>
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	0a 94       	dec	r0
     98a:	e2 f7       	brpl	.-8      	; 0x984 <GPIO_setupPinDirection+0xe0>
     98c:	84 2b       	or	r24, r20
     98e:	8c 93       	st	X, r24
     990:	6c c0       	rjmp	.+216    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     992:	a7 e3       	ldi	r26, 0x37	; 55
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e7 e3       	ldi	r30, 0x37	; 55
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	48 2f       	mov	r20, r24
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	28 2f       	mov	r18, r24
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 2e       	mov	r0, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <GPIO_setupPinDirection+0x10c>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	0a 94       	dec	r0
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <GPIO_setupPinDirection+0x108>
     9b4:	80 95       	com	r24
     9b6:	84 23       	and	r24, r20
     9b8:	8c 93       	st	X, r24
     9ba:	57 c0       	rjmp	.+174    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	a1 f4       	brne	.+40     	; 0x9ea <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     9c2:	a4 e3       	ldi	r26, 0x34	; 52
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e4 e3       	ldi	r30, 0x34	; 52
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	48 2f       	mov	r20, r24
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	28 2f       	mov	r18, r24
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	02 2e       	mov	r0, r18
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <GPIO_setupPinDirection+0x13c>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	0a 94       	dec	r0
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <GPIO_setupPinDirection+0x138>
     9e4:	84 2b       	or	r24, r20
     9e6:	8c 93       	st	X, r24
     9e8:	40 c0       	rjmp	.+128    	; 0xa6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     9ea:	a4 e3       	ldi	r26, 0x34	; 52
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	e4 e3       	ldi	r30, 0x34	; 52
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	48 2f       	mov	r20, r24
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	28 2f       	mov	r18, r24
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	02 2e       	mov	r0, r18
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <GPIO_setupPinDirection+0x164>
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	0a 94       	dec	r0
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <GPIO_setupPinDirection+0x160>
     a0c:	80 95       	com	r24
     a0e:	84 23       	and	r24, r20
     a10:	8c 93       	st	X, r24
     a12:	2b c0       	rjmp	.+86     	; 0xa6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	a1 f4       	brne	.+40     	; 0xa42 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     a1a:	a1 e3       	ldi	r26, 0x31	; 49
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	e1 e3       	ldi	r30, 0x31	; 49
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	48 2f       	mov	r20, r24
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	02 2e       	mov	r0, r18
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <GPIO_setupPinDirection+0x194>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	0a 94       	dec	r0
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <GPIO_setupPinDirection+0x190>
     a3c:	84 2b       	or	r24, r20
     a3e:	8c 93       	st	X, r24
     a40:	14 c0       	rjmp	.+40     	; 0xa6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     a42:	a1 e3       	ldi	r26, 0x31	; 49
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e1 e3       	ldi	r30, 0x31	; 49
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	48 2f       	mov	r20, r24
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	28 2f       	mov	r18, r24
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	02 2e       	mov	r0, r18
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <GPIO_setupPinDirection+0x1bc>
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	0a 94       	dec	r0
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <GPIO_setupPinDirection+0x1b8>
     a64:	80 95       	com	r24
     a66:	84 23       	and	r24, r20
     a68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	cf 91       	pop	r28
     a76:	df 91       	pop	r29
     a78:	08 95       	ret

00000a7a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <GPIO_writePin+0x6>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <GPIO_writePin+0x8>
     a82:	0f 92       	push	r0
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	6a 83       	std	Y+2, r22	; 0x02
     a8c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     a8e:	8a 81       	ldd	r24, Y+2	; 0x02
     a90:	88 30       	cpi	r24, 0x08	; 8
     a92:	08 f0       	brcs	.+2      	; 0xa96 <GPIO_writePin+0x1c>
     a94:	d5 c0       	rjmp	.+426    	; 0xc40 <GPIO_writePin+0x1c6>
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	84 30       	cpi	r24, 0x04	; 4
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <GPIO_writePin+0x24>
     a9c:	d1 c0       	rjmp	.+418    	; 0xc40 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	28 2f       	mov	r18, r24
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	3d 83       	std	Y+5, r19	; 0x05
     aa6:	2c 83       	std	Y+4, r18	; 0x04
     aa8:	8c 81       	ldd	r24, Y+4	; 0x04
     aaa:	9d 81       	ldd	r25, Y+5	; 0x05
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	91 05       	cpc	r25, r1
     ab0:	09 f4       	brne	.+2      	; 0xab4 <GPIO_writePin+0x3a>
     ab2:	43 c0       	rjmp	.+134    	; 0xb3a <GPIO_writePin+0xc0>
     ab4:	2c 81       	ldd	r18, Y+4	; 0x04
     ab6:	3d 81       	ldd	r19, Y+5	; 0x05
     ab8:	22 30       	cpi	r18, 0x02	; 2
     aba:	31 05       	cpc	r19, r1
     abc:	2c f4       	brge	.+10     	; 0xac8 <GPIO_writePin+0x4e>
     abe:	8c 81       	ldd	r24, Y+4	; 0x04
     ac0:	9d 81       	ldd	r25, Y+5	; 0x05
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	71 f0       	breq	.+28     	; 0xae2 <GPIO_writePin+0x68>
     ac6:	bc c0       	rjmp	.+376    	; 0xc40 <GPIO_writePin+0x1c6>
     ac8:	2c 81       	ldd	r18, Y+4	; 0x04
     aca:	3d 81       	ldd	r19, Y+5	; 0x05
     acc:	22 30       	cpi	r18, 0x02	; 2
     ace:	31 05       	cpc	r19, r1
     ad0:	09 f4       	brne	.+2      	; 0xad4 <GPIO_writePin+0x5a>
     ad2:	5f c0       	rjmp	.+190    	; 0xb92 <GPIO_writePin+0x118>
     ad4:	8c 81       	ldd	r24, Y+4	; 0x04
     ad6:	9d 81       	ldd	r25, Y+5	; 0x05
     ad8:	83 30       	cpi	r24, 0x03	; 3
     ada:	91 05       	cpc	r25, r1
     adc:	09 f4       	brne	.+2      	; 0xae0 <GPIO_writePin+0x66>
     ade:	85 c0       	rjmp	.+266    	; 0xbea <GPIO_writePin+0x170>
     ae0:	af c0       	rjmp	.+350    	; 0xc40 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	a1 f4       	brne	.+40     	; 0xb10 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ae8:	ab e3       	ldi	r26, 0x3B	; 59
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	eb e3       	ldi	r30, 0x3B	; 59
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	48 2f       	mov	r20, r24
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	28 2f       	mov	r18, r24
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	02 2e       	mov	r0, r18
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <GPIO_writePin+0x8c>
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	0a 94       	dec	r0
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <GPIO_writePin+0x88>
     b0a:	84 2b       	or	r24, r20
     b0c:	8c 93       	st	X, r24
     b0e:	98 c0       	rjmp	.+304    	; 0xc40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     b10:	ab e3       	ldi	r26, 0x3B	; 59
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	eb e3       	ldi	r30, 0x3B	; 59
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	48 2f       	mov	r20, r24
     b1c:	8a 81       	ldd	r24, Y+2	; 0x02
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	02 2e       	mov	r0, r18
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <GPIO_writePin+0xb4>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	0a 94       	dec	r0
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <GPIO_writePin+0xb0>
     b32:	80 95       	com	r24
     b34:	84 23       	and	r24, r20
     b36:	8c 93       	st	X, r24
     b38:	83 c0       	rjmp	.+262    	; 0xc40 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	a1 f4       	brne	.+40     	; 0xb68 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     b40:	a8 e3       	ldi	r26, 0x38	; 56
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	e8 e3       	ldi	r30, 0x38	; 56
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	48 2f       	mov	r20, r24
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	02 2e       	mov	r0, r18
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <GPIO_writePin+0xe4>
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	0a 94       	dec	r0
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <GPIO_writePin+0xe0>
     b62:	84 2b       	or	r24, r20
     b64:	8c 93       	st	X, r24
     b66:	6c c0       	rjmp	.+216    	; 0xc40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     b68:	a8 e3       	ldi	r26, 0x38	; 56
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e8 e3       	ldi	r30, 0x38	; 56
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	48 2f       	mov	r20, r24
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	02 2e       	mov	r0, r18
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <GPIO_writePin+0x10c>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	0a 94       	dec	r0
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <GPIO_writePin+0x108>
     b8a:	80 95       	com	r24
     b8c:	84 23       	and	r24, r20
     b8e:	8c 93       	st	X, r24
     b90:	57 c0       	rjmp	.+174    	; 0xc40 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	a1 f4       	brne	.+40     	; 0xbc0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     b98:	a5 e3       	ldi	r26, 0x35	; 53
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e5 e3       	ldi	r30, 0x35	; 53
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	48 2f       	mov	r20, r24
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 2e       	mov	r0, r18
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <GPIO_writePin+0x13c>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	0a 94       	dec	r0
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <GPIO_writePin+0x138>
     bba:	84 2b       	or	r24, r20
     bbc:	8c 93       	st	X, r24
     bbe:	40 c0       	rjmp	.+128    	; 0xc40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     bc0:	a5 e3       	ldi	r26, 0x35	; 53
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e5 e3       	ldi	r30, 0x35	; 53
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <GPIO_writePin+0x164>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <GPIO_writePin+0x160>
     be2:	80 95       	com	r24
     be4:	84 23       	and	r24, r20
     be6:	8c 93       	st	X, r24
     be8:	2b c0       	rjmp	.+86     	; 0xc40 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	a1 f4       	brne	.+40     	; 0xc18 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     bf0:	a2 e3       	ldi	r26, 0x32	; 50
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e2 e3       	ldi	r30, 0x32	; 50
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	48 2f       	mov	r20, r24
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 2e       	mov	r0, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <GPIO_writePin+0x194>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <GPIO_writePin+0x190>
     c12:	84 2b       	or	r24, r20
     c14:	8c 93       	st	X, r24
     c16:	14 c0       	rjmp	.+40     	; 0xc40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     c18:	a2 e3       	ldi	r26, 0x32	; 50
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e2 e3       	ldi	r30, 0x32	; 50
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <GPIO_writePin+0x1bc>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <GPIO_writePin+0x1b8>
     c3a:	80 95       	com	r24
     c3c:	84 23       	and	r24, r20
     c3e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <GPIO_readPin+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <GPIO_readPin+0x8>
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     c62:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	88 30       	cpi	r24, 0x08	; 8
     c68:	08 f0       	brcs	.+2      	; 0xc6c <GPIO_readPin+0x1c>
     c6a:	84 c0       	rjmp	.+264    	; 0xd74 <GPIO_readPin+0x124>
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	84 30       	cpi	r24, 0x04	; 4
     c70:	08 f0       	brcs	.+2      	; 0xc74 <GPIO_readPin+0x24>
     c72:	80 c0       	rjmp	.+256    	; 0xd74 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	3d 83       	std	Y+5, r19	; 0x05
     c7c:	2c 83       	std	Y+4, r18	; 0x04
     c7e:	4c 81       	ldd	r20, Y+4	; 0x04
     c80:	5d 81       	ldd	r21, Y+5	; 0x05
     c82:	41 30       	cpi	r20, 0x01	; 1
     c84:	51 05       	cpc	r21, r1
     c86:	79 f1       	breq	.+94     	; 0xce6 <GPIO_readPin+0x96>
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	9d 81       	ldd	r25, Y+5	; 0x05
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	91 05       	cpc	r25, r1
     c90:	34 f4       	brge	.+12     	; 0xc9e <GPIO_readPin+0x4e>
     c92:	2c 81       	ldd	r18, Y+4	; 0x04
     c94:	3d 81       	ldd	r19, Y+5	; 0x05
     c96:	21 15       	cp	r18, r1
     c98:	31 05       	cpc	r19, r1
     c9a:	69 f0       	breq	.+26     	; 0xcb6 <GPIO_readPin+0x66>
     c9c:	6b c0       	rjmp	.+214    	; 0xd74 <GPIO_readPin+0x124>
     c9e:	4c 81       	ldd	r20, Y+4	; 0x04
     ca0:	5d 81       	ldd	r21, Y+5	; 0x05
     ca2:	42 30       	cpi	r20, 0x02	; 2
     ca4:	51 05       	cpc	r21, r1
     ca6:	b9 f1       	breq	.+110    	; 0xd16 <GPIO_readPin+0xc6>
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	91 05       	cpc	r25, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <GPIO_readPin+0x64>
     cb2:	49 c0       	rjmp	.+146    	; 0xd46 <GPIO_readPin+0xf6>
     cb4:	5f c0       	rjmp	.+190    	; 0xd74 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     cb6:	e9 e3       	ldi	r30, 0x39	; 57
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a9 01       	movw	r20, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <GPIO_readPin+0x7e>
     cca:	55 95       	asr	r21
     ccc:	47 95       	ror	r20
     cce:	8a 95       	dec	r24
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <GPIO_readPin+0x7a>
     cd2:	ca 01       	movw	r24, r20
     cd4:	81 70       	andi	r24, 0x01	; 1
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	88 23       	and	r24, r24
     cda:	19 f0       	breq	.+6      	; 0xce2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	49 c0       	rjmp	.+146    	; 0xd74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	47 c0       	rjmp	.+142    	; 0xd74 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     ce6:	e6 e3       	ldi	r30, 0x36	; 54
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a9 01       	movw	r20, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <GPIO_readPin+0xae>
     cfa:	55 95       	asr	r21
     cfc:	47 95       	ror	r20
     cfe:	8a 95       	dec	r24
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <GPIO_readPin+0xaa>
     d02:	ca 01       	movw	r24, r20
     d04:	81 70       	andi	r24, 0x01	; 1
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	88 23       	and	r24, r24
     d0a:	19 f0       	breq	.+6      	; 0xd12 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	31 c0       	rjmp	.+98     	; 0xd74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d12:	19 82       	std	Y+1, r1	; 0x01
     d14:	2f c0       	rjmp	.+94     	; 0xd74 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     d16:	e3 e3       	ldi	r30, 0x33	; 51
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a9 01       	movw	r20, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <GPIO_readPin+0xde>
     d2a:	55 95       	asr	r21
     d2c:	47 95       	ror	r20
     d2e:	8a 95       	dec	r24
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <GPIO_readPin+0xda>
     d32:	ca 01       	movw	r24, r20
     d34:	81 70       	andi	r24, 0x01	; 1
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	88 23       	and	r24, r24
     d3a:	19 f0       	breq	.+6      	; 0xd42 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	19 c0       	rjmp	.+50     	; 0xd74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d42:	19 82       	std	Y+1, r1	; 0x01
     d44:	17 c0       	rjmp	.+46     	; 0xd74 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     d46:	e0 e3       	ldi	r30, 0x30	; 48
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a9 01       	movw	r20, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <GPIO_readPin+0x10e>
     d5a:	55 95       	asr	r21
     d5c:	47 95       	ror	r20
     d5e:	8a 95       	dec	r24
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <GPIO_readPin+0x10a>
     d62:	ca 01       	movw	r24, r20
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	88 23       	and	r24, r24
     d6a:	19 f0       	breq	.+6      	; 0xd72 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d72:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <GPIO_setupPortDirection+0x6>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <GPIO_setupPortDirection+0x8>
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	84 30       	cpi	r24, 0x04	; 4
     d9a:	90 f5       	brcc	.+100    	; 0xe00 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	3c 83       	std	Y+4, r19	; 0x04
     da4:	2b 83       	std	Y+3, r18	; 0x03
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	91 05       	cpc	r25, r1
     dae:	d1 f0       	breq	.+52     	; 0xde4 <GPIO_setupPortDirection+0x5e>
     db0:	2b 81       	ldd	r18, Y+3	; 0x03
     db2:	3c 81       	ldd	r19, Y+4	; 0x04
     db4:	22 30       	cpi	r18, 0x02	; 2
     db6:	31 05       	cpc	r19, r1
     db8:	2c f4       	brge	.+10     	; 0xdc4 <GPIO_setupPortDirection+0x3e>
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	61 f0       	breq	.+24     	; 0xdda <GPIO_setupPortDirection+0x54>
     dc2:	1e c0       	rjmp	.+60     	; 0xe00 <GPIO_setupPortDirection+0x7a>
     dc4:	2b 81       	ldd	r18, Y+3	; 0x03
     dc6:	3c 81       	ldd	r19, Y+4	; 0x04
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	81 f0       	breq	.+32     	; 0xdee <GPIO_setupPortDirection+0x68>
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	91 05       	cpc	r25, r1
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <GPIO_setupPortDirection+0x72>
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     dda:	ea e3       	ldi	r30, 0x3A	; 58
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	80 83       	st	Z, r24
     de2:	0e c0       	rjmp	.+28     	; 0xe00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     de4:	e7 e3       	ldi	r30, 0x37	; 55
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	80 83       	st	Z, r24
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     dee:	e4 e3       	ldi	r30, 0x34	; 52
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	80 83       	st	Z, r24
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     df8:	e1 e3       	ldi	r30, 0x31	; 49
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	80 83       	st	Z, r24
			break;
		}
	}
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <GPIO_writePort+0x6>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <GPIO_writePort+0x8>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	90 f5       	brcc	.+100    	; 0xe88 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	3c 83       	std	Y+4, r19	; 0x04
     e2c:	2b 83       	std	Y+3, r18	; 0x03
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	91 05       	cpc	r25, r1
     e36:	d1 f0       	breq	.+52     	; 0xe6c <GPIO_writePort+0x5e>
     e38:	2b 81       	ldd	r18, Y+3	; 0x03
     e3a:	3c 81       	ldd	r19, Y+4	; 0x04
     e3c:	22 30       	cpi	r18, 0x02	; 2
     e3e:	31 05       	cpc	r19, r1
     e40:	2c f4       	brge	.+10     	; 0xe4c <GPIO_writePort+0x3e>
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	61 f0       	breq	.+24     	; 0xe62 <GPIO_writePort+0x54>
     e4a:	1e c0       	rjmp	.+60     	; 0xe88 <GPIO_writePort+0x7a>
     e4c:	2b 81       	ldd	r18, Y+3	; 0x03
     e4e:	3c 81       	ldd	r19, Y+4	; 0x04
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	31 05       	cpc	r19, r1
     e54:	81 f0       	breq	.+32     	; 0xe76 <GPIO_writePort+0x68>
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	91 05       	cpc	r25, r1
     e5e:	81 f0       	breq	.+32     	; 0xe80 <GPIO_writePort+0x72>
     e60:	13 c0       	rjmp	.+38     	; 0xe88 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     e62:	eb e3       	ldi	r30, 0x3B	; 59
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	80 83       	st	Z, r24
     e6a:	0e c0       	rjmp	.+28     	; 0xe88 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     e6c:	e8 e3       	ldi	r30, 0x38	; 56
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	80 83       	st	Z, r24
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     e76:	e5 e3       	ldi	r30, 0x35	; 53
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	80 83       	st	Z, r24
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     e80:	e2 e3       	ldi	r30, 0x32	; 50
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	80 83       	st	Z, r24
			break;
		}
	}
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <GPIO_readPort+0x6>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <GPIO_readPort+0x8>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     ea4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	84 30       	cpi	r24, 0x04	; 4
     eaa:	90 f5       	brcc	.+100    	; 0xf10 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3c 83       	std	Y+4, r19	; 0x04
     eb4:	2b 83       	std	Y+3, r18	; 0x03
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	d1 f0       	breq	.+52     	; 0xef4 <GPIO_readPort+0x5e>
     ec0:	2b 81       	ldd	r18, Y+3	; 0x03
     ec2:	3c 81       	ldd	r19, Y+4	; 0x04
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	2c f4       	brge	.+10     	; 0xed4 <GPIO_readPort+0x3e>
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	61 f0       	breq	.+24     	; 0xeea <GPIO_readPort+0x54>
     ed2:	1e c0       	rjmp	.+60     	; 0xf10 <GPIO_readPort+0x7a>
     ed4:	2b 81       	ldd	r18, Y+3	; 0x03
     ed6:	3c 81       	ldd	r19, Y+4	; 0x04
     ed8:	22 30       	cpi	r18, 0x02	; 2
     eda:	31 05       	cpc	r19, r1
     edc:	81 f0       	breq	.+32     	; 0xefe <GPIO_readPort+0x68>
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	83 30       	cpi	r24, 0x03	; 3
     ee4:	91 05       	cpc	r25, r1
     ee6:	81 f0       	breq	.+32     	; 0xf08 <GPIO_readPort+0x72>
     ee8:	13 c0       	rjmp	.+38     	; 0xf10 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     eea:	e9 e3       	ldi	r30, 0x39	; 57
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	0e c0       	rjmp	.+28     	; 0xf10 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     ef4:	e6 e3       	ldi	r30, 0x36	; 54
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	09 c0       	rjmp	.+18     	; 0xf10 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     efe:	e3 e3       	ldi	r30, 0x33	; 51
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     f08:	e0 e3       	ldi	r30, 0x30	; 48
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     f10:	89 81       	ldd	r24, Y+1	; 0x01
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <TIMER_Init>:
/*
 * Description:
 * Initialize timer 0, 1 or 2 with specified configurations:
 */
void TIMER_Init( TIMER_ConfigType* config )
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	2a 97       	sbiw	r28, 0x0a	; 10
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
	/* Select the required timer. */
	switch(config->timerID)
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	80 81       	ld	r24, Z
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3a 87       	std	Y+10, r19	; 0x0a
     f44:	29 87       	std	Y+9, r18	; 0x09
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <TIMER_Init+0x32>
     f50:	51 c0       	rjmp	.+162    	; 0xff4 <TIMER_Init+0xd4>
     f52:	29 85       	ldd	r18, Y+9	; 0x09
     f54:	3a 85       	ldd	r19, Y+10	; 0x0a
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <TIMER_Init+0x3e>
     f5c:	95 c0       	rjmp	.+298    	; 0x1088 <TIMER_Init+0x168>
     f5e:	89 85       	ldd	r24, Y+9	; 0x09
     f60:	9a 85       	ldd	r25, Y+10	; 0x0a
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	09 f0       	breq	.+2      	; 0xf68 <TIMER_Init+0x48>
     f66:	d5 c0       	rjmp	.+426    	; 0x1112 <TIMER_Init+0x1f2>
	{
	/***********************************TIMER0***********************************/
	case TIMER0_ID:
		/* Put the required initial value of timer in the timer0 8bits counter register.*/
		TCNT0 = (uint8)config->initialValue;
     f68:	a2 e5       	ldi	r26, 0x52	; 82
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	8c 93       	st	X, r24
		 * FOC0 = 1 Non PWM mode.
		 * WGM01:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
		 * COM01:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
		 * CS02:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
		 */
		TCCR0 = (1<<FOC0);
     f76:	e3 e5       	ldi	r30, 0x53	; 83
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 e8       	ldi	r24, 0x80	; 128
     f7c:	80 83       	st	Z, r24
		/* Inserting clock in the first three bits in TCCR0. */
		TCCR0 = (TCCR0&~(0x07)) | (config->prescaler);
     f7e:	a3 e5       	ldi	r26, 0x53	; 83
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e3 e5       	ldi	r30, 0x53	; 83
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	98 2f       	mov	r25, r24
     f8a:	98 7f       	andi	r25, 0xF8	; 248
     f8c:	e9 81       	ldd	r30, Y+1	; 0x01
     f8e:	fa 81       	ldd	r31, Y+2	; 0x02
     f90:	86 81       	ldd	r24, Z+6	; 0x06
     f92:	89 2b       	or	r24, r25
     f94:	8c 93       	st	X, r24
		switch(config->mode)
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	38 87       	std	Y+8, r19	; 0x08
     fa2:	2f 83       	std	Y+7, r18	; 0x07
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	98 85       	ldd	r25, Y+8	; 0x08
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	31 f0       	breq	.+12     	; 0xfb8 <TIMER_Init+0x98>
     fac:	2f 81       	ldd	r18, Y+7	; 0x07
     fae:	38 85       	ldd	r19, Y+8	; 0x08
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 05       	cpc	r19, r1
     fb4:	49 f0       	breq	.+18     	; 0xfc8 <TIMER_Init+0xa8>
     fb6:	ad c0       	rjmp	.+346    	; 0x1112 <TIMER_Init+0x1f2>
		{
		case OVERFLOW_MODE:
			/* Enable overflow interrupt for required mode. */
			TIMSK |= (1<<TOIE0);
     fb8:	a9 e5       	ldi	r26, 0x59	; 89
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e9 e5       	ldi	r30, 0x59	; 89
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	8c 93       	st	X, r24
     fc6:	a5 c0       	rjmp	.+330    	; 0x1112 <TIMER_Init+0x1f2>
			break;
			/* Set bits that need to be set in compare mode, otherwise let them 0s. */
		case COMPARE_MODE:
			TCCR0 |= (1<<WGM01);
     fc8:	a3 e5       	ldi	r26, 0x53	; 83
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 60       	ori	r24, 0x08	; 8
     fd4:	8c 93       	st	X, r24
			/* Store compare value in case of mode is COMPARE_MODE. */
			OCR0 = config->compareValue;
     fd6:	ac e5       	ldi	r26, 0x5C	; 92
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e9 81       	ldd	r30, Y+1	; 0x01
     fdc:	fa 81       	ldd	r31, Y+2	; 0x02
     fde:	84 81       	ldd	r24, Z+4	; 0x04
     fe0:	95 81       	ldd	r25, Z+5	; 0x05
     fe2:	8c 93       	st	X, r24
			/* Enable compare match interrupt for required mode. */
			TIMSK |= (1<<OCIE0);
     fe4:	a9 e5       	ldi	r26, 0x59	; 89
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e9 e5       	ldi	r30, 0x59	; 89
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
     ff2:	8f c0       	rjmp	.+286    	; 0x1112 <TIMER_Init+0x1f2>
		}
		break;
		/***********************************TIMER1***********************************/
		case TIMER1_ID:
			/* Put the required initial value of timer in the timer1 16 bits counter register.*/
			TCNT1 = config->initialValue;
     ff4:	ac e4       	ldi	r26, 0x4C	; 76
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e9 81       	ldd	r30, Y+1	; 0x01
     ffa:	fa 81       	ldd	r31, Y+2	; 0x02
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	11 96       	adiw	r26, 0x01	; 1
    1002:	9c 93       	st	X, r25
    1004:	8e 93       	st	-X, r24
			 * FOC1A,FOC1B = 1 Non PWM mode.
			 * WGM01:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
			 * COM1A1:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
			 * CS02:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1006:	ef e4       	ldi	r30, 0x4F	; 79
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	8c e0       	ldi	r24, 0x0C	; 12
    100c:	80 83       	st	Z, r24
			/* Inserting clock in the first three bits in TCCR0. */
			TCCR1B = (TCCR1B&~(0x07)) | (config->prescaler);
    100e:	ae e4       	ldi	r26, 0x4E	; 78
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ee e4       	ldi	r30, 0x4E	; 78
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	98 2f       	mov	r25, r24
    101a:	98 7f       	andi	r25, 0xF8	; 248
    101c:	e9 81       	ldd	r30, Y+1	; 0x01
    101e:	fa 81       	ldd	r31, Y+2	; 0x02
    1020:	86 81       	ldd	r24, Z+6	; 0x06
    1022:	89 2b       	or	r24, r25
    1024:	8c 93       	st	X, r24
			switch(config->mode)
    1026:	e9 81       	ldd	r30, Y+1	; 0x01
    1028:	fa 81       	ldd	r31, Y+2	; 0x02
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3e 83       	std	Y+6, r19	; 0x06
    1032:	2d 83       	std	Y+5, r18	; 0x05
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	31 f0       	breq	.+12     	; 0x1048 <TIMER_Init+0x128>
    103c:	2d 81       	ldd	r18, Y+5	; 0x05
    103e:	3e 81       	ldd	r19, Y+6	; 0x06
    1040:	21 30       	cpi	r18, 0x01	; 1
    1042:	31 05       	cpc	r19, r1
    1044:	49 f0       	breq	.+18     	; 0x1058 <TIMER_Init+0x138>
    1046:	65 c0       	rjmp	.+202    	; 0x1112 <TIMER_Init+0x1f2>
			{
			case OVERFLOW_MODE:
				/* Enable overflow interrupt for required mode. */
				TIMSK |= (1<<TOIE1);
    1048:	a9 e5       	ldi	r26, 0x59	; 89
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e9 e5       	ldi	r30, 0x59	; 89
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	8c 93       	st	X, r24
    1056:	5d c0       	rjmp	.+186    	; 0x1112 <TIMER_Init+0x1f2>
				break;
				/* Set bits that need to be set in compare mode, otherwise let them 0s. */
			case COMPARE_MODE:
				TCCR1B |= (1<<WGM12);
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 60       	ori	r24, 0x08	; 8
    1064:	8c 93       	st	X, r24
				/* Store compare value in case of mode is COMPARE_MODE. */
				OCR1A = config->compareValue;
    1066:	aa e4       	ldi	r26, 0x4A	; 74
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	84 81       	ldd	r24, Z+4	; 0x04
    1070:	95 81       	ldd	r25, Z+5	; 0x05
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	9c 93       	st	X, r25
    1076:	8e 93       	st	-X, r24
				/* Enable compare match interrupt for required mode. */
				TIMSK |= (1<<OCIE1A);
    1078:	a9 e5       	ldi	r26, 0x59	; 89
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e9 e5       	ldi	r30, 0x59	; 89
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	80 61       	ori	r24, 0x10	; 16
    1084:	8c 93       	st	X, r24
    1086:	45 c0       	rjmp	.+138    	; 0x1112 <TIMER_Init+0x1f2>
			}
			break;
			/***********************************TIMER2***********************************/
			case TIMER2_ID:
				/* Put the required initial value of timer in the timer2 8bits counter register.*/
				TCNT2 = (uint8)config->initialValue;
    1088:	a4 e4       	ldi	r26, 0x44	; 68
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e9 81       	ldd	r30, Y+1	; 0x01
    108e:	fa 81       	ldd	r31, Y+2	; 0x02
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	8c 93       	st	X, r24
				 * FOC2 = 1 Non PWM mode.
				 * WGM21:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
				 * COM01:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
				 * CS22:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
				 */
				TCCR2 = (1<<FOC2);
    1096:	e5 e4       	ldi	r30, 0x45	; 69
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 e8       	ldi	r24, 0x80	; 128
    109c:	80 83       	st	Z, r24
				/* Inserting clock in the first three bits in TCCR0. */
				TCCR2 = (TCCR2&~(0x07)) | (config->prescaler);
    109e:	a5 e4       	ldi	r26, 0x45	; 69
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e4       	ldi	r30, 0x45	; 69
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	98 2f       	mov	r25, r24
    10aa:	98 7f       	andi	r25, 0xF8	; 248
    10ac:	e9 81       	ldd	r30, Y+1	; 0x01
    10ae:	fa 81       	ldd	r31, Y+2	; 0x02
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	89 2b       	or	r24, r25
    10b4:	8c 93       	st	X, r24
				switch(config->mode)
    10b6:	e9 81       	ldd	r30, Y+1	; 0x01
    10b8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ba:	81 81       	ldd	r24, Z+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3c 83       	std	Y+4, r19	; 0x04
    10c2:	2b 83       	std	Y+3, r18	; 0x03
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <TIMER_Init+0x1b8>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	3c 81       	ldd	r19, Y+4	; 0x04
    10d0:	21 30       	cpi	r18, 0x01	; 1
    10d2:	31 05       	cpc	r19, r1
    10d4:	49 f0       	breq	.+18     	; 0x10e8 <TIMER_Init+0x1c8>
    10d6:	1d c0       	rjmp	.+58     	; 0x1112 <TIMER_Init+0x1f2>
				{
				case OVERFLOW_MODE:
					/* Enable overflow interrupt for required mode. */
					TIMSK |= (1<<TOIE2);
    10d8:	a9 e5       	ldi	r26, 0x59	; 89
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e9 e5       	ldi	r30, 0x59	; 89
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 64       	ori	r24, 0x40	; 64
    10e4:	8c 93       	st	X, r24
    10e6:	15 c0       	rjmp	.+42     	; 0x1112 <TIMER_Init+0x1f2>
					break;
					/* Set bits that need to be set in compare mode, otherwise let them 0s. */
				case COMPARE_MODE:
					TCCR2 |= (1<<WGM21);
    10e8:	a5 e4       	ldi	r26, 0x45	; 69
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e4       	ldi	r30, 0x45	; 69
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	88 60       	ori	r24, 0x08	; 8
    10f4:	8c 93       	st	X, r24
					/* Store compare value in case of mode is COMPARE_MODE. */
					OCR2 = config->compareValue;
    10f6:	a3 e4       	ldi	r26, 0x43	; 67
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e9 81       	ldd	r30, Y+1	; 0x01
    10fc:	fa 81       	ldd	r31, Y+2	; 0x02
    10fe:	84 81       	ldd	r24, Z+4	; 0x04
    1100:	95 81       	ldd	r25, Z+5	; 0x05
    1102:	8c 93       	st	X, r24
					/* Enable compare match interrupt for required mode. */
					TIMSK |= (1<<OCIE2);
    1104:	a9 e5       	ldi	r26, 0x59	; 89
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e9 e5       	ldi	r30, 0x59	; 89
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	8c 93       	st	X, r24
					break;
				}
	}
}
    1112:	2a 96       	adiw	r28, 0x0a	; 10
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <TIMER_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void TIMER_setCallBack( void(*a_ptr)( void ), TIMER_ID timerID)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <TIMER_setCallBack+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <TIMER_setCallBack+0x8>
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	switch(timerID)
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3d 83       	std	Y+5, r19	; 0x05
    1140:	2c 83       	std	Y+4, r18	; 0x04
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	91 05       	cpc	r25, r1
    114a:	81 f0       	breq	.+32     	; 0x116c <TIMER_setCallBack+0x48>
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	22 30       	cpi	r18, 0x02	; 2
    1152:	31 05       	cpc	r19, r1
    1154:	91 f0       	breq	.+36     	; 0x117a <TIMER_setCallBack+0x56>
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	a1 f4       	brne	.+40     	; 0x1186 <TIMER_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_timer0CallBackPtr = a_ptr;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	90 93 77 00 	sts	0x0077, r25
    1166:	80 93 76 00 	sts	0x0076, r24
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <TIMER_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_timer1CallBackPtr = a_ptr;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	90 93 79 00 	sts	0x0079, r25
    1174:	80 93 78 00 	sts	0x0078, r24
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <TIMER_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_timer2CallBackPtr = a_ptr;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	90 93 7b 00 	sts	0x007B, r25
    1182:	80 93 7a 00 	sts	0x007A, r24
		break;
	}
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIMER_Deinit>:
/*
 * Description:
 * Stops the timer by stopping its clock.
 */
void TIMER_Deinit( TIMER_ID timerID )
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <TIMER_Deinit+0x6>
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
	switch(timerID)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3b 83       	std	Y+3, r19	; 0x03
    11ac:	2a 83       	std	Y+2, r18	; 0x02
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <TIMER_Deinit+0x3c>
    11b8:	2a 81       	ldd	r18, Y+2	; 0x02
    11ba:	3b 81       	ldd	r19, Y+3	; 0x03
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	61 f0       	breq	.+24     	; 0x11da <TIMER_Deinit+0x44>
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	9b 81       	ldd	r25, Y+3	; 0x03
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	59 f4       	brne	.+22     	; 0x11e0 <TIMER_Deinit+0x4a>
	{
	case TIMER0_ID:
		TCCR0 = 0;
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	10 82       	st	Z, r1
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <TIMER_Deinit+0x4a>
		break;
	case TIMER1_ID:
		TCCR1B = 0;
    11d2:	ee e4       	ldi	r30, 0x4E	; 78
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	10 82       	st	Z, r1
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <TIMER_Deinit+0x4a>
		break;
	case TIMER2_ID:
		TCCR2 = 0;
    11da:	e5 e4       	ldi	r30, 0x45	; 69
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	10 82       	st	Z, r1
		break;
	}
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <__vector_9>:
/*
 * Description:
 * Calls the call back function of timer 0 in case of Overflow interrupt occurs.
 */
ISR( TIMER0_OVF_vect )
{
    11ec:	1f 92       	push	r1
    11ee:	0f 92       	push	r0
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	0f 92       	push	r0
    11f4:	11 24       	eor	r1, r1
    11f6:	2f 93       	push	r18
    11f8:	3f 93       	push	r19
    11fa:	4f 93       	push	r20
    11fc:	5f 93       	push	r21
    11fe:	6f 93       	push	r22
    1200:	7f 93       	push	r23
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	af 93       	push	r26
    1208:	bf 93       	push	r27
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR)
    1216:	80 91 76 00 	lds	r24, 0x0076
    121a:	90 91 77 00 	lds	r25, 0x0077
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	29 f0       	breq	.+10     	; 0x122c <__vector_9+0x40>
	{
		(*g_timer0CallBackPtr)();
    1222:	e0 91 76 00 	lds	r30, 0x0076
    1226:	f0 91 77 00 	lds	r31, 0x0077
    122a:	09 95       	icall
	}
	TIFR |= TOV0;
    122c:	e8 e5       	ldi	r30, 0x58	; 88
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	a8 e5       	ldi	r26, 0x58	; 88
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	8c 91       	ld	r24, X
    1236:	80 83       	st	Z, r24
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_19>:
/*
 * Description:
 * Calls the call back function of timer 0 in case of compare match interrupt occurs.
 */
ISR( TIMER0_COMP_vect )
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR)
    1288:	80 91 76 00 	lds	r24, 0x0076
    128c:	90 91 77 00 	lds	r25, 0x0077
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	29 f0       	breq	.+10     	; 0x129e <__vector_19+0x40>
	{
		(*g_timer0CallBackPtr)();
    1294:	e0 91 76 00 	lds	r30, 0x0076
    1298:	f0 91 77 00 	lds	r31, 0x0077
    129c:	09 95       	icall
	}
	TIFR |= OCF0;
    129e:	a8 e5       	ldi	r26, 0x58	; 88
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e8 e5       	ldi	r30, 0x58	; 88
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	8c 93       	st	X, r24
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_8>:
/*
 * Description:
 * Calls the call back function of timer 1 in case of Overflow interrupt occurs.
 */
ISR( TIMER1_OVF_vect )
{
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	ef 93       	push	r30
    12f2:	ff 93       	push	r31
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR)
    12fc:	80 91 78 00 	lds	r24, 0x0078
    1300:	90 91 79 00 	lds	r25, 0x0079
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	29 f0       	breq	.+10     	; 0x1312 <__vector_8+0x40>
	{
		(*g_timer1CallBackPtr)();
    1308:	e0 91 78 00 	lds	r30, 0x0078
    130c:	f0 91 79 00 	lds	r31, 0x0079
    1310:	09 95       	icall
	}
	TIFR |= TOV1;
    1312:	a8 e5       	ldi	r26, 0x58	; 88
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e5       	ldi	r30, 0x58	; 88
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	8c 93       	st	X, r24
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	ff 91       	pop	r31
    1326:	ef 91       	pop	r30
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	7f 91       	pop	r23
    1332:	6f 91       	pop	r22
    1334:	5f 91       	pop	r21
    1336:	4f 91       	pop	r20
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	0f 90       	pop	r0
    1342:	1f 90       	pop	r1
    1344:	18 95       	reti

00001346 <__vector_6>:
/*
 * Description:
 * Calls the call back function of timer 1 in case of compare match interrupt occurs.
 */
ISR( TIMER1_COMPA_vect )
{
    1346:	1f 92       	push	r1
    1348:	0f 92       	push	r0
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	0f 92       	push	r0
    134e:	11 24       	eor	r1, r1
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR)
    1370:	80 91 78 00 	lds	r24, 0x0078
    1374:	90 91 79 00 	lds	r25, 0x0079
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	29 f0       	breq	.+10     	; 0x1386 <__vector_6+0x40>
	{
		(*g_timer1CallBackPtr)();
    137c:	e0 91 78 00 	lds	r30, 0x0078
    1380:	f0 91 79 00 	lds	r31, 0x0079
    1384:	09 95       	icall
	}
	TIFR |= OCF1A;
    1386:	a8 e5       	ldi	r26, 0x58	; 88
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e8 e5       	ldi	r30, 0x58	; 88
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	8c 93       	st	X, r24
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <__vector_4>:
/*
 * Description:
 * Calls the call back function of timer 2 in case of Overflow interrupt occurs.
 */
ISR( TIMER2_OVF_vect )
{
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR)
    13e4:	80 91 7a 00 	lds	r24, 0x007A
    13e8:	90 91 7b 00 	lds	r25, 0x007B
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	29 f0       	breq	.+10     	; 0x13fa <__vector_4+0x40>
	{
		(*g_timer2CallBackPtr)();
    13f0:	e0 91 7a 00 	lds	r30, 0x007A
    13f4:	f0 91 7b 00 	lds	r31, 0x007B
    13f8:	09 95       	icall
	}
	TIFR |= TOV2;
    13fa:	a8 e5       	ldi	r26, 0x58	; 88
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e8 e5       	ldi	r30, 0x58	; 88
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	86 60       	ori	r24, 0x06	; 6
    1406:	8c 93       	st	X, r24
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	ff 91       	pop	r31
    140e:	ef 91       	pop	r30
    1410:	bf 91       	pop	r27
    1412:	af 91       	pop	r26
    1414:	9f 91       	pop	r25
    1416:	8f 91       	pop	r24
    1418:	7f 91       	pop	r23
    141a:	6f 91       	pop	r22
    141c:	5f 91       	pop	r21
    141e:	4f 91       	pop	r20
    1420:	3f 91       	pop	r19
    1422:	2f 91       	pop	r18
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	0f 90       	pop	r0
    142a:	1f 90       	pop	r1
    142c:	18 95       	reti

0000142e <__vector_3>:
/*
 * Description:
 * Calls the call back function of timer 2 in case of compare match interrupt occurs.
 */
ISR( TIMER2_COMP_vect )
{
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	11 24       	eor	r1, r1
    1438:	2f 93       	push	r18
    143a:	3f 93       	push	r19
    143c:	4f 93       	push	r20
    143e:	5f 93       	push	r21
    1440:	6f 93       	push	r22
    1442:	7f 93       	push	r23
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25
    1448:	af 93       	push	r26
    144a:	bf 93       	push	r27
    144c:	ef 93       	push	r30
    144e:	ff 93       	push	r31
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR)
    1458:	80 91 7a 00 	lds	r24, 0x007A
    145c:	90 91 7b 00 	lds	r25, 0x007B
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	29 f0       	breq	.+10     	; 0x146e <__vector_3+0x40>
	{
		(*g_timer2CallBackPtr)();
    1464:	e0 91 7a 00 	lds	r30, 0x007A
    1468:	f0 91 7b 00 	lds	r31, 0x007B
    146c:	09 95       	icall
	}
	TIFR |= OCF2;
    146e:	a8 e5       	ldi	r26, 0x58	; 88
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e8 e5       	ldi	r30, 0x58	; 88
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	87 60       	ori	r24, 0x07	; 7
    147a:	8c 93       	st	X, r24
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init( TWI_ConfigType* config )
{
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <TWI_init+0xa>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
	 * F_SCL = (F_CPU)/(16 + 2 * (TWBR) * 4 ^ (TWPS))
	 * TWPS  =00
	 * F_SCL = F_CPU / (16 + 2 * TWBR)
	 * TWBR = (F_CPU/F_SCL-16)/(2)
	 */
	TWBR = (F_CPU / config->bitRate - 16)/(2);
    14b4:	00 e2       	ldi	r16, 0x20	; 32
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	20 81       	ld	r18, Z
    14be:	31 81       	ldd	r19, Z+1	; 0x01
    14c0:	42 81       	ldd	r20, Z+2	; 0x02
    14c2:	53 81       	ldd	r21, Z+3	; 0x03
    14c4:	80 e4       	ldi	r24, 0x40	; 64
    14c6:	92 e4       	ldi	r25, 0x42	; 66
    14c8:	af e0       	ldi	r26, 0x0F	; 15
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 1f 0c 	call	0x183e	; 0x183e <__udivmodsi4>
    14d4:	da 01       	movw	r26, r20
    14d6:	c9 01       	movw	r24, r18
    14d8:	40 97       	sbiw	r24, 0x10	; 16
    14da:	a1 09       	sbc	r26, r1
    14dc:	b1 09       	sbc	r27, r1
    14de:	b6 95       	lsr	r27
    14e0:	a7 95       	ror	r26
    14e2:	97 95       	ror	r25
    14e4:	87 95       	ror	r24
    14e6:	f8 01       	movw	r30, r16
    14e8:	80 83       	st	Z, r24
	TWSR = 0x00;
    14ea:	e1 e2       	ldi	r30, 0x21	; 33
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (config->address) << 1;
    14f0:	a2 e2       	ldi	r26, 0x22	; 34
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e9 81       	ldd	r30, Y+1	; 0x01
    14f6:	fa 81       	ldd	r31, Y+2	; 0x02
    14f8:	84 81       	ldd	r24, Z+4	; 0x04
    14fa:	88 0f       	add	r24, r24
    14fc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    14fe:	e6 e5       	ldi	r30, 0x56	; 86
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	80 83       	st	Z, r24
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <TWI_start>:

void TWI_start(void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    151c:	e6 e5       	ldi	r30, 0x56	; 86
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	84 ea       	ldi	r24, 0xA4	; 164
    1522:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1524:	e6 e5       	ldi	r30, 0x56	; 86
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	88 23       	and	r24, r24
    152c:	dc f7       	brge	.-10     	; 0x1524 <TWI_start+0x10>
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <TWI_stop>:

void TWI_stop(void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    153c:	e6 e5       	ldi	r30, 0x56	; 86
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	84 e9       	ldi	r24, 0x94	; 148
    1542:	80 83       	st	Z, r24
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1556:	e3 e2       	ldi	r30, 0x23	; 35
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    155e:	e6 e5       	ldi	r30, 0x56	; 86
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	84 e8       	ldi	r24, 0x84	; 132
    1564:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1566:	e6 e5       	ldi	r30, 0x56	; 86
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	88 23       	and	r24, r24
    156e:	dc f7       	brge	.-10     	; 0x1566 <TWI_writeByte+0x1c>
}
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1580:	e6 e5       	ldi	r30, 0x56	; 86
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	84 ec       	ldi	r24, 0xC4	; 196
    1586:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1588:	e6 e5       	ldi	r30, 0x56	; 86
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	88 23       	and	r24, r24
    1590:	dc f7       	brge	.-10     	; 0x1588 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1592:	e3 e2       	ldi	r30, 0x23	; 35
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    15a6:	e6 e5       	ldi	r30, 0x56	; 86
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	84 e8       	ldi	r24, 0x84	; 132
    15ac:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    15ae:	e6 e5       	ldi	r30, 0x56	; 86
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	dc f7       	brge	.-10     	; 0x15ae <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    15b8:	e3 e2       	ldi	r30, 0x23	; 35
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	0f 92       	push	r0
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    15ce:	e1 e2       	ldi	r30, 0x21	; 33
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init( UART_ConfigType* config )
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <UART_init+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <UART_init+0x8>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <UART_init+0xa>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    15f4:	1a 82       	std	Y+2, r1	; 0x02
    15f6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    15f8:	eb e2       	ldi	r30, 0x2B	; 43
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 initially and i will change it later while i select the data bits.
	 * RXB8 & TXB8 not used for 8-bit data mode /////////
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1600:	ea e2       	ldi	r30, 0x2A	; 42
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	88 e1       	ldi	r24, 0x18	; 24
    1606:	80 83       	st	Z, r24
	 * USBS    = inserted according to configurations
	 * UCSZ1:0 = 11 For 8-bit data mode /////////////////////
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	/* Insert the value of parity type in bits 5:4, and number of stop bits according to configurations.*/
	UCSRC = (1<<URSEL) | ((UCSRC&~(0x30))|((config->parity)<<4)) | ((config->stopBits)<<USBS);
    1608:	a0 e4       	ldi	r26, 0x40	; 64
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e0 e4       	ldi	r30, 0x40	; 64
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	2f 7c       	andi	r18, 0xCF	; 207
    1616:	eb 81       	ldd	r30, Y+3	; 0x03
    1618:	fc 81       	ldd	r31, Y+4	; 0x04
    161a:	83 81       	ldd	r24, Z+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	82 95       	swap	r24
    1622:	92 95       	swap	r25
    1624:	90 7f       	andi	r25, 0xF0	; 240
    1626:	98 27       	eor	r25, r24
    1628:	80 7f       	andi	r24, 0xF0	; 240
    162a:	98 27       	eor	r25, r24
    162c:	82 2b       	or	r24, r18
    162e:	28 2f       	mov	r18, r24
    1630:	20 68       	ori	r18, 0x80	; 128
    1632:	eb 81       	ldd	r30, Y+3	; 0x03
    1634:	fc 81       	ldd	r31, Y+4	; 0x04
    1636:	84 81       	ldd	r24, Z+4	; 0x04
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	82 2b       	or	r24, r18
    164a:	8c 93       	st	X, r24

	/* Configure registers according to required data bits*/
	switch(config->dataLength)
    164c:	eb 81       	ldd	r30, Y+3	; 0x03
    164e:	fc 81       	ldd	r31, Y+4	; 0x04
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3e 83       	std	Y+6, r19	; 0x06
    1658:	2d 83       	std	Y+5, r18	; 0x05
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	99 23       	and	r25, r25
    1660:	34 f1       	brlt	.+76     	; 0x16ae <UART_init+0xcc>
    1662:	2d 81       	ldd	r18, Y+5	; 0x05
    1664:	3e 81       	ldd	r19, Y+6	; 0x06
    1666:	24 30       	cpi	r18, 0x04	; 4
    1668:	31 05       	cpc	r19, r1
    166a:	34 f0       	brlt	.+12     	; 0x1678 <UART_init+0x96>
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	91 05       	cpc	r25, r1
    1674:	71 f0       	breq	.+28     	; 0x1692 <UART_init+0xb0>
    1676:	1b c0       	rjmp	.+54     	; 0x16ae <UART_init+0xcc>
	case BITS_5:
	case BITS_6:
	case BITS_7:
	case BITS_8:
		/* Keep UCSZ2 at UCSRB register 0 as it is and insert number of bits on UCSRC register at first 2 bits.*/
		UCSRC = (UCSRC&~(0x03))|(config->dataLength);
    1678:	a0 e4       	ldi	r26, 0x40	; 64
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e0 e4       	ldi	r30, 0x40	; 64
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	98 2f       	mov	r25, r24
    1684:	9c 7f       	andi	r25, 0xFC	; 252
    1686:	eb 81       	ldd	r30, Y+3	; 0x03
    1688:	fc 81       	ldd	r31, Y+4	; 0x04
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	89 2b       	or	r24, r25
    168e:	8c 93       	st	X, r24
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <UART_init+0xcc>
		break;
	case BITS_9:
		/* Set UCSZ2 at UCSRB register to 1 and insert 0b11 at first 2 bits.*/
		UCSRB |= (1<<UCSZ2);
    1692:	aa e2       	ldi	r26, 0x2A	; 42
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ea e2       	ldi	r30, 0x2A	; 42
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	84 60       	ori	r24, 0x04	; 4
    169e:	8c 93       	st	X, r24
		UCSRC |= 0x03;
    16a0:	a0 e4       	ldi	r26, 0x40	; 64
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e0 e4       	ldi	r30, 0x40	; 64
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	83 60       	ori	r24, 0x03	; 3
    16ac:	8c 93       	st	X, r24
		break;
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->bitRate * 8UL))) - 1);
    16ae:	eb 81       	ldd	r30, Y+3	; 0x03
    16b0:	fc 81       	ldd	r31, Y+4	; 0x04
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	cc 01       	movw	r24, r24
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	aa 1f       	adc	r26, r26
    16c2:	bb 1f       	adc	r27, r27
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	aa 1f       	adc	r26, r26
    16ca:	bb 1f       	adc	r27, r27
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	aa 1f       	adc	r26, r26
    16d2:	bb 1f       	adc	r27, r27
    16d4:	9c 01       	movw	r18, r24
    16d6:	ad 01       	movw	r20, r26
    16d8:	80 e4       	ldi	r24, 0x40	; 64
    16da:	92 e4       	ldi	r25, 0x42	; 66
    16dc:	af e0       	ldi	r26, 0x0F	; 15
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 1f 0c 	call	0x183e	; 0x183e <__udivmodsi4>
    16e8:	da 01       	movw	r26, r20
    16ea:	c9 01       	movw	r24, r18
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    16f2:	e0 e4       	ldi	r30, 0x40	; 64
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	89 2f       	mov	r24, r25
    16fc:	99 27       	eor	r25, r25
    16fe:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1700:	e9 e2       	ldi	r30, 0x29	; 41
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	80 83       	st	Z, r24
}
    1708:	26 96       	adiw	r28, 0x06	; 6
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	0f 92       	push	r0
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1726:	eb e2       	ldi	r30, 0x2B	; 43
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	80 72       	andi	r24, 0x20	; 32
    1732:	90 70       	andi	r25, 0x00	; 0
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	b9 f3       	breq	.-18     	; 0x1726 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1738:	ec e2       	ldi	r30, 0x2C	; 44
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1750:	eb e2       	ldi	r30, 0x2B	; 43
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 23       	and	r24, r24
    1758:	dc f7       	brge	.-10     	; 0x1750 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    175a:	ec e2       	ldi	r30, 0x2C	; 44
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <UART_sendString+0x6>
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	9b 83       	std	Y+3, r25	; 0x03
    1774:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1776:	19 82       	std	Y+1, r1	; 0x01
    1778:	0e c0       	rjmp	.+28     	; 0x1796 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	9b 81       	ldd	r25, Y+3	; 0x03
    1784:	fc 01       	movw	r30, r24
    1786:	e2 0f       	add	r30, r18
    1788:	f3 1f       	adc	r31, r19
    178a:	80 81       	ld	r24, Z
    178c:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_sendByte>
		i++;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	9b 81       	ldd	r25, Y+3	; 0x03
    17a0:	fc 01       	movw	r30, r24
    17a2:	e2 0f       	add	r30, r18
    17a4:	f3 1f       	adc	r31, r19
    17a6:	80 81       	ld	r24, Z
    17a8:	88 23       	and	r24, r24
    17aa:	39 f7       	brne	.-50     	; 0x177a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <UART_receiveString+0xa>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	9b 83       	std	Y+3, r25	; 0x03
    17ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    17cc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	8c 01       	movw	r16, r24
    17da:	02 0f       	add	r16, r18
    17dc:	13 1f       	adc	r17, r19
    17de:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
    17e2:	f8 01       	movw	r30, r16
    17e4:	80 83       	st	Z, r24
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	8f 5f       	subi	r24, 0xFF	; 255
    17ec:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	8c 01       	movw	r16, r24
    17fa:	02 0f       	add	r16, r18
    17fc:	13 1f       	adc	r17, r19
    17fe:	0e 94 a4 0b 	call	0x1748	; 0x1748 <UART_recieveByte>
    1802:	f8 01       	movw	r30, r16
    1804:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	fc 01       	movw	r30, r24
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	80 81       	ld	r24, Z
    1818:	83 32       	cpi	r24, 0x23	; 35
    181a:	31 f7       	brne	.-52     	; 0x17e8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	fc 01       	movw	r30, r24
    1828:	e2 0f       	add	r30, r18
    182a:	f3 1f       	adc	r31, r19
    182c:	10 82       	st	Z, r1
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	08 95       	ret

0000183e <__udivmodsi4>:
    183e:	a1 e2       	ldi	r26, 0x21	; 33
    1840:	1a 2e       	mov	r1, r26
    1842:	aa 1b       	sub	r26, r26
    1844:	bb 1b       	sub	r27, r27
    1846:	fd 01       	movw	r30, r26
    1848:	0d c0       	rjmp	.+26     	; 0x1864 <__udivmodsi4_ep>

0000184a <__udivmodsi4_loop>:
    184a:	aa 1f       	adc	r26, r26
    184c:	bb 1f       	adc	r27, r27
    184e:	ee 1f       	adc	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	a2 17       	cp	r26, r18
    1854:	b3 07       	cpc	r27, r19
    1856:	e4 07       	cpc	r30, r20
    1858:	f5 07       	cpc	r31, r21
    185a:	20 f0       	brcs	.+8      	; 0x1864 <__udivmodsi4_ep>
    185c:	a2 1b       	sub	r26, r18
    185e:	b3 0b       	sbc	r27, r19
    1860:	e4 0b       	sbc	r30, r20
    1862:	f5 0b       	sbc	r31, r21

00001864 <__udivmodsi4_ep>:
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	1a 94       	dec	r1
    186e:	69 f7       	brne	.-38     	; 0x184a <__udivmodsi4_loop>
    1870:	60 95       	com	r22
    1872:	70 95       	com	r23
    1874:	80 95       	com	r24
    1876:	90 95       	com	r25
    1878:	9b 01       	movw	r18, r22
    187a:	ac 01       	movw	r20, r24
    187c:	bd 01       	movw	r22, r26
    187e:	cf 01       	movw	r24, r30
    1880:	08 95       	ret

00001882 <_exit>:
    1882:	f8 94       	cli

00001884 <__stop_program>:
    1884:	ff cf       	rjmp	.-2      	; 0x1884 <__stop_program>
