
HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  00001b90  00001c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800128  00800128  00001cec  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001347  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_3>
      10:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_8>
      24:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
      8a:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer1Tick>:
 * Description:
 * This function used as callback function for timer1 to help making the delay.
 * This function will be called each when the Compare or overflow interrupt of TIMER1 occurs.
 */
static void timer1Tick( void )
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	g_timer1Tick++;
      9a:	80 91 28 01 	lds	r24, 0x0128
      9e:	90 91 29 01 	lds	r25, 0x0129
      a2:	a0 91 2a 01 	lds	r26, 0x012A
      a6:	b0 91 2b 01 	lds	r27, 0x012B
      aa:	01 96       	adiw	r24, 0x01	; 1
      ac:	a1 1d       	adc	r26, r1
      ae:	b1 1d       	adc	r27, r1
      b0:	80 93 28 01 	sts	0x0128, r24
      b4:	90 93 29 01 	sts	0x0129, r25
      b8:	a0 93 2a 01 	sts	0x012A, r26
      bc:	b0 93 2b 01 	sts	0x012B, r27
}
      c0:	cf 91       	pop	r28
      c2:	df 91       	pop	r29
      c4:	08 95       	ret

000000c6 <delay_ms>:
 * Description:
 * Make busy waiting delay by n ms.
 * This function uses Timer 1 in compare match mode.
 */
void delay_ms( uint32 n )
{
      c6:	df 93       	push	r29
      c8:	cf 93       	push	r28
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	60 97       	sbiw	r28, 0x10	; 16
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	f8 94       	cli
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	cd bf       	out	0x3d, r28	; 61
      da:	68 87       	std	Y+8, r22	; 0x08
      dc:	79 87       	std	Y+9, r23	; 0x09
      de:	8a 87       	std	Y+10, r24	; 0x0a
      e0:	9b 87       	std	Y+11, r25	; 0x0b
	g_timer1Tick = 0;
      e2:	10 92 28 01 	sts	0x0128, r1
      e6:	10 92 29 01 	sts	0x0129, r1
      ea:	10 92 2a 01 	sts	0x012A, r1
      ee:	10 92 2b 01 	sts	0x012B, r1
	 * Configuration structure for timer.
	 * timer id, required mode of operation, initial value to be loaded before timer start,
	 * compare value that is used only in compare mode and prescaler value.
	 */
	/* T_TIMER1 = 1us, to get 1ms, Put compare value = 1000 to get 1ms. */
	TIMER_ConfigType config = {TIMER1_ID, COMPARE_MODE, 0, 1000, F_CPU_8};
      f2:	ce 01       	movw	r24, r28
      f4:	01 96       	adiw	r24, 0x01	; 1
      f6:	9d 87       	std	Y+13, r25	; 0x0d
      f8:	8c 87       	std	Y+12, r24	; 0x0c
      fa:	eb e1       	ldi	r30, 0x1B	; 27
      fc:	f1 e0       	ldi	r31, 0x01	; 1
      fe:	ff 87       	std	Y+15, r31	; 0x0f
     100:	ee 87       	std	Y+14, r30	; 0x0e
     102:	f7 e0       	ldi	r31, 0x07	; 7
     104:	f8 8b       	std	Y+16, r31	; 0x10
     106:	ee 85       	ldd	r30, Y+14	; 0x0e
     108:	ff 85       	ldd	r31, Y+15	; 0x0f
     10a:	00 80       	ld	r0, Z
     10c:	8e 85       	ldd	r24, Y+14	; 0x0e
     10e:	9f 85       	ldd	r25, Y+15	; 0x0f
     110:	01 96       	adiw	r24, 0x01	; 1
     112:	9f 87       	std	Y+15, r25	; 0x0f
     114:	8e 87       	std	Y+14, r24	; 0x0e
     116:	ec 85       	ldd	r30, Y+12	; 0x0c
     118:	fd 85       	ldd	r31, Y+13	; 0x0d
     11a:	00 82       	st	Z, r0
     11c:	8c 85       	ldd	r24, Y+12	; 0x0c
     11e:	9d 85       	ldd	r25, Y+13	; 0x0d
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	9d 87       	std	Y+13, r25	; 0x0d
     124:	8c 87       	std	Y+12, r24	; 0x0c
     126:	98 89       	ldd	r25, Y+16	; 0x10
     128:	91 50       	subi	r25, 0x01	; 1
     12a:	98 8b       	std	Y+16, r25	; 0x10
     12c:	e8 89       	ldd	r30, Y+16	; 0x10
     12e:	ee 23       	and	r30, r30
     130:	51 f7       	brne	.-44     	; 0x106 <delay_ms+0x40>
	TIMER_Init(&config);
     132:	ce 01       	movw	r24, r28
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	0e 94 70 09 	call	0x12e0	; 0x12e0 <TIMER_Init>
	TIMER_setCallBack(timer1Tick, TIMER1_ID);
     13a:	89 e4       	ldi	r24, 0x49	; 73
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <TIMER_setCallBack>
	/* Busy wait for n ms. */
	while( g_timer1Tick< n );
     144:	20 91 28 01 	lds	r18, 0x0128
     148:	30 91 29 01 	lds	r19, 0x0129
     14c:	40 91 2a 01 	lds	r20, 0x012A
     150:	50 91 2b 01 	lds	r21, 0x012B
     154:	88 85       	ldd	r24, Y+8	; 0x08
     156:	99 85       	ldd	r25, Y+9	; 0x09
     158:	aa 85       	ldd	r26, Y+10	; 0x0a
     15a:	bb 85       	ldd	r27, Y+11	; 0x0b
     15c:	28 17       	cp	r18, r24
     15e:	39 07       	cpc	r19, r25
     160:	4a 07       	cpc	r20, r26
     162:	5b 07       	cpc	r21, r27
     164:	78 f3       	brcs	.-34     	; 0x144 <delay_ms+0x7e>
	TIMER_Deinit(TIMER1_ID);
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 ab 0a 	call	0x1556	; 0x1556 <TIMER_Deinit>
}
     16c:	60 96       	adiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <main>:

/***********************************************************************
 *                       Functions Implementation                      *
 ***********************************************************************/
int main ( void )
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	2b 97       	sbiw	r28, 0x0b	; 11
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
	/* Enable global interrupt. */
	SREG |= (1<<7);
     192:	af e5       	ldi	r26, 0x5F	; 95
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	ef e5       	ldi	r30, 0x5F	; 95
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	80 68       	ori	r24, 0x80	; 128
     19e:	8c 93       	st	X, r24
	UART_ConfigType config = {9600,BITS_8,NO_PARITY,ONE_STOP_BIT};
     1a0:	ce 01       	movw	r24, r28
     1a2:	02 96       	adiw	r24, 0x02	; 2
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	8f 83       	std	Y+7, r24	; 0x07
     1a8:	e2 e2       	ldi	r30, 0x22	; 34
     1aa:	f1 e0       	ldi	r31, 0x01	; 1
     1ac:	fa 87       	std	Y+10, r31	; 0x0a
     1ae:	e9 87       	std	Y+9, r30	; 0x09
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	fb 87       	std	Y+11, r31	; 0x0b
     1b4:	e9 85       	ldd	r30, Y+9	; 0x09
     1b6:	fa 85       	ldd	r31, Y+10	; 0x0a
     1b8:	00 80       	ld	r0, Z
     1ba:	89 85       	ldd	r24, Y+9	; 0x09
     1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	9a 87       	std	Y+10, r25	; 0x0a
     1c2:	89 87       	std	Y+9, r24	; 0x09
     1c4:	ef 81       	ldd	r30, Y+7	; 0x07
     1c6:	f8 85       	ldd	r31, Y+8	; 0x08
     1c8:	00 82       	st	Z, r0
     1ca:	8f 81       	ldd	r24, Y+7	; 0x07
     1cc:	98 85       	ldd	r25, Y+8	; 0x08
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	98 87       	std	Y+8, r25	; 0x08
     1d2:	8f 83       	std	Y+7, r24	; 0x07
     1d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     1d6:	91 50       	subi	r25, 0x01	; 1
     1d8:	9b 87       	std	Y+11, r25	; 0x0b
     1da:	eb 85       	ldd	r30, Y+11	; 0x0b
     1dc:	ee 23       	and	r30, r30
     1de:	51 f7       	brne	.-44     	; 0x1b4 <main+0x36>
	UART_init(&config);
     1e0:	ce 01       	movw	r24, r28
     1e2:	02 96       	adiw	r24, 0x02	; 2
     1e4:	0e 94 31 0c 	call	0x1862	; 0x1862 <UART_init>
	LCD_init();
     1e8:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_init>
	/*************************** UNCOMMENT the next two lines to make hard reset and set new password ***************************/
	/*
	while(UART_recieveByte() != CONTROL_MCU_READY);
	UART_sendByte(CONTROL_ERASE_SAVED_PASSWORD);
	*/
	while(UART_recieveByte() != CONTROL_MCU_READY);
     1ec:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     1f0:	80 31       	cpi	r24, 0x10	; 16
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x6e>
	UART_sendByte(CONTROL_CHECK_SAVED_PASSWORD_FLAG);
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	UART_sendByte(HMI_MCU_READY);
     1fa:	8f ef       	ldi	r24, 0xFF	; 255
     1fc:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	uint8 flag = UART_recieveByte();
     200:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     204:	89 83       	std	Y+1, r24	; 0x01
	/* If there is no saved password, get one.*/
	if(flag == LOGIC_LOW)
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	88 23       	and	r24, r24
     20a:	61 f4       	brne	.+24     	; 0x224 <main+0xa6>
	{
		do
		{
			requestNewPassword();
     20c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <requestNewPassword>
		}while(	checkNewPassword() == LOGIC_LOW);
     210:	0e 94 44 02 	call	0x488	; 0x488 <checkNewPassword>
     214:	88 23       	and	r24, r24
     216:	d1 f3       	breq	.-12     	; 0x20c <main+0x8e>
		delay_ms(1000);
     218:	68 ee       	ldi	r22, 0xE8	; 232
     21a:	73 e0       	ldi	r23, 0x03	; 3
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	}

	while(1)
	{
		displayMainOptions();
     224:	0e 94 a2 02 	call	0x544	; 0x544 <displayMainOptions>
     228:	fd cf       	rjmp	.-6      	; 0x224 <main+0xa6>

0000022a <getPassword>:
/*
 * Description:
 * Requests password from user and displays '*' in LCD instead of real characters.
 */
void getPassword( uint8* pass, uint8* counter )
{
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	00 d0       	rcall	.+0      	; 0x230 <getPassword+0x6>
     230:	00 d0       	rcall	.+0      	; 0x232 <getPassword+0x8>
     232:	0f 92       	push	r0
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	9b 83       	std	Y+3, r25	; 0x03
     23a:	8a 83       	std	Y+2, r24	; 0x02
     23c:	7d 83       	std	Y+5, r23	; 0x05
     23e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 key;

	LCD_moveCursor(1, 0);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
	*counter = 0;
     248:	ec 81       	ldd	r30, Y+4	; 0x04
     24a:	fd 81       	ldd	r31, Y+5	; 0x05
     24c:	10 82       	st	Z, r1

	while(1)
	{
		key = KEYPAD_getPressedKey();
     24e:	0e 94 2c 07 	call	0xe58	; 0xe58 <KEYPAD_getPressedKey>
     252:	89 83       	std	Y+1, r24	; 0x01
		pass[*counter] = key;
     254:	ec 81       	ldd	r30, Y+4	; 0x04
     256:	fd 81       	ldd	r31, Y+5	; 0x05
     258:	80 81       	ld	r24, Z
     25a:	28 2f       	mov	r18, r24
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	9b 81       	ldd	r25, Y+3	; 0x03
     262:	fc 01       	movw	r30, r24
     264:	e2 0f       	add	r30, r18
     266:	f3 1f       	adc	r31, r19
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	80 83       	st	Z, r24
		/*If user press enter -> end of edit.*/
		if(key == 13)
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	8d 30       	cpi	r24, 0x0D	; 13
     270:	71 f4       	brne	.+28     	; 0x28e <getPassword+0x64>
		{
			delay_ms(400);
     272:	60 e9       	ldi	r22, 0x90	; 144
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		}
		LCD_displayCharacter('*');
		delay_ms(400);
		(*counter)++;
	}
}
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	cf 91       	pop	r28
     28a:	df 91       	pop	r29
     28c:	08 95       	ret
		if(key == 13)
		{
			delay_ms(400);
			break;
		}
		LCD_displayCharacter('*');
     28e:	8a e2       	ldi	r24, 0x2A	; 42
     290:	0e 94 83 08 	call	0x1106	; 0x1106 <LCD_displayCharacter>
		delay_ms(400);
     294:	60 e9       	ldi	r22, 0x90	; 144
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		(*counter)++;
     2a0:	ec 81       	ldd	r30, Y+4	; 0x04
     2a2:	fd 81       	ldd	r31, Y+5	; 0x05
     2a4:	80 81       	ld	r24, Z
     2a6:	8f 5f       	subi	r24, 0xFF	; 255
     2a8:	ec 81       	ldd	r30, Y+4	; 0x04
     2aa:	fd 81       	ldd	r31, Y+5	; 0x05
     2ac:	80 83       	st	Z, r24
     2ae:	cf cf       	rjmp	.-98     	; 0x24e <getPassword+0x24>

000002b0 <requestNewPassword>:
/*
 * Description:
 * Asks the user to enter new password.
 */
void requestNewPassword( void )
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <requestNewPassword+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <requestNewPassword+0x8>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <requestNewPassword+0xa>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	8d 83       	std	Y+5, r24	; 0x05
	LCD_clearScreen();
     2c2:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
     2c6:	1a c0       	rjmp	.+52     	; 0x2fc <requestNewPassword+0x4c>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     2c8:	1d 82       	std	Y+5, r1	; 0x05
		/* Request new password from user and then press Enter key*/
		LCD_displayString("Enter new pass.:");
     2ca:	80 e6       	ldi	r24, 0x60	; 96
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		getPassword(password, &passLength);
     2d2:	82 e3       	ldi	r24, 0x32	; 50
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	9e 01       	movw	r18, r28
     2d8:	2a 5f       	subi	r18, 0xFA	; 250
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	b9 01       	movw	r22, r18
     2de:	0e 94 15 01 	call	0x22a	; 0x22a <getPassword>
		uint8 result = checkPasswordLength( passLength );
     2e2:	8e 81       	ldd	r24, Y+6	; 0x06
     2e4:	0e 94 a7 03 	call	0x74e	; 0x74e <checkPasswordLength>
     2e8:	8c 83       	std	Y+4, r24	; 0x04
		if(result == LOGIC_LOW)
     2ea:	8c 81       	ldd	r24, Y+4	; 0x04
     2ec:	88 23       	and	r24, r24
     2ee:	31 f4       	brne	.+12     	; 0x2fc <requestNewPassword+0x4c>
		{
			errorFlag = LOGIC_HIGH;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	8d 83       	std	Y+5, r24	; 0x05
			Error error = PASSWORD_LENGTH_ERROR;
     2f4:	1b 82       	std	Y+3, r1	; 0x03
			displayError(error);
     2f6:	8b 81       	ldd	r24, Y+3	; 0x03
     2f8:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>
{
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
	LCD_clearScreen();
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     2fc:	8d 81       	ldd	r24, Y+5	; 0x05
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	19 f3       	breq	.-58     	; 0x2c8 <requestNewPassword+0x18>
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}

	LCD_clearScreen();
     302:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>

	errorFlag = LOGIC_HIGH;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	8d 83       	std	Y+5, r24	; 0x05
     30a:	1a c0       	rjmp	.+52     	; 0x340 <requestNewPassword+0x90>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     30c:	1d 82       	std	Y+5, r1	; 0x05
		LCD_displayString("Re-enter pass.:");
     30e:	81 e7       	ldi	r24, 0x71	; 113
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		getPassword(reEnteredPassword, &passLength);
     316:	87 e3       	ldi	r24, 0x37	; 55
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	9e 01       	movw	r18, r28
     31c:	2a 5f       	subi	r18, 0xFA	; 250
     31e:	3f 4f       	sbci	r19, 0xFF	; 255
     320:	b9 01       	movw	r22, r18
     322:	0e 94 15 01 	call	0x22a	; 0x22a <getPassword>

		uint8 result = checkPasswordLength( passLength );
     326:	8e 81       	ldd	r24, Y+6	; 0x06
     328:	0e 94 a7 03 	call	0x74e	; 0x74e <checkPasswordLength>
     32c:	8a 83       	std	Y+2, r24	; 0x02

		if(result == LOGIC_LOW)
     32e:	8a 81       	ldd	r24, Y+2	; 0x02
     330:	88 23       	and	r24, r24
     332:	31 f4       	brne	.+12     	; 0x340 <requestNewPassword+0x90>
		{
			errorFlag = LOGIC_HIGH;
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	8d 83       	std	Y+5, r24	; 0x05
			Error error = PASSWORD_LENGTH_ERROR;
     338:	19 82       	std	Y+1, r1	; 0x01
			displayError(error);
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>

	LCD_clearScreen();

	errorFlag = LOGIC_HIGH;
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	19 f3       	breq	.-58     	; 0x30c <requestNewPassword+0x5c>
			errorFlag = LOGIC_HIGH;
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}
}
     346:	26 96       	adiw	r28, 0x06	; 6
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
     352:	cf 91       	pop	r28
     354:	df 91       	pop	r29
     356:	08 95       	ret

00000358 <displayError>:
/*
 * Description:
 * Displays different types of errors in the system.
 */
void displayError( Error error )
{
     358:	df 93       	push	r29
     35a:	cf 93       	push	r28
     35c:	00 d0       	rcall	.+0      	; 0x35e <displayError+0x6>
     35e:	0f 92       	push	r0
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	89 83       	std	Y+1, r24	; 0x01
	switch(error)
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	28 2f       	mov	r18, r24
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	3b 83       	std	Y+3, r19	; 0x03
     36e:	2a 83       	std	Y+2, r18	; 0x02
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	9b 81       	ldd	r25, Y+3	; 0x03
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	91 05       	cpc	r25, r1
     378:	89 f1       	breq	.+98     	; 0x3dc <displayError+0x84>
     37a:	2a 81       	ldd	r18, Y+2	; 0x02
     37c:	3b 81       	ldd	r19, Y+3	; 0x03
     37e:	22 30       	cpi	r18, 0x02	; 2
     380:	31 05       	cpc	r19, r1
     382:	2c f4       	brge	.+10     	; 0x38e <displayError+0x36>
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	9b 81       	ldd	r25, Y+3	; 0x03
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	69 f0       	breq	.+26     	; 0x3a6 <displayError+0x4e>
     38c:	77 c0       	rjmp	.+238    	; 0x47c <__stack+0x1d>
     38e:	2a 81       	ldd	r18, Y+2	; 0x02
     390:	3b 81       	ldd	r19, Y+3	; 0x03
     392:	22 30       	cpi	r18, 0x02	; 2
     394:	31 05       	cpc	r19, r1
     396:	e9 f1       	breq	.+122    	; 0x412 <displayError+0xba>
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	9b 81       	ldd	r25, Y+3	; 0x03
     39c:	83 30       	cpi	r24, 0x03	; 3
     39e:	91 05       	cpc	r25, r1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <displayError+0x4c>
     3a2:	52 c0       	rjmp	.+164    	; 0x448 <displayError+0xf0>
     3a4:	6b c0       	rjmp	.+214    	; 0x47c <__stack+0x1d>
	{
	case PASSWORD_LENGTH_ERROR:
		LCD_clearScreen();
     3a6:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Password must be");
     3b2:	81 e8       	ldi	r24, 0x81	; 129
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		LCD_moveCursor(1, 0);
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("5 characters");
     3c2:	82 e9       	ldi	r24, 0x92	; 146
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		delay_ms(1000);
     3ca:	68 ee       	ldi	r22, 0xE8	; 232
     3cc:	73 e0       	ldi	r23, 0x03	; 3
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     3d6:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
     3da:	50 c0       	rjmp	.+160    	; 0x47c <__stack+0x1d>
		break;
	case PASSWORD_REENTERING_ERROR:
		LCD_clearScreen();
     3dc:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		LCD_moveCursor(0, 6);
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	66 e0       	ldi	r22, 0x06	; 6
     3e4:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Error");
     3e8:	8f e9       	ldi	r24, 0x9F	; 159
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		LCD_moveCursor(1, 3);
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	63 e0       	ldi	r22, 0x03	; 3
     3f4:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Try Again");
     3f8:	85 ea       	ldi	r24, 0xA5	; 165
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		delay_ms(1000);
     400:	68 ee       	ldi	r22, 0xE8	; 232
     402:	73 e0       	ldi	r23, 0x03	; 3
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     40c:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
     410:	35 c0       	rjmp	.+106    	; 0x47c <__stack+0x1d>
		break;
	case PASSWORD_INCORRECT:
		LCD_clearScreen();
     412:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		LCD_moveCursor(0, 6);
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	66 e0       	ldi	r22, 0x06	; 6
     41a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Error");
     41e:	8f e9       	ldi	r24, 0x9F	; 159
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		LCD_moveCursor(1, 0);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Incorrect Pass.");
     42e:	8f ea       	ldi	r24, 0xAF	; 175
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		delay_ms(1000);
     436:	68 ee       	ldi	r22, 0xE8	; 232
     438:	73 e0       	ldi	r23, 0x03	; 3
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     442:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
     446:	1a c0       	rjmp	.+52     	; 0x47c <__stack+0x1d>
		break;
	case PASSWORD_INCORRECT_THREE_TIMES:
		LCD_clearScreen();
     448:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		LCD_moveCursor(0, 4);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	64 e0       	ldi	r22, 0x04	; 4
     450:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Warning");
     454:	8f eb       	ldi	r24, 0xBF	; 191
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		LCD_moveCursor(1, 5);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	65 e0       	ldi	r22, 0x05	; 5
     460:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Thief");
     464:	87 ec       	ldi	r24, 0xC7	; 199
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		delay_ms(1000);
     46c:	68 ee       	ldi	r22, 0xE8	; 232
     46e:	73 e0       	ldi	r23, 0x03	; 3
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     478:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		break;
	}
}
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	08 95       	ret

00000488 <checkNewPassword>:
/*
 * Description:
 * Sends commands to control MCU to compare the entered two passwords.
 */
uint8 checkNewPassword( void )
{
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	00 d0       	rcall	.+0      	; 0x48e <checkNewPassword+0x6>
     48e:	0f 92       	push	r0
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
	/* Sending checking password command to control MCU after getting acknoledgement.*/
	while(UART_recieveByte() != CONTROL_MCU_READY);
     494:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     498:	80 31       	cpi	r24, 0x10	; 16
     49a:	e1 f7       	brne	.-8      	; 0x494 <checkNewPassword+0xc>
	UART_sendByte(CONTROL_COMPARE_TWO_PASSWORDS);
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
     4a2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     4a6:	80 31       	cpi	r24, 0x10	; 16
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <checkNewPassword+0x1a>
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     4aa:	1a 82       	std	Y+2, r1	; 0x02
     4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <checkNewPassword+0x3e>
	{
		UART_sendByte(password[i]);
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	fc 01       	movw	r30, r24
     4b6:	ee 5c       	subi	r30, 0xCE	; 206
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	80 81       	ld	r24, Z
     4bc:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	while(UART_recieveByte() != CONTROL_MCU_READY);
	UART_sendByte(CONTROL_COMPARE_TWO_PASSWORDS);

	while(UART_recieveByte() != CONTROL_MCU_READY);
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	8a 83       	std	Y+2, r24	; 0x02
     4c6:	8a 81       	ldd	r24, Y+2	; 0x02
     4c8:	85 30       	cpi	r24, 0x05	; 5
     4ca:	88 f3       	brcs	.-30     	; 0x4ae <checkNewPassword+0x26>
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     4cc:	19 82       	std	Y+1, r1	; 0x01
     4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <checkNewPassword+0x60>
	{
		UART_sendByte(reEnteredPassword[i]);
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	fc 01       	movw	r30, r24
     4d8:	e9 5c       	subi	r30, 0xC9	; 201
     4da:	fe 4f       	sbci	r31, 0xFE	; 254
     4dc:	80 81       	ld	r24, Z
     4de:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	85 30       	cpi	r24, 0x05	; 5
     4ec:	88 f3       	brcs	.-30     	; 0x4d0 <checkNewPassword+0x48>
	{
		UART_sendByte(reEnteredPassword[i]);
	}

	UART_sendByte(HMI_MCU_READY);
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	uint8 compareResult = UART_recieveByte();
     4f4:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     4f8:	8b 83       	std	Y+3, r24	; 0x03
	if(compareResult)
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	88 23       	and	r24, r24
     4fe:	59 f0       	breq	.+22     	; 0x516 <checkNewPassword+0x8e>
	{
		LCD_clearScreen();
     500:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		LCD_moveCursor(0, 6);
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	66 e0       	ldi	r22, 0x06	; 6
     508:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Match");
     50c:	8d ec       	ldi	r24, 0xCD	; 205
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
     514:	0a c0       	rjmp	.+20     	; 0x52a <checkNewPassword+0xa2>
	}
	else
	{
		LCD_clearScreen();
     516:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		LCD_moveCursor(0, 4);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
		LCD_displayString("Mis Match");
     522:	83 ed       	ldi	r24, 0xD3	; 211
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
	}
	delay_ms(1000);
     52a:	68 ee       	ldi	r22, 0xE8	; 232
     52c:	73 e0       	ldi	r23, 0x03	; 3
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	return compareResult;
     536:	8b 81       	ldd	r24, Y+3	; 0x03
}
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	cf 91       	pop	r28
     540:	df 91       	pop	r29
     542:	08 95       	ret

00000544 <displayMainOptions>:
/*
 * Description:
 * Displays main screen on LCD.
 */
void displayMainOptions( void )
{
     544:	df 93       	push	r29
     546:	cf 93       	push	r28
     548:	00 d0       	rcall	.+0      	; 0x54a <displayMainOptions+0x6>
     54a:	00 d0       	rcall	.+0      	; 0x54c <displayMainOptions+0x8>
     54c:	00 d0       	rcall	.+0      	; 0x54e <displayMainOptions+0xa>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     552:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
	LCD_displayString("+ : Open Door.");
     556:	8d ed       	ldi	r24, 0xDD	; 221
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
	LCD_moveCursor(1, 0);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
	LCD_displayString("- : Change Pass.");
     566:	8c ee       	ldi	r24, 0xEC	; 236
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
	uint8 key = KEYPAD_getPressedKey();
     56e:	0e 94 2c 07 	call	0xe58	; 0xe58 <KEYPAD_getPressedKey>
     572:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(400);
     574:	60 e9       	ldi	r22, 0x90	; 144
     576:	71 e0       	ldi	r23, 0x01	; 1
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	uint8 trials = 0;
     580:	1b 82       	std	Y+3, r1	; 0x03
	switch(key)
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	28 2f       	mov	r18, r24
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	3e 83       	std	Y+6, r19	; 0x06
     58a:	2d 83       	std	Y+5, r18	; 0x05
     58c:	8d 81       	ldd	r24, Y+5	; 0x05
     58e:	9e 81       	ldd	r25, Y+6	; 0x06
     590:	8b 32       	cpi	r24, 0x2B	; 43
     592:	91 05       	cpc	r25, r1
     594:	39 f0       	breq	.+14     	; 0x5a4 <displayMainOptions+0x60>
     596:	2d 81       	ldd	r18, Y+5	; 0x05
     598:	3e 81       	ldd	r19, Y+6	; 0x06
     59a:	2d 32       	cpi	r18, 0x2D	; 45
     59c:	31 05       	cpc	r19, r1
     59e:	09 f4       	brne	.+2      	; 0x5a2 <displayMainOptions+0x5e>
     5a0:	67 c0       	rjmp	.+206    	; 0x670 <displayMainOptions+0x12c>
     5a2:	9d c0       	rjmp	.+314    	; 0x6de <displayMainOptions+0x19a>
	{
	case '+':
		trials = 0;
     5a4:	1b 82       	std	Y+3, r1	; 0x03
		requestPassword();
     5a6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <requestPassword>
     5aa:	21 c0       	rjmp	.+66     	; 0x5ee <displayMainOptions+0xaa>
		Error error;
		while(!checkTryingPassword())
		{
			error = PASSWORD_INCORRECT;
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	8a 83       	std	Y+2, r24	; 0x02
			displayError(error);
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>
			requestPassword();
     5b6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <requestPassword>
			trials++;
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	8f 5f       	subi	r24, 0xFF	; 255
     5be:	8b 83       	std	Y+3, r24	; 0x03
			if(trials >= 3)
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	83 30       	cpi	r24, 0x03	; 3
     5c4:	a0 f0       	brcs	.+40     	; 0x5ee <displayMainOptions+0xaa>
			{
				/* This is a thief. */
				while(UART_recieveByte() != CONTROL_MCU_READY);
     5c6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     5ca:	80 31       	cpi	r24, 0x10	; 16
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <displayMainOptions+0x82>
				UART_sendByte(CONTROL_BUZZER_ON);
     5ce:	89 e0       	ldi	r24, 0x09	; 9
     5d0:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
				error = PASSWORD_INCORRECT_THREE_TIMES;
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	8a 83       	std	Y+2, r24	; 0x02
				displayError(error);
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>
				while(UART_recieveByte() != CONTROL_MCU_READY);
     5de:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     5e2:	80 31       	cpi	r24, 0x10	; 16
     5e4:	e1 f7       	brne	.-8      	; 0x5de <displayMainOptions+0x9a>
				UART_sendByte(CONTROL_BUZZER_OFF);
     5e6:	8a e0       	ldi	r24, 0x0A	; 10
     5e8:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
				trials = 0;
     5ec:	1b 82       	std	Y+3, r1	; 0x03
	{
	case '+':
		trials = 0;
		requestPassword();
		Error error;
		while(!checkTryingPassword())
     5ee:	0e 94 c4 03 	call	0x788	; 0x788 <checkTryingPassword>
     5f2:	88 23       	and	r24, r24
     5f4:	d9 f2       	breq	.-74     	; 0x5ac <displayMainOptions+0x68>
				while(UART_recieveByte() != CONTROL_MCU_READY);
				UART_sendByte(CONTROL_BUZZER_OFF);
				trials = 0;
			}
		}
		LCD_clearScreen();
     5f6:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		LCD_displayString("Openning");
     5fa:	8d ef       	ldi	r24, 0xFD	; 253
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     602:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     606:	80 31       	cpi	r24, 0x10	; 16
     608:	e1 f7       	brne	.-8      	; 0x602 <displayMainOptions+0xbe>
		UART_sendByte(CONTROL_MOTOR_ROTATE_CW);
     60a:	86 e0       	ldi	r24, 0x06	; 6
     60c:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
		delay_ms(1000);
     610:	68 ee       	ldi	r22, 0xE8	; 232
     612:	73 e0       	ldi	r23, 0x03	; 3
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     61c:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     620:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     624:	80 31       	cpi	r24, 0x10	; 16
     626:	e1 f7       	brne	.-8      	; 0x620 <displayMainOptions+0xdc>
		UART_sendByte(CONTROL_MOTOR_STOP);
     628:	87 e0       	ldi	r24, 0x07	; 7
     62a:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
		delay_ms(500);
     62e:	64 ef       	ldi	r22, 0xF4	; 244
     630:	71 e0       	ldi	r23, 0x01	; 1
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_displayString("Closing");
     63a:	86 e0       	ldi	r24, 0x06	; 6
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		UART_sendByte(CONTROL_MOTOR_ROTATE_CCW);
     642:	88 e0       	ldi	r24, 0x08	; 8
     644:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     648:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     64c:	80 31       	cpi	r24, 0x10	; 16
     64e:	e1 f7       	brne	.-8      	; 0x648 <displayMainOptions+0x104>
		delay_ms(1000);
     650:	68 ee       	ldi	r22, 0xE8	; 232
     652:	73 e0       	ldi	r23, 0x03	; 3
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     65c:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     660:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     664:	80 31       	cpi	r24, 0x10	; 16
     666:	e1 f7       	brne	.-8      	; 0x660 <displayMainOptions+0x11c>
		UART_sendByte(CONTROL_MOTOR_STOP);
     668:	87 e0       	ldi	r24, 0x07	; 7
     66a:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
     66e:	37 c0       	rjmp	.+110    	; 0x6de <displayMainOptions+0x19a>
		break;
	case '-':
		trials = 0;
     670:	1b 82       	std	Y+3, r1	; 0x03
		requestPassword();
     672:	0e 94 78 03 	call	0x6f0	; 0x6f0 <requestPassword>
     676:	21 c0       	rjmp	.+66     	; 0x6ba <displayMainOptions+0x176>
		while(!checkTryingPassword())
		{
			error = PASSWORD_INCORRECT;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	8a 83       	std	Y+2, r24	; 0x02
			displayError(error);
     67c:	8a 81       	ldd	r24, Y+2	; 0x02
     67e:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>
			requestPassword();
     682:	0e 94 78 03 	call	0x6f0	; 0x6f0 <requestPassword>
			trials++;
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	8f 5f       	subi	r24, 0xFF	; 255
     68a:	8b 83       	std	Y+3, r24	; 0x03
			if(trials >= 3)
     68c:	8b 81       	ldd	r24, Y+3	; 0x03
     68e:	83 30       	cpi	r24, 0x03	; 3
     690:	a0 f0       	brcs	.+40     	; 0x6ba <displayMainOptions+0x176>
			{
				/* This is a thief. */
				while(UART_recieveByte() != CONTROL_MCU_READY);
     692:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     696:	80 31       	cpi	r24, 0x10	; 16
     698:	e1 f7       	brne	.-8      	; 0x692 <displayMainOptions+0x14e>
				UART_sendByte(CONTROL_BUZZER_ON);
     69a:	89 e0       	ldi	r24, 0x09	; 9
     69c:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
				error = PASSWORD_INCORRECT_THREE_TIMES;
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	8a 83       	std	Y+2, r24	; 0x02
				displayError(error);
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>
				while(UART_recieveByte() != CONTROL_MCU_READY);
     6aa:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     6ae:	80 31       	cpi	r24, 0x10	; 16
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <displayMainOptions+0x166>
				UART_sendByte(CONTROL_BUZZER_OFF);
     6b2:	8a e0       	ldi	r24, 0x0A	; 10
     6b4:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
				trials = 0;
     6b8:	1b 82       	std	Y+3, r1	; 0x03
		UART_sendByte(CONTROL_MOTOR_STOP);
		break;
	case '-':
		trials = 0;
		requestPassword();
		while(!checkTryingPassword())
     6ba:	0e 94 c4 03 	call	0x788	; 0x788 <checkTryingPassword>
     6be:	88 23       	and	r24, r24
     6c0:	d9 f2       	breq	.-74     	; 0x678 <displayMainOptions+0x134>
				while(UART_recieveByte() != CONTROL_MCU_READY);
				UART_sendByte(CONTROL_BUZZER_OFF);
				trials = 0;
			}
		}
		requestNewPassword();
     6c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <requestNewPassword>
     6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <displayMainOptions+0x192>
		while(!checkNewPassword())
		{
			Error error = PASSWORD_REENTERING_ERROR;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	89 83       	std	Y+1, r24	; 0x01
			displayError(error);
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>
			requestNewPassword();
     6d2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <requestNewPassword>
				UART_sendByte(CONTROL_BUZZER_OFF);
				trials = 0;
			}
		}
		requestNewPassword();
		while(!checkNewPassword())
     6d6:	0e 94 44 02 	call	0x488	; 0x488 <checkNewPassword>
     6da:	88 23       	and	r24, r24
     6dc:	a9 f3       	breq	.-22     	; 0x6c8 <displayMainOptions+0x184>
		}
		break;
	default:
		break;
	}
}
     6de:	26 96       	adiw	r28, 0x06	; 6
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	cf 91       	pop	r28
     6ec:	df 91       	pop	r29
     6ee:	08 95       	ret

000006f0 <requestPassword>:
/*
 * Description:
 * Displays requesting password screen on LCD.
 */
void requestPassword( void )
{
     6f0:	df 93       	push	r29
     6f2:	cf 93       	push	r28
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <requestPassword+0x6>
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <requestPassword+0x8>
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8b 83       	std	Y+3, r24	; 0x03
	LCD_clearScreen();
     700:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_clearScreen>
     704:	1a c0       	rjmp	.+52     	; 0x73a <requestPassword+0x4a>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     706:	1b 82       	std	Y+3, r1	; 0x03
		/* Request password from user and then press Enter key*/
		LCD_displayString("Enter pass.:");
     708:	8e e0       	ldi	r24, 0x0E	; 14
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
		getPassword(tryingPassword, &passLength);
     710:	8c e3       	ldi	r24, 0x3C	; 60
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	9e 01       	movw	r18, r28
     716:	2c 5f       	subi	r18, 0xFC	; 252
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	b9 01       	movw	r22, r18
     71c:	0e 94 15 01 	call	0x22a	; 0x22a <getPassword>
		uint8 result = checkPasswordLength( passLength );
     720:	8c 81       	ldd	r24, Y+4	; 0x04
     722:	0e 94 a7 03 	call	0x74e	; 0x74e <checkPasswordLength>
     726:	8a 83       	std	Y+2, r24	; 0x02

		if(result == LOGIC_LOW)
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	88 23       	and	r24, r24
     72c:	31 f4       	brne	.+12     	; 0x73a <requestPassword+0x4a>
		{
			errorFlag = LOGIC_HIGH;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	8b 83       	std	Y+3, r24	; 0x03
			Error error = PASSWORD_LENGTH_ERROR;
     732:	19 82       	std	Y+1, r1	; 0x01
			displayError(error);
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	0e 94 ac 01 	call	0x358	; 0x358 <displayError>
{
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
	LCD_clearScreen();
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	19 f3       	breq	.-58     	; 0x706 <requestPassword+0x16>
			errorFlag = LOGIC_HIGH;
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}
}
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	08 95       	ret

0000074e <checkPasswordLength>:
 * Description:
 * Checks length of password by sending "CONTROL_CHECK_PASSWORD_LENGTH" to controlling MCU and then
 * sending the password.
 */
uint8 checkPasswordLength(uint8 length)
{
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	0f 92       	push	r0
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	89 83       	std	Y+1, r24	; 0x01
	/* Display error if password is not 5 characters. */
	while(UART_recieveByte() != CONTROL_MCU_READY);
     75a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     75e:	80 31       	cpi	r24, 0x10	; 16
     760:	e1 f7       	brne	.-8      	; 0x75a <checkPasswordLength+0xc>
	UART_sendByte(CONTROL_CHECK_PASSWORD_LENGTH);
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
     768:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     76c:	80 31       	cpi	r24, 0x10	; 16
     76e:	e1 f7       	brne	.-8      	; 0x768 <checkPasswordLength+0x1a>
	UART_sendByte(length);
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>

	UART_sendByte(HMI_MCU_READY);
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	return UART_recieveByte();
     77c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
}
     780:	0f 90       	pop	r0
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	08 95       	ret

00000788 <checkTryingPassword>:
 * Description:
 * Checks entered password with saved password on EEPROM by sending "CHECK_PASSWORD_WITH_SAVED_PASSWORD" to control MCU and then
 * sending the password.
 */
uint8 checkTryingPassword( void )
{
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	0f 92       	push	r0
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != CONTROL_MCU_READY);
     792:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     796:	80 31       	cpi	r24, 0x10	; 16
     798:	e1 f7       	brne	.-8      	; 0x792 <checkTryingPassword+0xa>
	UART_sendByte(CHECK_PASSWORD_WITH_SAVED_PASSWORD);
     79a:	85 e0       	ldi	r24, 0x05	; 5
     79c:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
     7a0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
     7a4:	80 31       	cpi	r24, 0x10	; 16
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <checkTryingPassword+0x18>
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     7a8:	19 82       	std	Y+1, r1	; 0x01
     7aa:	0c c0       	rjmp	.+24     	; 0x7c4 <checkTryingPassword+0x3c>
	{
		UART_sendByte(tryingPassword[i]);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	e4 5c       	subi	r30, 0xC4	; 196
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	80 81       	ld	r24, Z
     7ba:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	while(UART_recieveByte() != CONTROL_MCU_READY);
	UART_sendByte(CHECK_PASSWORD_WITH_SAVED_PASSWORD);

	while(UART_recieveByte() != CONTROL_MCU_READY);
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	85 30       	cpi	r24, 0x05	; 5
     7c8:	88 f3       	brcs	.-30     	; 0x7ac <checkTryingPassword+0x24>
	{
		UART_sendByte(tryingPassword[i]);
	}

	UART_sendByte(HMI_MCU_READY);
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
	return UART_recieveByte();
     7d0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
}
     7d4:	0f 90       	pop	r0
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <GPIO_setupPinDirection+0x6>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <GPIO_setupPinDirection+0x8>
     7e4:	0f 92       	push	r0
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	6a 83       	std	Y+2, r22	; 0x02
     7ee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	88 30       	cpi	r24, 0x08	; 8
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <GPIO_setupPinDirection+0x1c>
     7f6:	d5 c0       	rjmp	.+426    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	08 f0       	brcs	.+2      	; 0x800 <GPIO_setupPinDirection+0x24>
     7fe:	d1 c0       	rjmp	.+418    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	28 2f       	mov	r18, r24
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	3d 83       	std	Y+5, r19	; 0x05
     808:	2c 83       	std	Y+4, r18	; 0x04
     80a:	8c 81       	ldd	r24, Y+4	; 0x04
     80c:	9d 81       	ldd	r25, Y+5	; 0x05
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	91 05       	cpc	r25, r1
     812:	09 f4       	brne	.+2      	; 0x816 <GPIO_setupPinDirection+0x3a>
     814:	43 c0       	rjmp	.+134    	; 0x89c <GPIO_setupPinDirection+0xc0>
     816:	2c 81       	ldd	r18, Y+4	; 0x04
     818:	3d 81       	ldd	r19, Y+5	; 0x05
     81a:	22 30       	cpi	r18, 0x02	; 2
     81c:	31 05       	cpc	r19, r1
     81e:	2c f4       	brge	.+10     	; 0x82a <GPIO_setupPinDirection+0x4e>
     820:	8c 81       	ldd	r24, Y+4	; 0x04
     822:	9d 81       	ldd	r25, Y+5	; 0x05
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	71 f0       	breq	.+28     	; 0x844 <GPIO_setupPinDirection+0x68>
     828:	bc c0       	rjmp	.+376    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
     82a:	2c 81       	ldd	r18, Y+4	; 0x04
     82c:	3d 81       	ldd	r19, Y+5	; 0x05
     82e:	22 30       	cpi	r18, 0x02	; 2
     830:	31 05       	cpc	r19, r1
     832:	09 f4       	brne	.+2      	; 0x836 <GPIO_setupPinDirection+0x5a>
     834:	5f c0       	rjmp	.+190    	; 0x8f4 <GPIO_setupPinDirection+0x118>
     836:	8c 81       	ldd	r24, Y+4	; 0x04
     838:	9d 81       	ldd	r25, Y+5	; 0x05
     83a:	83 30       	cpi	r24, 0x03	; 3
     83c:	91 05       	cpc	r25, r1
     83e:	09 f4       	brne	.+2      	; 0x842 <GPIO_setupPinDirection+0x66>
     840:	85 c0       	rjmp	.+266    	; 0x94c <GPIO_setupPinDirection+0x170>
     842:	af c0       	rjmp	.+350    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	a1 f4       	brne	.+40     	; 0x872 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     84a:	aa e3       	ldi	r26, 0x3A	; 58
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	ea e3       	ldi	r30, 0x3A	; 58
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	48 2f       	mov	r20, r24
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	28 2f       	mov	r18, r24
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	02 2e       	mov	r0, r18
     862:	02 c0       	rjmp	.+4      	; 0x868 <GPIO_setupPinDirection+0x8c>
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	0a 94       	dec	r0
     86a:	e2 f7       	brpl	.-8      	; 0x864 <GPIO_setupPinDirection+0x88>
     86c:	84 2b       	or	r24, r20
     86e:	8c 93       	st	X, r24
     870:	98 c0       	rjmp	.+304    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     872:	aa e3       	ldi	r26, 0x3A	; 58
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	ea e3       	ldi	r30, 0x3A	; 58
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	48 2f       	mov	r20, r24
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	28 2f       	mov	r18, r24
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	02 2e       	mov	r0, r18
     88a:	02 c0       	rjmp	.+4      	; 0x890 <GPIO_setupPinDirection+0xb4>
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	0a 94       	dec	r0
     892:	e2 f7       	brpl	.-8      	; 0x88c <GPIO_setupPinDirection+0xb0>
     894:	80 95       	com	r24
     896:	84 23       	and	r24, r20
     898:	8c 93       	st	X, r24
     89a:	83 c0       	rjmp	.+262    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	a1 f4       	brne	.+40     	; 0x8ca <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     8a2:	a7 e3       	ldi	r26, 0x37	; 55
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	e7 e3       	ldi	r30, 0x37	; 55
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	48 2f       	mov	r20, r24
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	28 2f       	mov	r18, r24
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	02 2e       	mov	r0, r18
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <GPIO_setupPinDirection+0xe4>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	0a 94       	dec	r0
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <GPIO_setupPinDirection+0xe0>
     8c4:	84 2b       	or	r24, r20
     8c6:	8c 93       	st	X, r24
     8c8:	6c c0       	rjmp	.+216    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     8ca:	a7 e3       	ldi	r26, 0x37	; 55
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	e7 e3       	ldi	r30, 0x37	; 55
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	48 2f       	mov	r20, r24
     8d6:	8a 81       	ldd	r24, Y+2	; 0x02
     8d8:	28 2f       	mov	r18, r24
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 2e       	mov	r0, r18
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <GPIO_setupPinDirection+0x10c>
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	0a 94       	dec	r0
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <GPIO_setupPinDirection+0x108>
     8ec:	80 95       	com	r24
     8ee:	84 23       	and	r24, r20
     8f0:	8c 93       	st	X, r24
     8f2:	57 c0       	rjmp	.+174    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	a1 f4       	brne	.+40     	; 0x922 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     8fa:	a4 e3       	ldi	r26, 0x34	; 52
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e4 e3       	ldi	r30, 0x34	; 52
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	48 2f       	mov	r20, r24
     906:	8a 81       	ldd	r24, Y+2	; 0x02
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	02 2e       	mov	r0, r18
     912:	02 c0       	rjmp	.+4      	; 0x918 <GPIO_setupPinDirection+0x13c>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	0a 94       	dec	r0
     91a:	e2 f7       	brpl	.-8      	; 0x914 <GPIO_setupPinDirection+0x138>
     91c:	84 2b       	or	r24, r20
     91e:	8c 93       	st	X, r24
     920:	40 c0       	rjmp	.+128    	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     922:	a4 e3       	ldi	r26, 0x34	; 52
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e4 e3       	ldi	r30, 0x34	; 52
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	48 2f       	mov	r20, r24
     92e:	8a 81       	ldd	r24, Y+2	; 0x02
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 2e       	mov	r0, r18
     93a:	02 c0       	rjmp	.+4      	; 0x940 <GPIO_setupPinDirection+0x164>
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	0a 94       	dec	r0
     942:	e2 f7       	brpl	.-8      	; 0x93c <GPIO_setupPinDirection+0x160>
     944:	80 95       	com	r24
     946:	84 23       	and	r24, r20
     948:	8c 93       	st	X, r24
     94a:	2b c0       	rjmp	.+86     	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	a1 f4       	brne	.+40     	; 0x97a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     952:	a1 e3       	ldi	r26, 0x31	; 49
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	e1 e3       	ldi	r30, 0x31	; 49
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	48 2f       	mov	r20, r24
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	02 2e       	mov	r0, r18
     96a:	02 c0       	rjmp	.+4      	; 0x970 <GPIO_setupPinDirection+0x194>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	0a 94       	dec	r0
     972:	e2 f7       	brpl	.-8      	; 0x96c <GPIO_setupPinDirection+0x190>
     974:	84 2b       	or	r24, r20
     976:	8c 93       	st	X, r24
     978:	14 c0       	rjmp	.+40     	; 0x9a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     97a:	a1 e3       	ldi	r26, 0x31	; 49
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	e1 e3       	ldi	r30, 0x31	; 49
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	48 2f       	mov	r20, r24
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	28 2f       	mov	r18, r24
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	02 2e       	mov	r0, r18
     992:	02 c0       	rjmp	.+4      	; 0x998 <GPIO_setupPinDirection+0x1bc>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	0a 94       	dec	r0
     99a:	e2 f7       	brpl	.-8      	; 0x994 <GPIO_setupPinDirection+0x1b8>
     99c:	80 95       	com	r24
     99e:	84 23       	and	r24, r20
     9a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	cf 91       	pop	r28
     9ae:	df 91       	pop	r29
     9b0:	08 95       	ret

000009b2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <GPIO_writePin+0x6>
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <GPIO_writePin+0x8>
     9ba:	0f 92       	push	r0
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	6a 83       	std	Y+2, r22	; 0x02
     9c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	88 30       	cpi	r24, 0x08	; 8
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <GPIO_writePin+0x1c>
     9cc:	d5 c0       	rjmp	.+426    	; 0xb78 <GPIO_writePin+0x1c6>
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <GPIO_writePin+0x24>
     9d4:	d1 c0       	rjmp	.+418    	; 0xb78 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	28 2f       	mov	r18, r24
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	3d 83       	std	Y+5, r19	; 0x05
     9de:	2c 83       	std	Y+4, r18	; 0x04
     9e0:	8c 81       	ldd	r24, Y+4	; 0x04
     9e2:	9d 81       	ldd	r25, Y+5	; 0x05
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	91 05       	cpc	r25, r1
     9e8:	09 f4       	brne	.+2      	; 0x9ec <GPIO_writePin+0x3a>
     9ea:	43 c0       	rjmp	.+134    	; 0xa72 <GPIO_writePin+0xc0>
     9ec:	2c 81       	ldd	r18, Y+4	; 0x04
     9ee:	3d 81       	ldd	r19, Y+5	; 0x05
     9f0:	22 30       	cpi	r18, 0x02	; 2
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f4       	brge	.+10     	; 0xa00 <GPIO_writePin+0x4e>
     9f6:	8c 81       	ldd	r24, Y+4	; 0x04
     9f8:	9d 81       	ldd	r25, Y+5	; 0x05
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	71 f0       	breq	.+28     	; 0xa1a <GPIO_writePin+0x68>
     9fe:	bc c0       	rjmp	.+376    	; 0xb78 <GPIO_writePin+0x1c6>
     a00:	2c 81       	ldd	r18, Y+4	; 0x04
     a02:	3d 81       	ldd	r19, Y+5	; 0x05
     a04:	22 30       	cpi	r18, 0x02	; 2
     a06:	31 05       	cpc	r19, r1
     a08:	09 f4       	brne	.+2      	; 0xa0c <GPIO_writePin+0x5a>
     a0a:	5f c0       	rjmp	.+190    	; 0xaca <GPIO_writePin+0x118>
     a0c:	8c 81       	ldd	r24, Y+4	; 0x04
     a0e:	9d 81       	ldd	r25, Y+5	; 0x05
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	91 05       	cpc	r25, r1
     a14:	09 f4       	brne	.+2      	; 0xa18 <GPIO_writePin+0x66>
     a16:	85 c0       	rjmp	.+266    	; 0xb22 <GPIO_writePin+0x170>
     a18:	af c0       	rjmp	.+350    	; 0xb78 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	a1 f4       	brne	.+40     	; 0xa48 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     a20:	ab e3       	ldi	r26, 0x3B	; 59
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	eb e3       	ldi	r30, 0x3B	; 59
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	48 2f       	mov	r20, r24
     a2c:	8a 81       	ldd	r24, Y+2	; 0x02
     a2e:	28 2f       	mov	r18, r24
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	02 2e       	mov	r0, r18
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <GPIO_writePin+0x8c>
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	0a 94       	dec	r0
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <GPIO_writePin+0x88>
     a42:	84 2b       	or	r24, r20
     a44:	8c 93       	st	X, r24
     a46:	98 c0       	rjmp	.+304    	; 0xb78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     a48:	ab e3       	ldi	r26, 0x3B	; 59
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	eb e3       	ldi	r30, 0x3B	; 59
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	48 2f       	mov	r20, r24
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	02 2e       	mov	r0, r18
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <GPIO_writePin+0xb4>
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	0a 94       	dec	r0
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <GPIO_writePin+0xb0>
     a6a:	80 95       	com	r24
     a6c:	84 23       	and	r24, r20
     a6e:	8c 93       	st	X, r24
     a70:	83 c0       	rjmp	.+262    	; 0xb78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	a1 f4       	brne	.+40     	; 0xaa0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     a78:	a8 e3       	ldi	r26, 0x38	; 56
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e8 e3       	ldi	r30, 0x38	; 56
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	48 2f       	mov	r20, r24
     a84:	8a 81       	ldd	r24, Y+2	; 0x02
     a86:	28 2f       	mov	r18, r24
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 2e       	mov	r0, r18
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <GPIO_writePin+0xe4>
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	0a 94       	dec	r0
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <GPIO_writePin+0xe0>
     a9a:	84 2b       	or	r24, r20
     a9c:	8c 93       	st	X, r24
     a9e:	6c c0       	rjmp	.+216    	; 0xb78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     aa0:	a8 e3       	ldi	r26, 0x38	; 56
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e8 e3       	ldi	r30, 0x38	; 56
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	48 2f       	mov	r20, r24
     aac:	8a 81       	ldd	r24, Y+2	; 0x02
     aae:	28 2f       	mov	r18, r24
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	02 2e       	mov	r0, r18
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <GPIO_writePin+0x10c>
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	0a 94       	dec	r0
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <GPIO_writePin+0x108>
     ac2:	80 95       	com	r24
     ac4:	84 23       	and	r24, r20
     ac6:	8c 93       	st	X, r24
     ac8:	57 c0       	rjmp	.+174    	; 0xb78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	a1 f4       	brne	.+40     	; 0xaf8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     ad0:	a5 e3       	ldi	r26, 0x35	; 53
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	e5 e3       	ldi	r30, 0x35	; 53
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	48 2f       	mov	r20, r24
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 2e       	mov	r0, r18
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <GPIO_writePin+0x13c>
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	0a 94       	dec	r0
     af0:	e2 f7       	brpl	.-8      	; 0xaea <GPIO_writePin+0x138>
     af2:	84 2b       	or	r24, r20
     af4:	8c 93       	st	X, r24
     af6:	40 c0       	rjmp	.+128    	; 0xb78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     af8:	a5 e3       	ldi	r26, 0x35	; 53
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e5 e3       	ldi	r30, 0x35	; 53
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	48 2f       	mov	r20, r24
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	28 2f       	mov	r18, r24
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 2e       	mov	r0, r18
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <GPIO_writePin+0x164>
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	0a 94       	dec	r0
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <GPIO_writePin+0x160>
     b1a:	80 95       	com	r24
     b1c:	84 23       	and	r24, r20
     b1e:	8c 93       	st	X, r24
     b20:	2b c0       	rjmp	.+86     	; 0xb78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     b22:	8b 81       	ldd	r24, Y+3	; 0x03
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	a1 f4       	brne	.+40     	; 0xb50 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     b28:	a2 e3       	ldi	r26, 0x32	; 50
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	e2 e3       	ldi	r30, 0x32	; 50
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	48 2f       	mov	r20, r24
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 2e       	mov	r0, r18
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <GPIO_writePin+0x194>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	0a 94       	dec	r0
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <GPIO_writePin+0x190>
     b4a:	84 2b       	or	r24, r20
     b4c:	8c 93       	st	X, r24
     b4e:	14 c0       	rjmp	.+40     	; 0xb78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     b50:	a2 e3       	ldi	r26, 0x32	; 50
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e2 e3       	ldi	r30, 0x32	; 50
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	48 2f       	mov	r20, r24
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 2e       	mov	r0, r18
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <GPIO_writePin+0x1bc>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <GPIO_writePin+0x1b8>
     b72:	80 95       	com	r24
     b74:	84 23       	and	r24, r20
     b76:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <GPIO_readPin+0x6>
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <GPIO_readPin+0x8>
     b90:	0f 92       	push	r0
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	8a 83       	std	Y+2, r24	; 0x02
     b98:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     b9a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	88 30       	cpi	r24, 0x08	; 8
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <GPIO_readPin+0x1c>
     ba2:	84 c0       	rjmp	.+264    	; 0xcac <GPIO_readPin+0x124>
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	08 f0       	brcs	.+2      	; 0xbac <GPIO_readPin+0x24>
     baa:	80 c0       	rjmp	.+256    	; 0xcac <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	3d 83       	std	Y+5, r19	; 0x05
     bb4:	2c 83       	std	Y+4, r18	; 0x04
     bb6:	4c 81       	ldd	r20, Y+4	; 0x04
     bb8:	5d 81       	ldd	r21, Y+5	; 0x05
     bba:	41 30       	cpi	r20, 0x01	; 1
     bbc:	51 05       	cpc	r21, r1
     bbe:	79 f1       	breq	.+94     	; 0xc1e <GPIO_readPin+0x96>
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	9d 81       	ldd	r25, Y+5	; 0x05
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	91 05       	cpc	r25, r1
     bc8:	34 f4       	brge	.+12     	; 0xbd6 <GPIO_readPin+0x4e>
     bca:	2c 81       	ldd	r18, Y+4	; 0x04
     bcc:	3d 81       	ldd	r19, Y+5	; 0x05
     bce:	21 15       	cp	r18, r1
     bd0:	31 05       	cpc	r19, r1
     bd2:	69 f0       	breq	.+26     	; 0xbee <GPIO_readPin+0x66>
     bd4:	6b c0       	rjmp	.+214    	; 0xcac <GPIO_readPin+0x124>
     bd6:	4c 81       	ldd	r20, Y+4	; 0x04
     bd8:	5d 81       	ldd	r21, Y+5	; 0x05
     bda:	42 30       	cpi	r20, 0x02	; 2
     bdc:	51 05       	cpc	r21, r1
     bde:	b9 f1       	breq	.+110    	; 0xc4e <GPIO_readPin+0xc6>
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	9d 81       	ldd	r25, Y+5	; 0x05
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	91 05       	cpc	r25, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <GPIO_readPin+0x64>
     bea:	49 c0       	rjmp	.+146    	; 0xc7e <GPIO_readPin+0xf6>
     bec:	5f c0       	rjmp	.+190    	; 0xcac <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     bee:	e9 e3       	ldi	r30, 0x39	; 57
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a9 01       	movw	r20, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <GPIO_readPin+0x7e>
     c02:	55 95       	asr	r21
     c04:	47 95       	ror	r20
     c06:	8a 95       	dec	r24
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <GPIO_readPin+0x7a>
     c0a:	ca 01       	movw	r24, r20
     c0c:	81 70       	andi	r24, 0x01	; 1
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	88 23       	and	r24, r24
     c12:	19 f0       	breq	.+6      	; 0xc1a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	49 c0       	rjmp	.+146    	; 0xcac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     c1a:	19 82       	std	Y+1, r1	; 0x01
     c1c:	47 c0       	rjmp	.+142    	; 0xcac <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     c1e:	e6 e3       	ldi	r30, 0x36	; 54
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a9 01       	movw	r20, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <GPIO_readPin+0xae>
     c32:	55 95       	asr	r21
     c34:	47 95       	ror	r20
     c36:	8a 95       	dec	r24
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <GPIO_readPin+0xaa>
     c3a:	ca 01       	movw	r24, r20
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	88 23       	and	r24, r24
     c42:	19 f0       	breq	.+6      	; 0xc4a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	31 c0       	rjmp	.+98     	; 0xcac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	2f c0       	rjmp	.+94     	; 0xcac <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     c4e:	e3 e3       	ldi	r30, 0x33	; 51
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a9 01       	movw	r20, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <GPIO_readPin+0xde>
     c62:	55 95       	asr	r21
     c64:	47 95       	ror	r20
     c66:	8a 95       	dec	r24
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <GPIO_readPin+0xda>
     c6a:	ca 01       	movw	r24, r20
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	88 23       	and	r24, r24
     c72:	19 f0       	breq	.+6      	; 0xc7a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	19 c0       	rjmp	.+50     	; 0xcac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	17 c0       	rjmp	.+46     	; 0xcac <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     c7e:	e0 e3       	ldi	r30, 0x30	; 48
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a9 01       	movw	r20, r18
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <GPIO_readPin+0x10e>
     c92:	55 95       	asr	r21
     c94:	47 95       	ror	r20
     c96:	8a 95       	dec	r24
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <GPIO_readPin+0x10a>
     c9a:	ca 01       	movw	r24, r20
     c9c:	81 70       	andi	r24, 0x01	; 1
     c9e:	90 70       	andi	r25, 0x00	; 0
     ca0:	88 23       	and	r24, r24
     ca2:	19 f0       	breq	.+6      	; 0xcaa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     caa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <GPIO_setupPortDirection+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <GPIO_setupPortDirection+0x8>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	84 30       	cpi	r24, 0x04	; 4
     cd2:	90 f5       	brcc	.+100    	; 0xd38 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	3c 83       	std	Y+4, r19	; 0x04
     cdc:	2b 83       	std	Y+3, r18	; 0x03
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	91 05       	cpc	r25, r1
     ce6:	d1 f0       	breq	.+52     	; 0xd1c <GPIO_setupPortDirection+0x5e>
     ce8:	2b 81       	ldd	r18, Y+3	; 0x03
     cea:	3c 81       	ldd	r19, Y+4	; 0x04
     cec:	22 30       	cpi	r18, 0x02	; 2
     cee:	31 05       	cpc	r19, r1
     cf0:	2c f4       	brge	.+10     	; 0xcfc <GPIO_setupPortDirection+0x3e>
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	61 f0       	breq	.+24     	; 0xd12 <GPIO_setupPortDirection+0x54>
     cfa:	1e c0       	rjmp	.+60     	; 0xd38 <GPIO_setupPortDirection+0x7a>
     cfc:	2b 81       	ldd	r18, Y+3	; 0x03
     cfe:	3c 81       	ldd	r19, Y+4	; 0x04
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	81 f0       	breq	.+32     	; 0xd26 <GPIO_setupPortDirection+0x68>
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	81 f0       	breq	.+32     	; 0xd30 <GPIO_setupPortDirection+0x72>
     d10:	13 c0       	rjmp	.+38     	; 0xd38 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	80 83       	st	Z, r24
     d1a:	0e c0       	rjmp	.+28     	; 0xd38 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	80 83       	st	Z, r24
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     d26:	e4 e3       	ldi	r30, 0x34	; 52
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	80 83       	st	Z, r24
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     d30:	e1 e3       	ldi	r30, 0x31	; 49
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	80 83       	st	Z, r24
			break;
		}
	}
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <GPIO_writePort+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <GPIO_writePort+0x8>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	90 f5       	brcc	.+100    	; 0xdc0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3c 83       	std	Y+4, r19	; 0x04
     d64:	2b 83       	std	Y+3, r18	; 0x03
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	91 05       	cpc	r25, r1
     d6e:	d1 f0       	breq	.+52     	; 0xda4 <GPIO_writePort+0x5e>
     d70:	2b 81       	ldd	r18, Y+3	; 0x03
     d72:	3c 81       	ldd	r19, Y+4	; 0x04
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	2c f4       	brge	.+10     	; 0xd84 <GPIO_writePort+0x3e>
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9c 81       	ldd	r25, Y+4	; 0x04
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	61 f0       	breq	.+24     	; 0xd9a <GPIO_writePort+0x54>
     d82:	1e c0       	rjmp	.+60     	; 0xdc0 <GPIO_writePort+0x7a>
     d84:	2b 81       	ldd	r18, Y+3	; 0x03
     d86:	3c 81       	ldd	r19, Y+4	; 0x04
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	31 05       	cpc	r19, r1
     d8c:	81 f0       	breq	.+32     	; 0xdae <GPIO_writePort+0x68>
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	91 05       	cpc	r25, r1
     d96:	81 f0       	breq	.+32     	; 0xdb8 <GPIO_writePort+0x72>
     d98:	13 c0       	rjmp	.+38     	; 0xdc0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	80 83       	st	Z, r24
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     da4:	e8 e3       	ldi	r30, 0x38	; 56
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	80 83       	st	Z, r24
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     dae:	e5 e3       	ldi	r30, 0x35	; 53
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	80 83       	st	Z, r24
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     db8:	e2 e3       	ldi	r30, 0x32	; 50
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	80 83       	st	Z, r24
			break;
		}
	}
}
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <GPIO_readPort+0x6>
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <GPIO_readPort+0x8>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     ddc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	84 30       	cpi	r24, 0x04	; 4
     de2:	90 f5       	brcc	.+100    	; 0xe48 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3c 83       	std	Y+4, r19	; 0x04
     dec:	2b 83       	std	Y+3, r18	; 0x03
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	91 05       	cpc	r25, r1
     df6:	d1 f0       	breq	.+52     	; 0xe2c <GPIO_readPort+0x5e>
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	3c 81       	ldd	r19, Y+4	; 0x04
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	2c f4       	brge	.+10     	; 0xe0c <GPIO_readPort+0x3e>
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	61 f0       	breq	.+24     	; 0xe22 <GPIO_readPort+0x54>
     e0a:	1e c0       	rjmp	.+60     	; 0xe48 <GPIO_readPort+0x7a>
     e0c:	2b 81       	ldd	r18, Y+3	; 0x03
     e0e:	3c 81       	ldd	r19, Y+4	; 0x04
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	81 f0       	breq	.+32     	; 0xe36 <GPIO_readPort+0x68>
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	91 05       	cpc	r25, r1
     e1e:	81 f0       	breq	.+32     	; 0xe40 <GPIO_readPort+0x72>
     e20:	13 c0       	rjmp	.+38     	; 0xe48 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     e22:	e9 e3       	ldi	r30, 0x39	; 57
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	0e c0       	rjmp	.+28     	; 0xe48 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     e2c:	e6 e3       	ldi	r30, 0x36	; 54
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	09 c0       	rjmp	.+18     	; 0xe48 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     e36:	e3 e3       	ldi	r30, 0x33	; 51
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     e40:	e0 e3       	ldi	r30, 0x30	; 48
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <KEYPAD_getPressedKey+0x6>
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
     e64:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     e66:	1b 82       	std	Y+3, r1	; 0x03
     e68:	43 c0       	rjmp	.+134    	; 0xef0 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	98 2f       	mov	r25, r24
     e76:	9c 5f       	subi	r25, 0xFC	; 252
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	69 2f       	mov	r22, r25
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9c 01       	movw	r18, r24
     e8a:	2c 5f       	subi	r18, 0xFC	; 252
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <KEYPAD_getPressedKey+0x40>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	2a 95       	dec	r18
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <KEYPAD_getPressedKey+0x3c>
     e9c:	80 95       	com	r24
     e9e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	69 81       	ldd	r22, Y+1	; 0x01
     ea4:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     ea8:	1a 82       	std	Y+2, r1	; 0x02
     eaa:	1c c0       	rjmp	.+56     	; 0xee4 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	6a 81       	ldd	r22, Y+2	; 0x02
     eb0:	0e 94 c4 05 	call	0xb88	; 0xb88 <GPIO_readPin>
     eb4:	88 23       	and	r24, r24
     eb6:	99 f4       	brne	.+38     	; 0xede <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	98 2f       	mov	r25, r24
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	89 0f       	add	r24, r25
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	0e 94 7d 07 	call	0xefa	; 0xefa <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	8a 83       	std	Y+2, r24	; 0x02
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	08 f3       	brcs	.-62     	; 0xeac <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	8b 83       	std	Y+3, r24	; 0x03
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	08 f4       	brcc	.+2      	; 0xef8 <KEYPAD_getPressedKey+0xa0>
     ef6:	b9 cf       	rjmp	.-142    	; 0xe6a <KEYPAD_getPressedKey+0x12>
     ef8:	b6 cf       	rjmp	.-148    	; 0xe66 <KEYPAD_getPressedKey+0xe>

00000efa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <KEYPAD_4x4_adjustKeyNumber+0x6>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <KEYPAD_4x4_adjustKeyNumber+0x8>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     f08:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	3c 83       	std	Y+4, r19	; 0x04
     f12:	2b 83       	std	Y+3, r18	; 0x03
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	88 30       	cpi	r24, 0x08	; 8
     f1a:	91 05       	cpc	r25, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <KEYPAD_4x4_adjustKeyNumber+0x26>
     f1e:	70 c0       	rjmp	.+224    	; 0x1000 <KEYPAD_4x4_adjustKeyNumber+0x106>
     f20:	2b 81       	ldd	r18, Y+3	; 0x03
     f22:	3c 81       	ldd	r19, Y+4	; 0x04
     f24:	29 30       	cpi	r18, 0x09	; 9
     f26:	31 05       	cpc	r19, r1
     f28:	5c f5       	brge	.+86     	; 0xf80 <KEYPAD_4x4_adjustKeyNumber+0x86>
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	84 30       	cpi	r24, 0x04	; 4
     f30:	91 05       	cpc	r25, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <KEYPAD_4x4_adjustKeyNumber+0x3c>
     f34:	59 c0       	rjmp	.+178    	; 0xfe8 <KEYPAD_4x4_adjustKeyNumber+0xee>
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	3c 81       	ldd	r19, Y+4	; 0x04
     f3a:	25 30       	cpi	r18, 0x05	; 5
     f3c:	31 05       	cpc	r19, r1
     f3e:	9c f4       	brge	.+38     	; 0xf66 <KEYPAD_4x4_adjustKeyNumber+0x6c>
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <KEYPAD_4x4_adjustKeyNumber+0x52>
     f4a:	48 c0       	rjmp	.+144    	; 0xfdc <KEYPAD_4x4_adjustKeyNumber+0xe2>
     f4c:	2b 81       	ldd	r18, Y+3	; 0x03
     f4e:	3c 81       	ldd	r19, Y+4	; 0x04
     f50:	23 30       	cpi	r18, 0x03	; 3
     f52:	31 05       	cpc	r19, r1
     f54:	0c f0       	brlt	.+2      	; 0xf58 <KEYPAD_4x4_adjustKeyNumber+0x5e>
     f56:	45 c0       	rjmp	.+138    	; 0xfe2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <KEYPAD_4x4_adjustKeyNumber+0x6a>
     f62:	39 c0       	rjmp	.+114    	; 0xfd6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
     f64:	67 c0       	rjmp	.+206    	; 0x1034 <KEYPAD_4x4_adjustKeyNumber+0x13a>
     f66:	2b 81       	ldd	r18, Y+3	; 0x03
     f68:	3c 81       	ldd	r19, Y+4	; 0x04
     f6a:	26 30       	cpi	r18, 0x06	; 6
     f6c:	31 05       	cpc	r19, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <KEYPAD_4x4_adjustKeyNumber+0x78>
     f70:	41 c0       	rjmp	.+130    	; 0xff4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	87 30       	cpi	r24, 0x07	; 7
     f78:	91 05       	cpc	r25, r1
     f7a:	0c f0       	brlt	.+2      	; 0xf7e <KEYPAD_4x4_adjustKeyNumber+0x84>
     f7c:	3e c0       	rjmp	.+124    	; 0xffa <KEYPAD_4x4_adjustKeyNumber+0x100>
     f7e:	37 c0       	rjmp	.+110    	; 0xfee <KEYPAD_4x4_adjustKeyNumber+0xf4>
     f80:	2b 81       	ldd	r18, Y+3	; 0x03
     f82:	3c 81       	ldd	r19, Y+4	; 0x04
     f84:	2c 30       	cpi	r18, 0x0C	; 12
     f86:	31 05       	cpc	r19, r1
     f88:	09 f4       	brne	.+2      	; 0xf8c <KEYPAD_4x4_adjustKeyNumber+0x92>
     f8a:	46 c0       	rjmp	.+140    	; 0x1018 <KEYPAD_4x4_adjustKeyNumber+0x11e>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	8d 30       	cpi	r24, 0x0D	; 13
     f92:	91 05       	cpc	r25, r1
     f94:	5c f4       	brge	.+22     	; 0xfac <KEYPAD_4x4_adjustKeyNumber+0xb2>
     f96:	2b 81       	ldd	r18, Y+3	; 0x03
     f98:	3c 81       	ldd	r19, Y+4	; 0x04
     f9a:	2a 30       	cpi	r18, 0x0A	; 10
     f9c:	31 05       	cpc	r19, r1
     f9e:	b1 f1       	breq	.+108    	; 0x100c <KEYPAD_4x4_adjustKeyNumber+0x112>
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	8b 30       	cpi	r24, 0x0B	; 11
     fa6:	91 05       	cpc	r25, r1
     fa8:	a4 f5       	brge	.+104    	; 0x1012 <KEYPAD_4x4_adjustKeyNumber+0x118>
     faa:	2d c0       	rjmp	.+90     	; 0x1006 <KEYPAD_4x4_adjustKeyNumber+0x10c>
     fac:	2b 81       	ldd	r18, Y+3	; 0x03
     fae:	3c 81       	ldd	r19, Y+4	; 0x04
     fb0:	2e 30       	cpi	r18, 0x0E	; 14
     fb2:	31 05       	cpc	r19, r1
     fb4:	b9 f1       	breq	.+110    	; 0x1024 <KEYPAD_4x4_adjustKeyNumber+0x12a>
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	8e 30       	cpi	r24, 0x0E	; 14
     fbc:	91 05       	cpc	r25, r1
     fbe:	7c f1       	brlt	.+94     	; 0x101e <KEYPAD_4x4_adjustKeyNumber+0x124>
     fc0:	2b 81       	ldd	r18, Y+3	; 0x03
     fc2:	3c 81       	ldd	r19, Y+4	; 0x04
     fc4:	2f 30       	cpi	r18, 0x0F	; 15
     fc6:	31 05       	cpc	r19, r1
     fc8:	79 f1       	breq	.+94     	; 0x1028 <KEYPAD_4x4_adjustKeyNumber+0x12e>
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	80 31       	cpi	r24, 0x10	; 16
     fd0:	91 05       	cpc	r25, r1
     fd2:	69 f1       	breq	.+90     	; 0x102e <KEYPAD_4x4_adjustKeyNumber+0x134>
     fd4:	2f c0       	rjmp	.+94     	; 0x1034 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     fd6:	87 e0       	ldi	r24, 0x07	; 7
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	2e c0       	rjmp	.+92     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     fdc:	88 e0       	ldi	r24, 0x08	; 8
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	2b c0       	rjmp	.+86     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     fe2:	89 e0       	ldi	r24, 0x09	; 9
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	28 c0       	rjmp	.+80     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
     fe8:	85 e2       	ldi	r24, 0x25	; 37
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	25 c0       	rjmp	.+74     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	22 c0       	rjmp	.+68     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     ff4:	85 e0       	ldi	r24, 0x05	; 5
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	1f c0       	rjmp	.+62     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     ffa:	86 e0       	ldi	r24, 0x06	; 6
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	1c c0       	rjmp	.+56     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1000:	8a e2       	ldi	r24, 0x2A	; 42
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	19 c0       	rjmp	.+50     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	16 c0       	rjmp	.+44     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	10 c0       	rjmp	.+32     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1018:	8d e2       	ldi	r24, 0x2D	; 45
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	0d c0       	rjmp	.+26     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    101e:	8d e0       	ldi	r24, 0x0D	; 13
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	0a c0       	rjmp	.+20     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1028:	8d e3       	ldi	r24, 0x3D	; 61
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    102e:	8b e2       	ldi	r24, 0x2B	; 43
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
} 
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	41 e0       	ldi	r20, 0x01	; 1
    1056:	0e 94 ee 03 	call	0x7dc	; 0x7dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	0e 94 ee 03 	call	0x7dc	; 0x7dc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	6f ef       	ldi	r22, 0xFF	; 255
    1072:	0e 94 5f 06 	call	0xcbe	; 0xcbe <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1076:	88 e3       	ldi	r24, 0x38	; 56
    1078:	0e 94 47 08 	call	0x108e	; 0x108e <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    107c:	8c e0       	ldi	r24, 0x0C	; 12
    107e:	0e 94 47 08 	call	0x108e	; 0x108e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	0e 94 47 08 	call	0x108e	; 0x108e <LCD_sendCommand>
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <LCD_sendCommand+0x6>
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_port_value = 0;
    109a:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tas = 50ns */
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	6a 81       	ldd	r22, Y+2	; 0x02
    10d6:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePort>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	delay_ms(1); /* delay for processing Th = 13ns */
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
#endif
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <LCD_displayCharacter+0x6>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_port_value = 0;
    1112:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tas = 50ns */
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	62 e0       	ldi	r22, 0x02	; 2
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	6a 81       	ldd	r22, Y+2	; 0x02
    114e:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePort>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	62 e0       	ldi	r22, 0x02	; 2
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GPIO_writePin>
	delay_ms(1); /* delay for processing Th = 13ns */
    1168:	61 e0       	ldi	r22, 0x01	; 1
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
#endif
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <LCD_displayString+0x6>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9b 83       	std	Y+3, r25	; 0x03
    118c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    118e:	19 82       	std	Y+1, r1	; 0x01
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	9b 81       	ldd	r25, Y+3	; 0x03
    119c:	fc 01       	movw	r30, r24
    119e:	e2 0f       	add	r30, r18
    11a0:	f3 1f       	adc	r31, r19
    11a2:	80 81       	ld	r24, Z
    11a4:	0e 94 83 08 	call	0x1106	; 0x1106 <LCD_displayCharacter>
		i++;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	fc 01       	movw	r30, r24
    11ba:	e2 0f       	add	r30, r18
    11bc:	f3 1f       	adc	r31, r19
    11be:	80 81       	ld	r24, Z
    11c0:	88 23       	and	r24, r24
    11c2:	39 f7       	brne	.-50     	; 0x1192 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <LCD_moveCursor+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <LCD_moveCursor+0x8>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3d 83       	std	Y+5, r19	; 0x05
    11ea:	2c 83       	std	Y+4, r18	; 0x04
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	c1 f0       	breq	.+48     	; 0x1226 <LCD_moveCursor+0x56>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <LCD_moveCursor+0x3a>
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	61 f0       	breq	.+24     	; 0x1220 <LCD_moveCursor+0x50>
    1208:	19 c0       	rjmp	.+50     	; 0x123c <LCD_moveCursor+0x6c>
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	3d 81       	ldd	r19, Y+5	; 0x05
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	69 f0       	breq	.+26     	; 0x122e <LCD_moveCursor+0x5e>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	61 f0       	breq	.+24     	; 0x1236 <LCD_moveCursor+0x66>
    121e:	0e c0       	rjmp	.+28     	; 0x123c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	0b c0       	rjmp	.+22     	; 0x123c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	80 5c       	subi	r24, 0xC0	; 192
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	07 c0       	rjmp	.+14     	; 0x123c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	80 5f       	subi	r24, 0xF0	; 240
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	03 c0       	rjmp	.+6      	; 0x123c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	80 5b       	subi	r24, 0xB0	; 176
    123a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	80 68       	ori	r24, 0x80	; 128
    1240:	0e 94 47 08 	call	0x108e	; 0x108e <LCD_sendCommand>
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <LCD_displayStringRowColumn+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <LCD_displayStringRowColumn+0x8>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	6a 83       	std	Y+2, r22	; 0x02
    1264:	5c 83       	std	Y+4, r21	; 0x04
    1266:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	6a 81       	ldd	r22, Y+2	; 0x02
    126c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	62 97       	sbiw	r28, 0x12	; 18
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	9a 8b       	std	Y+18, r25	; 0x12
    129c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    129e:	89 89       	ldd	r24, Y+17	; 0x11
    12a0:	9a 89       	ldd	r25, Y+18	; 0x12
    12a2:	9e 01       	movw	r18, r28
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	b9 01       	movw	r22, r18
    12aa:	4a e0       	ldi	r20, 0x0A	; 10
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <itoa>
   LCD_displayString(buff); /* Display the string */
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_displayString>
}
    12ba:	62 96       	adiw	r28, 0x12	; 18
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 47 08 	call	0x108e	; 0x108e <LCD_sendCommand>
}
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <TIMER_Init>:
/*
 * Description:
 * Initialize timer 0, 1 or 2 with specified configurations:
 */
void TIMER_Init( TIMER_ConfigType* config )
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	2a 97       	sbiw	r28, 0x0a	; 10
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
	/* Select the required timer. */
	switch(config->timerID)
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3a 87       	std	Y+10, r19	; 0x0a
    1304:	29 87       	std	Y+9, r18	; 0x09
    1306:	89 85       	ldd	r24, Y+9	; 0x09
    1308:	9a 85       	ldd	r25, Y+10	; 0x0a
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <TIMER_Init+0x32>
    1310:	51 c0       	rjmp	.+162    	; 0x13b4 <TIMER_Init+0xd4>
    1312:	29 85       	ldd	r18, Y+9	; 0x09
    1314:	3a 85       	ldd	r19, Y+10	; 0x0a
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <TIMER_Init+0x3e>
    131c:	95 c0       	rjmp	.+298    	; 0x1448 <TIMER_Init+0x168>
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	09 f0       	breq	.+2      	; 0x1328 <TIMER_Init+0x48>
    1326:	d5 c0       	rjmp	.+426    	; 0x14d2 <TIMER_Init+0x1f2>
	{
	/***********************************TIMER0***********************************/
	case TIMER0_ID:
		/* Put the required initial value of timer in the timer0 8bits counter register.*/
		TCNT0 = (uint8)config->initialValue;
    1328:	a2 e5       	ldi	r26, 0x52	; 82
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 81       	ldd	r30, Y+1	; 0x01
    132e:	fa 81       	ldd	r31, Y+2	; 0x02
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	8c 93       	st	X, r24
		 * FOC0 = 1 Non PWM mode.
		 * WGM01:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
		 * COM01:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
		 * CS02:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
		 */
		TCCR0 = (1<<FOC0);
    1336:	e3 e5       	ldi	r30, 0x53	; 83
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 e8       	ldi	r24, 0x80	; 128
    133c:	80 83       	st	Z, r24
		/* Inserting clock in the first three bits in TCCR0. */
		TCCR0 = (TCCR0&~(0x07)) | (config->prescaler);
    133e:	a3 e5       	ldi	r26, 0x53	; 83
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e3 e5       	ldi	r30, 0x53	; 83
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	98 2f       	mov	r25, r24
    134a:	98 7f       	andi	r25, 0xF8	; 248
    134c:	e9 81       	ldd	r30, Y+1	; 0x01
    134e:	fa 81       	ldd	r31, Y+2	; 0x02
    1350:	86 81       	ldd	r24, Z+6	; 0x06
    1352:	89 2b       	or	r24, r25
    1354:	8c 93       	st	X, r24
		switch(config->mode)
    1356:	e9 81       	ldd	r30, Y+1	; 0x01
    1358:	fa 81       	ldd	r31, Y+2	; 0x02
    135a:	81 81       	ldd	r24, Z+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	38 87       	std	Y+8, r19	; 0x08
    1362:	2f 83       	std	Y+7, r18	; 0x07
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
    1366:	98 85       	ldd	r25, Y+8	; 0x08
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	31 f0       	breq	.+12     	; 0x1378 <TIMER_Init+0x98>
    136c:	2f 81       	ldd	r18, Y+7	; 0x07
    136e:	38 85       	ldd	r19, Y+8	; 0x08
    1370:	21 30       	cpi	r18, 0x01	; 1
    1372:	31 05       	cpc	r19, r1
    1374:	49 f0       	breq	.+18     	; 0x1388 <TIMER_Init+0xa8>
    1376:	ad c0       	rjmp	.+346    	; 0x14d2 <TIMER_Init+0x1f2>
		{
		case OVERFLOW_MODE:
			/* Enable overflow interrupt for required mode. */
			TIMSK |= (1<<TOIE0);
    1378:	a9 e5       	ldi	r26, 0x59	; 89
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e9 e5       	ldi	r30, 0x59	; 89
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	81 60       	ori	r24, 0x01	; 1
    1384:	8c 93       	st	X, r24
    1386:	a5 c0       	rjmp	.+330    	; 0x14d2 <TIMER_Init+0x1f2>
			break;
			/* Set bits that need to be set in compare mode, otherwise let them 0s. */
		case COMPARE_MODE:
			TCCR0 |= (1<<WGM01);
    1388:	a3 e5       	ldi	r26, 0x53	; 83
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e3 e5       	ldi	r30, 0x53	; 83
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	88 60       	ori	r24, 0x08	; 8
    1394:	8c 93       	st	X, r24
			/* Store compare value in case of mode is COMPARE_MODE. */
			OCR0 = config->compareValue;
    1396:	ac e5       	ldi	r26, 0x5C	; 92
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e9 81       	ldd	r30, Y+1	; 0x01
    139c:	fa 81       	ldd	r31, Y+2	; 0x02
    139e:	84 81       	ldd	r24, Z+4	; 0x04
    13a0:	95 81       	ldd	r25, Z+5	; 0x05
    13a2:	8c 93       	st	X, r24
			/* Enable compare match interrupt for required mode. */
			TIMSK |= (1<<OCIE0);
    13a4:	a9 e5       	ldi	r26, 0x59	; 89
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e9 e5       	ldi	r30, 0x59	; 89
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	82 60       	ori	r24, 0x02	; 2
    13b0:	8c 93       	st	X, r24
    13b2:	8f c0       	rjmp	.+286    	; 0x14d2 <TIMER_Init+0x1f2>
		}
		break;
		/***********************************TIMER1***********************************/
		case TIMER1_ID:
			/* Put the required initial value of timer in the timer1 16 bits counter register.*/
			TCNT1 = config->initialValue;
    13b4:	ac e4       	ldi	r26, 0x4C	; 76
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ba:	fa 81       	ldd	r31, Y+2	; 0x02
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	9c 93       	st	X, r25
    13c4:	8e 93       	st	-X, r24
			 * FOC1A,FOC1B = 1 Non PWM mode.
			 * WGM01:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
			 * COM1A1:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
			 * CS02:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    13c6:	ef e4       	ldi	r30, 0x4F	; 79
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8c e0       	ldi	r24, 0x0C	; 12
    13cc:	80 83       	st	Z, r24
			/* Inserting clock in the first three bits in TCCR0. */
			TCCR1B = (TCCR1B&~(0x07)) | (config->prescaler);
    13ce:	ae e4       	ldi	r26, 0x4E	; 78
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ee e4       	ldi	r30, 0x4E	; 78
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	98 2f       	mov	r25, r24
    13da:	98 7f       	andi	r25, 0xF8	; 248
    13dc:	e9 81       	ldd	r30, Y+1	; 0x01
    13de:	fa 81       	ldd	r31, Y+2	; 0x02
    13e0:	86 81       	ldd	r24, Z+6	; 0x06
    13e2:	89 2b       	or	r24, r25
    13e4:	8c 93       	st	X, r24
			switch(config->mode)
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	81 81       	ldd	r24, Z+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3e 83       	std	Y+6, r19	; 0x06
    13f2:	2d 83       	std	Y+5, r18	; 0x05
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	31 f0       	breq	.+12     	; 0x1408 <TIMER_Init+0x128>
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1400:	21 30       	cpi	r18, 0x01	; 1
    1402:	31 05       	cpc	r19, r1
    1404:	49 f0       	breq	.+18     	; 0x1418 <TIMER_Init+0x138>
    1406:	65 c0       	rjmp	.+202    	; 0x14d2 <TIMER_Init+0x1f2>
			{
			case OVERFLOW_MODE:
				/* Enable overflow interrupt for required mode. */
				TIMSK |= (1<<TOIE1);
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	8c 93       	st	X, r24
    1416:	5d c0       	rjmp	.+186    	; 0x14d2 <TIMER_Init+0x1f2>
				break;
				/* Set bits that need to be set in compare mode, otherwise let them 0s. */
			case COMPARE_MODE:
				TCCR1B |= (1<<WGM12);
    1418:	ae e4       	ldi	r26, 0x4E	; 78
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ee e4       	ldi	r30, 0x4E	; 78
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	88 60       	ori	r24, 0x08	; 8
    1424:	8c 93       	st	X, r24
				/* Store compare value in case of mode is COMPARE_MODE. */
				OCR1A = config->compareValue;
    1426:	aa e4       	ldi	r26, 0x4A	; 74
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e9 81       	ldd	r30, Y+1	; 0x01
    142c:	fa 81       	ldd	r31, Y+2	; 0x02
    142e:	84 81       	ldd	r24, Z+4	; 0x04
    1430:	95 81       	ldd	r25, Z+5	; 0x05
    1432:	11 96       	adiw	r26, 0x01	; 1
    1434:	9c 93       	st	X, r25
    1436:	8e 93       	st	-X, r24
				/* Enable compare match interrupt for required mode. */
				TIMSK |= (1<<OCIE1A);
    1438:	a9 e5       	ldi	r26, 0x59	; 89
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e9 e5       	ldi	r30, 0x59	; 89
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 61       	ori	r24, 0x10	; 16
    1444:	8c 93       	st	X, r24
    1446:	45 c0       	rjmp	.+138    	; 0x14d2 <TIMER_Init+0x1f2>
			}
			break;
			/***********************************TIMER2***********************************/
			case TIMER2_ID:
				/* Put the required initial value of timer in the timer2 8bits counter register.*/
				TCNT2 = (uint8)config->initialValue;
    1448:	a4 e4       	ldi	r26, 0x44	; 68
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	8c 93       	st	X, r24
				 * FOC2 = 1 Non PWM mode.
				 * WGM21:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
				 * COM01:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
				 * CS22:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
				 */
				TCCR2 = (1<<FOC2);
    1456:	e5 e4       	ldi	r30, 0x45	; 69
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 e8       	ldi	r24, 0x80	; 128
    145c:	80 83       	st	Z, r24
				/* Inserting clock in the first three bits in TCCR0. */
				TCCR2 = (TCCR2&~(0x07)) | (config->prescaler);
    145e:	a5 e4       	ldi	r26, 0x45	; 69
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e4       	ldi	r30, 0x45	; 69
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	98 2f       	mov	r25, r24
    146a:	98 7f       	andi	r25, 0xF8	; 248
    146c:	e9 81       	ldd	r30, Y+1	; 0x01
    146e:	fa 81       	ldd	r31, Y+2	; 0x02
    1470:	86 81       	ldd	r24, Z+6	; 0x06
    1472:	89 2b       	or	r24, r25
    1474:	8c 93       	st	X, r24
				switch(config->mode)
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	81 81       	ldd	r24, Z+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3c 83       	std	Y+4, r19	; 0x04
    1482:	2b 83       	std	Y+3, r18	; 0x03
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	31 f0       	breq	.+12     	; 0x1498 <TIMER_Init+0x1b8>
    148c:	2b 81       	ldd	r18, Y+3	; 0x03
    148e:	3c 81       	ldd	r19, Y+4	; 0x04
    1490:	21 30       	cpi	r18, 0x01	; 1
    1492:	31 05       	cpc	r19, r1
    1494:	49 f0       	breq	.+18     	; 0x14a8 <TIMER_Init+0x1c8>
    1496:	1d c0       	rjmp	.+58     	; 0x14d2 <TIMER_Init+0x1f2>
				{
				case OVERFLOW_MODE:
					/* Enable overflow interrupt for required mode. */
					TIMSK |= (1<<TOIE2);
    1498:	a9 e5       	ldi	r26, 0x59	; 89
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e9 e5       	ldi	r30, 0x59	; 89
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 64       	ori	r24, 0x40	; 64
    14a4:	8c 93       	st	X, r24
    14a6:	15 c0       	rjmp	.+42     	; 0x14d2 <TIMER_Init+0x1f2>
					break;
					/* Set bits that need to be set in compare mode, otherwise let them 0s. */
				case COMPARE_MODE:
					TCCR2 |= (1<<WGM21);
    14a8:	a5 e4       	ldi	r26, 0x45	; 69
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e4       	ldi	r30, 0x45	; 69
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	88 60       	ori	r24, 0x08	; 8
    14b4:	8c 93       	st	X, r24
					/* Store compare value in case of mode is COMPARE_MODE. */
					OCR2 = config->compareValue;
    14b6:	a3 e4       	ldi	r26, 0x43	; 67
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	84 81       	ldd	r24, Z+4	; 0x04
    14c0:	95 81       	ldd	r25, Z+5	; 0x05
    14c2:	8c 93       	st	X, r24
					/* Enable compare match interrupt for required mode. */
					TIMSK |= (1<<OCIE2);
    14c4:	a9 e5       	ldi	r26, 0x59	; 89
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e9 e5       	ldi	r30, 0x59	; 89
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	8c 93       	st	X, r24
					break;
				}
	}
}
    14d2:	2a 96       	adiw	r28, 0x0a	; 10
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <TIMER_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void TIMER_setCallBack( void(*a_ptr)( void ), TIMER_ID timerID)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <TIMER_setCallBack+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <TIMER_setCallBack+0x8>
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	switch(timerID)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3d 83       	std	Y+5, r19	; 0x05
    1500:	2c 83       	std	Y+4, r18	; 0x04
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	81 f0       	breq	.+32     	; 0x152c <TIMER_setCallBack+0x48>
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	91 f0       	breq	.+36     	; 0x153a <TIMER_setCallBack+0x56>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	a1 f4       	brne	.+40     	; 0x1546 <TIMER_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_timer0CallBackPtr = a_ptr;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	90 93 2d 01 	sts	0x012D, r25
    1526:	80 93 2c 01 	sts	0x012C, r24
    152a:	0d c0       	rjmp	.+26     	; 0x1546 <TIMER_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_timer1CallBackPtr = a_ptr;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	90 93 2f 01 	sts	0x012F, r25
    1534:	80 93 2e 01 	sts	0x012E, r24
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <TIMER_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_timer2CallBackPtr = a_ptr;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	90 93 31 01 	sts	0x0131, r25
    1542:	80 93 30 01 	sts	0x0130, r24
		break;
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <TIMER_Deinit>:
/*
 * Description:
 * Stops the timer by stopping its clock.
 */
void TIMER_Deinit( TIMER_ID timerID )
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <TIMER_Deinit+0x6>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
	switch(timerID)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3b 83       	std	Y+3, r19	; 0x03
    156c:	2a 83       	std	Y+2, r18	; 0x02
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	91 05       	cpc	r25, r1
    1576:	69 f0       	breq	.+26     	; 0x1592 <TIMER_Deinit+0x3c>
    1578:	2a 81       	ldd	r18, Y+2	; 0x02
    157a:	3b 81       	ldd	r19, Y+3	; 0x03
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	61 f0       	breq	.+24     	; 0x159a <TIMER_Deinit+0x44>
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	59 f4       	brne	.+22     	; 0x15a0 <TIMER_Deinit+0x4a>
	{
	case TIMER0_ID:
		TCCR0 = 0;
    158a:	e3 e5       	ldi	r30, 0x53	; 83
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	10 82       	st	Z, r1
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <TIMER_Deinit+0x4a>
		break;
	case TIMER1_ID:
		TCCR1B = 0;
    1592:	ee e4       	ldi	r30, 0x4E	; 78
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	10 82       	st	Z, r1
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <TIMER_Deinit+0x4a>
		break;
	case TIMER2_ID:
		TCCR2 = 0;
    159a:	e5 e4       	ldi	r30, 0x45	; 69
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	10 82       	st	Z, r1
		break;
	}
}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <__vector_9>:
/*
 * Description:
 * Calls the call back function of timer 0 in case of Overflow interrupt occurs.
 */
ISR( TIMER0_OVF_vect )
{
    15ac:	1f 92       	push	r1
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	2f 93       	push	r18
    15b8:	3f 93       	push	r19
    15ba:	4f 93       	push	r20
    15bc:	5f 93       	push	r21
    15be:	6f 93       	push	r22
    15c0:	7f 93       	push	r23
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	af 93       	push	r26
    15c8:	bf 93       	push	r27
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR)
    15d6:	80 91 2c 01 	lds	r24, 0x012C
    15da:	90 91 2d 01 	lds	r25, 0x012D
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	29 f0       	breq	.+10     	; 0x15ec <__vector_9+0x40>
	{
		(*g_timer0CallBackPtr)();
    15e2:	e0 91 2c 01 	lds	r30, 0x012C
    15e6:	f0 91 2d 01 	lds	r31, 0x012D
    15ea:	09 95       	icall
	}
	TIFR |= TOV0;
    15ec:	e8 e5       	ldi	r30, 0x58	; 88
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	a8 e5       	ldi	r26, 0x58	; 88
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	8c 91       	ld	r24, X
    15f6:	80 83       	st	Z, r24
}
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_19>:
/*
 * Description:
 * Calls the call back function of timer 0 in case of compare match interrupt occurs.
 */
ISR( TIMER0_COMP_vect )
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR)
    1648:	80 91 2c 01 	lds	r24, 0x012C
    164c:	90 91 2d 01 	lds	r25, 0x012D
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	29 f0       	breq	.+10     	; 0x165e <__vector_19+0x40>
	{
		(*g_timer0CallBackPtr)();
    1654:	e0 91 2c 01 	lds	r30, 0x012C
    1658:	f0 91 2d 01 	lds	r31, 0x012D
    165c:	09 95       	icall
	}
	TIFR |= OCF0;
    165e:	a8 e5       	ldi	r26, 0x58	; 88
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e8 e5       	ldi	r30, 0x58	; 88
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	8c 93       	st	X, r24
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	bf 91       	pop	r27
    1676:	af 91       	pop	r26
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	7f 91       	pop	r23
    167e:	6f 91       	pop	r22
    1680:	5f 91       	pop	r21
    1682:	4f 91       	pop	r20
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <__vector_8>:
/*
 * Description:
 * Calls the call back function of timer 1 in case of Overflow interrupt occurs.
 */
ISR( TIMER1_OVF_vect )
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	2f 93       	push	r18
    169e:	3f 93       	push	r19
    16a0:	4f 93       	push	r20
    16a2:	5f 93       	push	r21
    16a4:	6f 93       	push	r22
    16a6:	7f 93       	push	r23
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	af 93       	push	r26
    16ae:	bf 93       	push	r27
    16b0:	ef 93       	push	r30
    16b2:	ff 93       	push	r31
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR)
    16bc:	80 91 2e 01 	lds	r24, 0x012E
    16c0:	90 91 2f 01 	lds	r25, 0x012F
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	29 f0       	breq	.+10     	; 0x16d2 <__vector_8+0x40>
	{
		(*g_timer1CallBackPtr)();
    16c8:	e0 91 2e 01 	lds	r30, 0x012E
    16cc:	f0 91 2f 01 	lds	r31, 0x012F
    16d0:	09 95       	icall
	}
	TIFR |= TOV1;
    16d2:	a8 e5       	ldi	r26, 0x58	; 88
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e8 e5       	ldi	r30, 0x58	; 88
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	82 60       	ori	r24, 0x02	; 2
    16de:	8c 93       	st	X, r24
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_6>:
/*
 * Description:
 * Calls the call back function of timer 1 in case of compare match interrupt occurs.
 */
ISR( TIMER1_COMPA_vect )
{
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR)
    1730:	80 91 2e 01 	lds	r24, 0x012E
    1734:	90 91 2f 01 	lds	r25, 0x012F
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	29 f0       	breq	.+10     	; 0x1746 <__vector_6+0x40>
	{
		(*g_timer1CallBackPtr)();
    173c:	e0 91 2e 01 	lds	r30, 0x012E
    1740:	f0 91 2f 01 	lds	r31, 0x012F
    1744:	09 95       	icall
	}
	TIFR |= OCF1A;
    1746:	a8 e5       	ldi	r26, 0x58	; 88
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e8 e5       	ldi	r30, 0x58	; 88
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	84 60       	ori	r24, 0x04	; 4
    1752:	8c 93       	st	X, r24
}
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	ff 91       	pop	r31
    175a:	ef 91       	pop	r30
    175c:	bf 91       	pop	r27
    175e:	af 91       	pop	r26
    1760:	9f 91       	pop	r25
    1762:	8f 91       	pop	r24
    1764:	7f 91       	pop	r23
    1766:	6f 91       	pop	r22
    1768:	5f 91       	pop	r21
    176a:	4f 91       	pop	r20
    176c:	3f 91       	pop	r19
    176e:	2f 91       	pop	r18
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <__vector_4>:
/*
 * Description:
 * Calls the call back function of timer 2 in case of Overflow interrupt occurs.
 */
ISR( TIMER2_OVF_vect )
{
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	2f 93       	push	r18
    1786:	3f 93       	push	r19
    1788:	4f 93       	push	r20
    178a:	5f 93       	push	r21
    178c:	6f 93       	push	r22
    178e:	7f 93       	push	r23
    1790:	8f 93       	push	r24
    1792:	9f 93       	push	r25
    1794:	af 93       	push	r26
    1796:	bf 93       	push	r27
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR)
    17a4:	80 91 30 01 	lds	r24, 0x0130
    17a8:	90 91 31 01 	lds	r25, 0x0131
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	29 f0       	breq	.+10     	; 0x17ba <__vector_4+0x40>
	{
		(*g_timer2CallBackPtr)();
    17b0:	e0 91 30 01 	lds	r30, 0x0130
    17b4:	f0 91 31 01 	lds	r31, 0x0131
    17b8:	09 95       	icall
	}
	TIFR |= TOV2;
    17ba:	a8 e5       	ldi	r26, 0x58	; 88
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e5       	ldi	r30, 0x58	; 88
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	86 60       	ori	r24, 0x06	; 6
    17c6:	8c 93       	st	X, r24
}
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <__vector_3>:
/*
 * Description:
 * Calls the call back function of timer 2 in case of compare match interrupt occurs.
 */
ISR( TIMER2_COMP_vect )
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR)
    1818:	80 91 30 01 	lds	r24, 0x0130
    181c:	90 91 31 01 	lds	r25, 0x0131
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	29 f0       	breq	.+10     	; 0x182e <__vector_3+0x40>
	{
		(*g_timer2CallBackPtr)();
    1824:	e0 91 30 01 	lds	r30, 0x0130
    1828:	f0 91 31 01 	lds	r31, 0x0131
    182c:	09 95       	icall
	}
	TIFR |= OCF2;
    182e:	a8 e5       	ldi	r26, 0x58	; 88
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e8 e5       	ldi	r30, 0x58	; 88
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	87 60       	ori	r24, 0x07	; 7
    183a:	8c 93       	st	X, r24
}
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	0f 90       	pop	r0
    185e:	1f 90       	pop	r1
    1860:	18 95       	reti

00001862 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init( UART_ConfigType* config )
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <UART_init+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <UART_init+0x8>
    186a:	00 d0       	rcall	.+0      	; 0x186c <UART_init+0xa>
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1874:	1a 82       	std	Y+2, r1	; 0x02
    1876:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1878:	eb e2       	ldi	r30, 0x2B	; 43
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 initially and i will change it later while i select the data bits.
	 * RXB8 & TXB8 not used for 8-bit data mode /////////
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1880:	ea e2       	ldi	r30, 0x2A	; 42
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	88 e1       	ldi	r24, 0x18	; 24
    1886:	80 83       	st	Z, r24
	 * USBS    = inserted according to configurations
	 * UCSZ1:0 = 11 For 8-bit data mode /////////////////////
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	/* Insert the value of parity type in bits 5:4, and number of stop bits according to configurations.*/
	UCSRC = (1<<URSEL) | ((UCSRC&~(0x30))|((config->parity)<<4)) | ((config->stopBits)<<USBS);
    1888:	a0 e4       	ldi	r26, 0x40	; 64
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e0 e4       	ldi	r30, 0x40	; 64
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	28 2f       	mov	r18, r24
    1894:	2f 7c       	andi	r18, 0xCF	; 207
    1896:	eb 81       	ldd	r30, Y+3	; 0x03
    1898:	fc 81       	ldd	r31, Y+4	; 0x04
    189a:	83 81       	ldd	r24, Z+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	82 95       	swap	r24
    18a2:	92 95       	swap	r25
    18a4:	90 7f       	andi	r25, 0xF0	; 240
    18a6:	98 27       	eor	r25, r24
    18a8:	80 7f       	andi	r24, 0xF0	; 240
    18aa:	98 27       	eor	r25, r24
    18ac:	82 2b       	or	r24, r18
    18ae:	28 2f       	mov	r18, r24
    18b0:	20 68       	ori	r18, 0x80	; 128
    18b2:	eb 81       	ldd	r30, Y+3	; 0x03
    18b4:	fc 81       	ldd	r31, Y+4	; 0x04
    18b6:	84 81       	ldd	r24, Z+4	; 0x04
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	82 2b       	or	r24, r18
    18ca:	8c 93       	st	X, r24

	/* Configure registers according to required data bits*/
	switch(config->dataLength)
    18cc:	eb 81       	ldd	r30, Y+3	; 0x03
    18ce:	fc 81       	ldd	r31, Y+4	; 0x04
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3e 83       	std	Y+6, r19	; 0x06
    18d8:	2d 83       	std	Y+5, r18	; 0x05
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	99 23       	and	r25, r25
    18e0:	34 f1       	brlt	.+76     	; 0x192e <UART_init+0xcc>
    18e2:	2d 81       	ldd	r18, Y+5	; 0x05
    18e4:	3e 81       	ldd	r19, Y+6	; 0x06
    18e6:	24 30       	cpi	r18, 0x04	; 4
    18e8:	31 05       	cpc	r19, r1
    18ea:	34 f0       	brlt	.+12     	; 0x18f8 <UART_init+0x96>
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	91 05       	cpc	r25, r1
    18f4:	71 f0       	breq	.+28     	; 0x1912 <UART_init+0xb0>
    18f6:	1b c0       	rjmp	.+54     	; 0x192e <UART_init+0xcc>
	case BITS_5:
	case BITS_6:
	case BITS_7:
	case BITS_8:
		/* Keep UCSZ2 at UCSRB register 0 as it is and insert number of bits on UCSRC register at first 2 bits.*/
		UCSRC = (UCSRC&~(0x03))|(config->dataLength);
    18f8:	a0 e4       	ldi	r26, 0x40	; 64
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e0 e4       	ldi	r30, 0x40	; 64
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	98 2f       	mov	r25, r24
    1904:	9c 7f       	andi	r25, 0xFC	; 252
    1906:	eb 81       	ldd	r30, Y+3	; 0x03
    1908:	fc 81       	ldd	r31, Y+4	; 0x04
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	89 2b       	or	r24, r25
    190e:	8c 93       	st	X, r24
    1910:	0e c0       	rjmp	.+28     	; 0x192e <UART_init+0xcc>
		break;
	case BITS_9:
		/* Set UCSZ2 at UCSRB register to 1 and insert 0b11 at first 2 bits.*/
		UCSRB |= (1<<UCSZ2);
    1912:	aa e2       	ldi	r26, 0x2A	; 42
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ea e2       	ldi	r30, 0x2A	; 42
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	84 60       	ori	r24, 0x04	; 4
    191e:	8c 93       	st	X, r24
		UCSRC |= 0x03;
    1920:	a0 e4       	ldi	r26, 0x40	; 64
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e0 e4       	ldi	r30, 0x40	; 64
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	83 60       	ori	r24, 0x03	; 3
    192c:	8c 93       	st	X, r24
		break;
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->bitRate * 8UL))) - 1);
    192e:	eb 81       	ldd	r30, Y+3	; 0x03
    1930:	fc 81       	ldd	r31, Y+4	; 0x04
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	cc 01       	movw	r24, r24
    1938:	a0 e0       	ldi	r26, 0x00	; 0
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	aa 1f       	adc	r26, r26
    1942:	bb 1f       	adc	r27, r27
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	aa 1f       	adc	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	aa 1f       	adc	r26, r26
    1952:	bb 1f       	adc	r27, r27
    1954:	9c 01       	movw	r18, r24
    1956:	ad 01       	movw	r20, r26
    1958:	80 e4       	ldi	r24, 0x40	; 64
    195a:	92 e4       	ldi	r25, 0x42	; 66
    195c:	af e0       	ldi	r26, 0x0F	; 15
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__udivmodsi4>
    1968:	da 01       	movw	r26, r20
    196a:	c9 01       	movw	r24, r18
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1972:	e0 e4       	ldi	r30, 0x40	; 64
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	9a 81       	ldd	r25, Y+2	; 0x02
    197a:	89 2f       	mov	r24, r25
    197c:	99 27       	eor	r25, r25
    197e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1980:	e9 e2       	ldi	r30, 0x29	; 41
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	80 83       	st	Z, r24
}
    1988:	26 96       	adiw	r28, 0x06	; 6
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    19a6:	eb e2       	ldi	r30, 0x2B	; 43
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	80 72       	andi	r24, 0x20	; 32
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	b9 f3       	breq	.-18     	; 0x19a6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    19b8:	ec e2       	ldi	r30, 0x2C	; 44
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    19d0:	eb e2       	ldi	r30, 0x2B	; 43
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	88 23       	and	r24, r24
    19d8:	dc f7       	brge	.-10     	; 0x19d0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    19da:	ec e2       	ldi	r30, 0x2C	; 44
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
}
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <UART_sendString+0x6>
    19ec:	0f 92       	push	r0
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	9b 83       	std	Y+3, r25	; 0x03
    19f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19f6:	19 82       	std	Y+1, r1	; 0x01
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	9b 81       	ldd	r25, Y+3	; 0x03
    1a04:	fc 01       	movw	r30, r24
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	80 81       	ld	r24, Z
    1a0c:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_sendByte>
		i++;
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	fc 01       	movw	r30, r24
    1a22:	e2 0f       	add	r30, r18
    1a24:	f3 1f       	adc	r31, r19
    1a26:	80 81       	ld	r24, Z
    1a28:	88 23       	and	r24, r24
    1a2a:	39 f7       	brne	.-50     	; 0x19fa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <UART_receiveString+0xa>
    1a42:	0f 92       	push	r0
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	9b 83       	std	Y+3, r25	; 0x03
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a4c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	8c 01       	movw	r16, r24
    1a5a:	02 0f       	add	r16, r18
    1a5c:	13 1f       	adc	r17, r19
    1a5e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
    1a62:	f8 01       	movw	r30, r16
    1a64:	80 83       	st	Z, r24
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	9b 81       	ldd	r25, Y+3	; 0x03
    1a78:	8c 01       	movw	r16, r24
    1a7a:	02 0f       	add	r16, r18
    1a7c:	13 1f       	adc	r17, r19
    1a7e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_recieveByte>
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a90:	fc 01       	movw	r30, r24
    1a92:	e2 0f       	add	r30, r18
    1a94:	f3 1f       	adc	r31, r19
    1a96:	80 81       	ld	r24, Z
    1a98:	83 32       	cpi	r24, 0x23	; 35
    1a9a:	31 f7       	brne	.-52     	; 0x1a68 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e2 0f       	add	r30, r18
    1aaa:	f3 1f       	adc	r31, r19
    1aac:	10 82       	st	Z, r1
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <__udivmodsi4>:
    1abe:	a1 e2       	ldi	r26, 0x21	; 33
    1ac0:	1a 2e       	mov	r1, r26
    1ac2:	aa 1b       	sub	r26, r26
    1ac4:	bb 1b       	sub	r27, r27
    1ac6:	fd 01       	movw	r30, r26
    1ac8:	0d c0       	rjmp	.+26     	; 0x1ae4 <__udivmodsi4_ep>

00001aca <__udivmodsi4_loop>:
    1aca:	aa 1f       	adc	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	ee 1f       	adc	r30, r30
    1ad0:	ff 1f       	adc	r31, r31
    1ad2:	a2 17       	cp	r26, r18
    1ad4:	b3 07       	cpc	r27, r19
    1ad6:	e4 07       	cpc	r30, r20
    1ad8:	f5 07       	cpc	r31, r21
    1ada:	20 f0       	brcs	.+8      	; 0x1ae4 <__udivmodsi4_ep>
    1adc:	a2 1b       	sub	r26, r18
    1ade:	b3 0b       	sbc	r27, r19
    1ae0:	e4 0b       	sbc	r30, r20
    1ae2:	f5 0b       	sbc	r31, r21

00001ae4 <__udivmodsi4_ep>:
    1ae4:	66 1f       	adc	r22, r22
    1ae6:	77 1f       	adc	r23, r23
    1ae8:	88 1f       	adc	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	1a 94       	dec	r1
    1aee:	69 f7       	brne	.-38     	; 0x1aca <__udivmodsi4_loop>
    1af0:	60 95       	com	r22
    1af2:	70 95       	com	r23
    1af4:	80 95       	com	r24
    1af6:	90 95       	com	r25
    1af8:	9b 01       	movw	r18, r22
    1afa:	ac 01       	movw	r20, r24
    1afc:	bd 01       	movw	r22, r26
    1afe:	cf 01       	movw	r24, r30
    1b00:	08 95       	ret

00001b02 <itoa>:
    1b02:	fb 01       	movw	r30, r22
    1b04:	9f 01       	movw	r18, r30
    1b06:	e8 94       	clt
    1b08:	42 30       	cpi	r20, 0x02	; 2
    1b0a:	c4 f0       	brlt	.+48     	; 0x1b3c <itoa+0x3a>
    1b0c:	45 32       	cpi	r20, 0x25	; 37
    1b0e:	b4 f4       	brge	.+44     	; 0x1b3c <itoa+0x3a>
    1b10:	4a 30       	cpi	r20, 0x0A	; 10
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <itoa+0x1c>
    1b14:	97 fb       	bst	r25, 7
    1b16:	1e f4       	brtc	.+6      	; 0x1b1e <itoa+0x1c>
    1b18:	90 95       	com	r25
    1b1a:	81 95       	neg	r24
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	64 2f       	mov	r22, r20
    1b20:	77 27       	eor	r23, r23
    1b22:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__udivmodhi4>
    1b26:	80 5d       	subi	r24, 0xD0	; 208
    1b28:	8a 33       	cpi	r24, 0x3A	; 58
    1b2a:	0c f0       	brlt	.+2      	; 0x1b2e <itoa+0x2c>
    1b2c:	89 5d       	subi	r24, 0xD9	; 217
    1b2e:	81 93       	st	Z+, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	a1 f7       	brne	.-24     	; 0x1b1e <itoa+0x1c>
    1b36:	16 f4       	brtc	.+4      	; 0x1b3c <itoa+0x3a>
    1b38:	5d e2       	ldi	r21, 0x2D	; 45
    1b3a:	51 93       	st	Z+, r21
    1b3c:	10 82       	st	Z, r1
    1b3e:	c9 01       	movw	r24, r18
    1b40:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <strrev>

00001b44 <strrev>:
    1b44:	dc 01       	movw	r26, r24
    1b46:	fc 01       	movw	r30, r24
    1b48:	67 2f       	mov	r22, r23
    1b4a:	71 91       	ld	r23, Z+
    1b4c:	77 23       	and	r23, r23
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <strrev+0x4>
    1b50:	32 97       	sbiw	r30, 0x02	; 2
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <strrev+0x18>
    1b54:	7c 91       	ld	r23, X
    1b56:	6d 93       	st	X+, r22
    1b58:	70 83       	st	Z, r23
    1b5a:	62 91       	ld	r22, -Z
    1b5c:	ae 17       	cp	r26, r30
    1b5e:	bf 07       	cpc	r27, r31
    1b60:	c8 f3       	brcs	.-14     	; 0x1b54 <strrev+0x10>
    1b62:	08 95       	ret

00001b64 <__udivmodhi4>:
    1b64:	aa 1b       	sub	r26, r26
    1b66:	bb 1b       	sub	r27, r27
    1b68:	51 e1       	ldi	r21, 0x11	; 17
    1b6a:	07 c0       	rjmp	.+14     	; 0x1b7a <__udivmodhi4_ep>

00001b6c <__udivmodhi4_loop>:
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	a6 17       	cp	r26, r22
    1b72:	b7 07       	cpc	r27, r23
    1b74:	10 f0       	brcs	.+4      	; 0x1b7a <__udivmodhi4_ep>
    1b76:	a6 1b       	sub	r26, r22
    1b78:	b7 0b       	sbc	r27, r23

00001b7a <__udivmodhi4_ep>:
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	5a 95       	dec	r21
    1b80:	a9 f7       	brne	.-22     	; 0x1b6c <__udivmodhi4_loop>
    1b82:	80 95       	com	r24
    1b84:	90 95       	com	r25
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	08 95       	ret

00001b8c <_exit>:
    1b8c:	f8 94       	cli

00001b8e <__stop_program>:
    1b8e:	ff cf       	rjmp	.-2      	; 0x1b8e <__stop_program>
