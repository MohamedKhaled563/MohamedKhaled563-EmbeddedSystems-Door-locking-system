
HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00002fda  0000306e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080011a  0080011a  00003128  2**0
                  ALLOC
  3 .stab         00002dfc  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000107a  00000000  00000000  00005f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000724e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e0       	ldi	r26, 0x0D	; 13
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e0       	ldi	r24, 0x0D	; 13
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 password[PASSWORD_LENGTH];
uint8 reEnteredPassword[PASSWORD_LENGTH];
uint8 tryingPassword[PASSWORD_LENGTH];

int main ( void )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType config = {9600,BITS_8,NO_PARITY,ONE_STOP_BIT};
     b5a:	ce 01       	movw	r24, r28
     b5c:	40 96       	adiw	r24, 0x10	; 16
     b5e:	9e 8b       	std	Y+22, r25	; 0x16
     b60:	8d 8b       	std	Y+21, r24	; 0x15
     b62:	e5 e1       	ldi	r30, 0x15	; 21
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	f8 8f       	std	Y+24, r31	; 0x18
     b68:	ef 8b       	std	Y+23, r30	; 0x17
     b6a:	f5 e0       	ldi	r31, 0x05	; 5
     b6c:	f9 8f       	std	Y+25, r31	; 0x19
     b6e:	ef 89       	ldd	r30, Y+23	; 0x17
     b70:	f8 8d       	ldd	r31, Y+24	; 0x18
     b72:	00 80       	ld	r0, Z
     b74:	8f 89       	ldd	r24, Y+23	; 0x17
     b76:	98 8d       	ldd	r25, Y+24	; 0x18
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	98 8f       	std	Y+24, r25	; 0x18
     b7c:	8f 8b       	std	Y+23, r24	; 0x17
     b7e:	ed 89       	ldd	r30, Y+21	; 0x15
     b80:	fe 89       	ldd	r31, Y+22	; 0x16
     b82:	00 82       	st	Z, r0
     b84:	8d 89       	ldd	r24, Y+21	; 0x15
     b86:	9e 89       	ldd	r25, Y+22	; 0x16
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9e 8b       	std	Y+22, r25	; 0x16
     b8c:	8d 8b       	std	Y+21, r24	; 0x15
     b8e:	99 8d       	ldd	r25, Y+25	; 0x19
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	99 8f       	std	Y+25, r25	; 0x19
     b94:	e9 8d       	ldd	r30, Y+25	; 0x19
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>
	UART_init(&config);
     b9a:	ce 01       	movw	r24, r28
     b9c:	40 96       	adiw	r24, 0x10	; 16
     b9e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <UART_init>

	LCD_init();
     ba2:	0e 94 61 11 	call	0x22c2	; 0x22c2 <LCD_init>
//			while(UART_recieveByte() != CONTROL_MCU_READY);
//			UART_sendByte(CONTROL_ERASE_SAVED_PASSWORD);
	while(UART_recieveByte() != CONTROL_MCU_READY);
     ba6:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
     baa:	80 31       	cpi	r24, 0x10	; 16
     bac:	e1 f7       	brne	.-8      	; 0xba6 <main+0x60>
	UART_sendByte(CONTROL_CHECK_SAVED_PASSWORD_FLAG);
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	UART_sendByte(HMI_MCU_READY);
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	uint8 flag = UART_recieveByte();
     bba:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
     bbe:	8f 87       	std	Y+15, r24	; 0x0f
	/* If there is no saved password, get one.*/
	if(flag == LOGIC_LOW)
     bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc2:	88 23       	and	r24, r24
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <main+0x82>
     bc6:	78 c0       	rjmp	.+240    	; 0xcb8 <main+0x172>
	{
		do
		{
			requestNewPassword();
     bc8:	0e 94 80 07 	call	0xf00	; 0xf00 <requestNewPassword>
		}while(	checkNewPassword() == LOGIC_LOW);
     bcc:	0e 94 92 09 	call	0x1324	; 0x1324 <checkNewPassword>
     bd0:	88 23       	and	r24, r24
     bd2:	d1 f3       	breq	.-12     	; 0xbc8 <main+0x82>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	aa e7       	ldi	r26, 0x7A	; 122
     bda:	b4 e4       	ldi	r27, 0x44	; 68
     bdc:	8b 87       	std	Y+11, r24	; 0x0b
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	ad 87       	std	Y+13, r26	; 0x0d
     be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a ef       	ldi	r20, 0xFA	; 250
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8f 83       	std	Y+7, r24	; 0x07
     bfe:	98 87       	std	Y+8, r25	; 0x08
     c00:	a9 87       	std	Y+9, r26	; 0x09
     c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c04:	6f 81       	ldd	r22, Y+7	; 0x07
     c06:	78 85       	ldd	r23, Y+8	; 0x08
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e8       	ldi	r20, 0x80	; 128
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <main+0xe0>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <main+0x15e>
	else if (__tmp > 65535)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	3f ef       	ldi	r19, 0xFF	; 255
     c32:	4f e7       	ldi	r20, 0x7F	; 127
     c34:	57 e4       	ldi	r21, 0x47	; 71
     c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c40:	7c 85       	ldd	r23, Y+12	; 0x0c
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	51 e4       	ldi	r21, 0x41	; 65
     c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <main+0x140>
     c68:	88 ec       	ldi	r24, 0xC8	; 200
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <main+0x12e>
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	69 f7       	brne	.-38     	; 0xc68 <main+0x122>
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9e 83       	std	Y+6, r25	; 0x06
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <main+0x16a>
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
	//	UART_sendByte(CONTROL_ERASE_SAVED_PASSWORD);


	while(1)
	{
		displayMainOptions();
     cb8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <displayMainOptions>
     cbc:	fd cf       	rjmp	.-6      	; 0xcb8 <main+0x172>

00000cbe <getPassword>:

	return 0;
}

void getPassword( uint8* pass, uint8* counter )
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	a1 97       	sbiw	r28, 0x21	; 33
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	9f 8f       	std	Y+31, r25	; 0x1f
     cd4:	8e 8f       	std	Y+30, r24	; 0x1e
     cd6:	79 a3       	std	Y+33, r23	; 0x21
     cd8:	68 a3       	std	Y+32, r22	; 0x20
	uint8 key;

	LCD_moveCursor(1, 0);
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
	*counter = 0;
     ce2:	e8 a1       	ldd	r30, Y+32	; 0x20
     ce4:	f9 a1       	ldd	r31, Y+33	; 0x21
     ce6:	10 82       	st	Z, r1

	while(1)
	{
		key = KEYPAD_getPressedKey();
     ce8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <KEYPAD_getPressedKey>
     cec:	8d 8f       	std	Y+29, r24	; 0x1d
		pass[*counter] = key;
     cee:	e8 a1       	ldd	r30, Y+32	; 0x20
     cf0:	f9 a1       	ldd	r31, Y+33	; 0x21
     cf2:	80 81       	ld	r24, Z
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cfc:	fc 01       	movw	r30, r24
     cfe:	e2 0f       	add	r30, r18
     d00:	f3 1f       	adc	r31, r19
     d02:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d04:	80 83       	st	Z, r24
		/*If user press enter -> end of edit.*/
		if(key == 13)
     d06:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d08:	8d 30       	cpi	r24, 0x0D	; 13
     d0a:	09 f0       	breq	.+2      	; 0xd0e <getPassword+0x50>
     d0c:	73 c0       	rjmp	.+230    	; 0xdf4 <getPassword+0x136>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	a8 ec       	ldi	r26, 0xC8	; 200
     d14:	b3 e4       	ldi	r27, 0x43	; 67
     d16:	89 8f       	std	Y+25, r24	; 0x19
     d18:	9a 8f       	std	Y+26, r25	; 0x1a
     d1a:	ab 8f       	std	Y+27, r26	; 0x1b
     d1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1e:	69 8d       	ldd	r22, Y+25	; 0x19
     d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a ef       	ldi	r20, 0xFA	; 250
     d2c:	54 e4       	ldi	r21, 0x44	; 68
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	8d 8b       	std	Y+21, r24	; 0x15
     d38:	9e 8b       	std	Y+22, r25	; 0x16
     d3a:	af 8b       	std	Y+23, r26	; 0x17
     d3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d3e:	6d 89       	ldd	r22, Y+21	; 0x15
     d40:	7e 89       	ldd	r23, Y+22	; 0x16
     d42:	8f 89       	ldd	r24, Y+23	; 0x17
     d44:	98 8d       	ldd	r25, Y+24	; 0x18
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d52:	88 23       	and	r24, r24
     d54:	2c f4       	brge	.+10     	; 0xd60 <getPassword+0xa2>
		__ticks = 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9c 8b       	std	Y+20, r25	; 0x14
     d5c:	8b 8b       	std	Y+19, r24	; 0x13
     d5e:	3f c0       	rjmp	.+126    	; 0xdde <getPassword+0x120>
	else if (__tmp > 65535)
     d60:	6d 89       	ldd	r22, Y+21	; 0x15
     d62:	7e 89       	ldd	r23, Y+22	; 0x16
     d64:	8f 89       	ldd	r24, Y+23	; 0x17
     d66:	98 8d       	ldd	r25, Y+24	; 0x18
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	3f ef       	ldi	r19, 0xFF	; 255
     d6c:	4f e7       	ldi	r20, 0x7F	; 127
     d6e:	57 e4       	ldi	r21, 0x47	; 71
     d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d74:	18 16       	cp	r1, r24
     d76:	4c f5       	brge	.+82     	; 0xdca <getPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d78:	69 8d       	ldd	r22, Y+25	; 0x19
     d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	51 e4       	ldi	r21, 0x41	; 65
     d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	9c 8b       	std	Y+20, r25	; 0x14
     d9e:	8b 8b       	std	Y+19, r24	; 0x13
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <getPassword+0x102>
     da2:	88 ec       	ldi	r24, 0xC8	; 200
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9a 8b       	std	Y+18, r25	; 0x12
     da8:	89 8b       	std	Y+17, r24	; 0x11
     daa:	89 89       	ldd	r24, Y+17	; 0x11
     dac:	9a 89       	ldd	r25, Y+18	; 0x12
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <getPassword+0xf0>
     db2:	9a 8b       	std	Y+18, r25	; 0x12
     db4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db6:	8b 89       	ldd	r24, Y+19	; 0x13
     db8:	9c 89       	ldd	r25, Y+20	; 0x14
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	9c 8b       	std	Y+20, r25	; 0x14
     dbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	8b 89       	ldd	r24, Y+19	; 0x13
     dc2:	9c 89       	ldd	r25, Y+20	; 0x14
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	69 f7       	brne	.-38     	; 0xda2 <getPassword+0xe4>
     dc8:	92 c0       	rjmp	.+292    	; 0xeee <getPassword+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dca:	6d 89       	ldd	r22, Y+21	; 0x15
     dcc:	7e 89       	ldd	r23, Y+22	; 0x16
     dce:	8f 89       	ldd	r24, Y+23	; 0x17
     dd0:	98 8d       	ldd	r25, Y+24	; 0x18
     dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	8b 89       	ldd	r24, Y+19	; 0x13
     de0:	9c 89       	ldd	r25, Y+20	; 0x14
     de2:	98 8b       	std	Y+16, r25	; 0x10
     de4:	8f 87       	std	Y+15, r24	; 0x0f
     de6:	8f 85       	ldd	r24, Y+15	; 0x0f
     de8:	98 89       	ldd	r25, Y+16	; 0x10
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <getPassword+0x12c>
     dee:	98 8b       	std	Y+16, r25	; 0x10
     df0:	8f 87       	std	Y+15, r24	; 0x0f
     df2:	7d c0       	rjmp	.+250    	; 0xeee <getPassword+0x230>
		{
			_delay_ms(400);
			break;
		}
		LCD_displayCharacter('*');
     df4:	8a e2       	ldi	r24, 0x2A	; 42
     df6:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_displayCharacter>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a8 ec       	ldi	r26, 0xC8	; 200
     e00:	b3 e4       	ldi	r27, 0x43	; 67
     e02:	8b 87       	std	Y+11, r24	; 0x0b
     e04:	9c 87       	std	Y+12, r25	; 0x0c
     e06:	ad 87       	std	Y+13, r26	; 0x0d
     e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8f 83       	std	Y+7, r24	; 0x07
     e24:	98 87       	std	Y+8, r25	; 0x08
     e26:	a9 87       	std	Y+9, r26	; 0x09
     e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <getPassword+0x18e>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <getPassword+0x20c>
	else if (__tmp > 65535)
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	89 85       	ldd	r24, Y+9	; 0x09
     e52:	9a 85       	ldd	r25, Y+10	; 0x0a
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <getPassword+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	6b 85       	ldd	r22, Y+11	; 0x0b
     e66:	7c 85       	ldd	r23, Y+12	; 0x0c
     e68:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <getPassword+0x1ee>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <getPassword+0x1dc>
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <getPassword+0x1d0>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <getPassword+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <getPassword+0x218>
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		(*counter)++;
     ede:	e8 a1       	ldd	r30, Y+32	; 0x20
     ee0:	f9 a1       	ldd	r31, Y+33	; 0x21
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 5f       	subi	r24, 0xFF	; 255
     ee6:	e8 a1       	ldd	r30, Y+32	; 0x20
     ee8:	f9 a1       	ldd	r31, Y+33	; 0x21
     eea:	80 83       	st	Z, r24
     eec:	fd ce       	rjmp	.-518    	; 0xce8 <getPassword+0x2a>
	}
}
     eee:	a1 96       	adiw	r28, 0x21	; 33
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <requestNewPassword>:

void requestNewPassword( void )
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <requestNewPassword+0x6>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <requestNewPassword+0x8>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <requestNewPassword+0xa>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	8d 83       	std	Y+5, r24	; 0x05
	LCD_clearScreen();
     f12:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
     f16:	1a c0       	rjmp	.+52     	; 0xf4c <requestNewPassword+0x4c>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     f18:	1d 82       	std	Y+5, r1	; 0x05
		/* Request new password from user and then press Enter key*/
		LCD_displayString("Enter new pass.:");
     f1a:	80 e6       	ldi	r24, 0x60	; 96
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		getPassword(password, &passLength);
     f22:	8a e1       	ldi	r24, 0x1A	; 26
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	9e 01       	movw	r18, r28
     f28:	2a 5f       	subi	r18, 0xFA	; 250
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	b9 01       	movw	r22, r18
     f2e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <getPassword>
		uint8 result = checkPasswordLength( passLength );
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <checkPasswordLength>
     f38:	8c 83       	std	Y+4, r24	; 0x04

		if(result == LOGIC_LOW)
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	88 23       	and	r24, r24
     f3e:	31 f4       	brne	.+12     	; 0xf4c <requestNewPassword+0x4c>
		{
			errorFlag = LOGIC_HIGH;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	8d 83       	std	Y+5, r24	; 0x05
			Error error = PASSWORD_LENGTH_ERROR;
     f44:	1b 82       	std	Y+3, r1	; 0x03
			displayError(error);
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <displayError>
{
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
	LCD_clearScreen();
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	19 f3       	breq	.-58     	; 0xf18 <requestNewPassword+0x18>
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}

	LCD_clearScreen();
     f52:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>

	errorFlag = LOGIC_HIGH;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	1a c0       	rjmp	.+52     	; 0xf90 <requestNewPassword+0x90>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     f5c:	1d 82       	std	Y+5, r1	; 0x05
		LCD_displayString("Re-enter pass.:");
     f5e:	81 e7       	ldi	r24, 0x71	; 113
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		getPassword(reEnteredPassword, &passLength);
     f66:	8f e1       	ldi	r24, 0x1F	; 31
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	9e 01       	movw	r18, r28
     f6c:	2a 5f       	subi	r18, 0xFA	; 250
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	b9 01       	movw	r22, r18
     f72:	0e 94 5f 06 	call	0xcbe	; 0xcbe <getPassword>

		uint8 result = checkPasswordLength( passLength );
     f76:	8e 81       	ldd	r24, Y+6	; 0x06
     f78:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <checkPasswordLength>
     f7c:	8a 83       	std	Y+2, r24	; 0x02

		if(result == LOGIC_LOW)
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 23       	and	r24, r24
     f82:	31 f4       	brne	.+12     	; 0xf90 <requestNewPassword+0x90>
		{
			errorFlag = LOGIC_HIGH;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	8d 83       	std	Y+5, r24	; 0x05
			Error error = PASSWORD_LENGTH_ERROR;
     f88:	19 82       	std	Y+1, r1	; 0x01
			displayError(error);
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <displayError>

	LCD_clearScreen();

	errorFlag = LOGIC_HIGH;
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	19 f3       	breq	.-58     	; 0xf5c <requestNewPassword+0x5c>
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}

}
     f96:	26 96       	adiw	r28, 0x06	; 6
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <displayError>:

void displayError( Error error )
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	ad 97       	sbiw	r28, 0x2d	; 45
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	8b a7       	std	Y+43, r24	; 0x2b
	switch(error)
     fbe:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3d a7       	std	Y+45, r19	; 0x2d
     fc6:	2c a7       	std	Y+44, r18	; 0x2c
     fc8:	8c a5       	ldd	r24, Y+44	; 0x2c
     fca:	9d a5       	ldd	r25, Y+45	; 0x2d
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <displayError+0x2c>
     fd2:	92 c0       	rjmp	.+292    	; 0x10f8 <displayError+0x150>
     fd4:	2c a5       	ldd	r18, Y+44	; 0x2c
     fd6:	3d a5       	ldd	r19, Y+45	; 0x2d
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <displayError+0x38>
     fde:	13 c1       	rjmp	.+550    	; 0x1206 <displayError+0x25e>
     fe0:	8c a5       	ldd	r24, Y+44	; 0x2c
     fe2:	9d a5       	ldd	r25, Y+45	; 0x2d
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	09 f0       	breq	.+2      	; 0xfea <displayError+0x42>
     fe8:	94 c1       	rjmp	.+808    	; 0x1312 <displayError+0x36a>
	{
	case PASSWORD_LENGTH_ERROR:
		LCD_clearScreen();
     fea:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("Password must be");
     ff6:	81 e8       	ldi	r24, 0x81	; 129
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		LCD_moveCursor(1, 0);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("5 characters");
    1006:	82 e9       	ldi	r24, 0x92	; 146
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	aa e7       	ldi	r26, 0x7A	; 122
    1014:	b4 e4       	ldi	r27, 0x44	; 68
    1016:	8f a3       	std	Y+39, r24	; 0x27
    1018:	98 a7       	std	Y+40, r25	; 0x28
    101a:	a9 a7       	std	Y+41, r26	; 0x29
    101c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101e:	6f a1       	ldd	r22, Y+39	; 0x27
    1020:	78 a5       	ldd	r23, Y+40	; 0x28
    1022:	89 a5       	ldd	r24, Y+41	; 0x29
    1024:	9a a5       	ldd	r25, Y+42	; 0x2a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a ef       	ldi	r20, 0xFA	; 250
    102c:	54 e4       	ldi	r21, 0x44	; 68
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8b a3       	std	Y+35, r24	; 0x23
    1038:	9c a3       	std	Y+36, r25	; 0x24
    103a:	ad a3       	std	Y+37, r26	; 0x25
    103c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    103e:	6b a1       	ldd	r22, Y+35	; 0x23
    1040:	7c a1       	ldd	r23, Y+36	; 0x24
    1042:	8d a1       	ldd	r24, Y+37	; 0x25
    1044:	9e a1       	ldd	r25, Y+38	; 0x26
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1052:	88 23       	and	r24, r24
    1054:	2c f4       	brge	.+10     	; 0x1060 <displayError+0xb8>
		__ticks = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9a a3       	std	Y+34, r25	; 0x22
    105c:	89 a3       	std	Y+33, r24	; 0x21
    105e:	3f c0       	rjmp	.+126    	; 0x10de <displayError+0x136>
	else if (__tmp > 65535)
    1060:	6b a1       	ldd	r22, Y+35	; 0x23
    1062:	7c a1       	ldd	r23, Y+36	; 0x24
    1064:	8d a1       	ldd	r24, Y+37	; 0x25
    1066:	9e a1       	ldd	r25, Y+38	; 0x26
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1074:	18 16       	cp	r1, r24
    1076:	4c f5       	brge	.+82     	; 0x10ca <displayError+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1078:	6f a1       	ldd	r22, Y+39	; 0x27
    107a:	78 a5       	ldd	r23, Y+40	; 0x28
    107c:	89 a5       	ldd	r24, Y+41	; 0x29
    107e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <displayError+0x118>
    10a2:	88 ec       	ldi	r24, 0xC8	; 200
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	98 a3       	std	Y+32, r25	; 0x20
    10a8:	8f 8f       	std	Y+31, r24	; 0x1f
    10aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ac:	98 a1       	ldd	r25, Y+32	; 0x20
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <displayError+0x106>
    10b2:	98 a3       	std	Y+32, r25	; 0x20
    10b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	89 a1       	ldd	r24, Y+33	; 0x21
    10b8:	9a a1       	ldd	r25, Y+34	; 0x22
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9a a3       	std	Y+34, r25	; 0x22
    10be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c0:	89 a1       	ldd	r24, Y+33	; 0x21
    10c2:	9a a1       	ldd	r25, Y+34	; 0x22
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <displayError+0xfa>
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <displayError+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ca:	6b a1       	ldd	r22, Y+35	; 0x23
    10cc:	7c a1       	ldd	r23, Y+36	; 0x24
    10ce:	8d a1       	ldd	r24, Y+37	; 0x25
    10d0:	9e a1       	ldd	r25, Y+38	; 0x26
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9a a3       	std	Y+34, r25	; 0x22
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	89 a1       	ldd	r24, Y+33	; 0x21
    10e0:	9a a1       	ldd	r25, Y+34	; 0x22
    10e2:	9e 8f       	std	Y+30, r25	; 0x1e
    10e4:	8d 8f       	std	Y+29, r24	; 0x1d
    10e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <displayError+0x142>
    10ee:	9e 8f       	std	Y+30, r25	; 0x1e
    10f0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_clearScreen();
    10f2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
    10f6:	0d c1       	rjmp	.+538    	; 0x1312 <displayError+0x36a>
		break;
	case PASSWORD_REENTERING_ERROR:
		LCD_clearScreen();
    10f8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		LCD_moveCursor(0, 6);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	66 e0       	ldi	r22, 0x06	; 6
    1100:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("Error");
    1104:	8f e9       	ldi	r24, 0x9F	; 159
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		LCD_moveCursor(1, 3);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	63 e0       	ldi	r22, 0x03	; 3
    1110:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("Try Again");
    1114:	85 ea       	ldi	r24, 0xA5	; 165
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	aa e7       	ldi	r26, 0x7A	; 122
    1122:	b4 e4       	ldi	r27, 0x44	; 68
    1124:	89 8f       	std	Y+25, r24	; 0x19
    1126:	9a 8f       	std	Y+26, r25	; 0x1a
    1128:	ab 8f       	std	Y+27, r26	; 0x1b
    112a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	69 8d       	ldd	r22, Y+25	; 0x19
    112e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8d 8b       	std	Y+21, r24	; 0x15
    1146:	9e 8b       	std	Y+22, r25	; 0x16
    1148:	af 8b       	std	Y+23, r26	; 0x17
    114a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114c:	6d 89       	ldd	r22, Y+21	; 0x15
    114e:	7e 89       	ldd	r23, Y+22	; 0x16
    1150:	8f 89       	ldd	r24, Y+23	; 0x17
    1152:	98 8d       	ldd	r25, Y+24	; 0x18
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <displayError+0x1c6>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9c 8b       	std	Y+20, r25	; 0x14
    116a:	8b 8b       	std	Y+19, r24	; 0x13
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <displayError+0x244>
	else if (__tmp > 65535)
    116e:	6d 89       	ldd	r22, Y+21	; 0x15
    1170:	7e 89       	ldd	r23, Y+22	; 0x16
    1172:	8f 89       	ldd	r24, Y+23	; 0x17
    1174:	98 8d       	ldd	r25, Y+24	; 0x18
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <displayError+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	69 8d       	ldd	r22, Y+25	; 0x19
    1188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9c 8b       	std	Y+20, r25	; 0x14
    11ac:	8b 8b       	std	Y+19, r24	; 0x13
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <displayError+0x226>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9a 8b       	std	Y+18, r25	; 0x12
    11b6:	89 8b       	std	Y+17, r24	; 0x11
    11b8:	89 89       	ldd	r24, Y+17	; 0x11
    11ba:	9a 89       	ldd	r25, Y+18	; 0x12
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <displayError+0x214>
    11c0:	9a 8b       	std	Y+18, r25	; 0x12
    11c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8b 89       	ldd	r24, Y+19	; 0x13
    11c6:	9c 89       	ldd	r25, Y+20	; 0x14
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8b 89       	ldd	r24, Y+19	; 0x13
    11d0:	9c 89       	ldd	r25, Y+20	; 0x14
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <displayError+0x208>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <displayError+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6d 89       	ldd	r22, Y+21	; 0x15
    11da:	7e 89       	ldd	r23, Y+22	; 0x16
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9c 8b       	std	Y+20, r25	; 0x14
    11ea:	8b 8b       	std	Y+19, r24	; 0x13
    11ec:	8b 89       	ldd	r24, Y+19	; 0x13
    11ee:	9c 89       	ldd	r25, Y+20	; 0x14
    11f0:	98 8b       	std	Y+16, r25	; 0x10
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
    11f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f6:	98 89       	ldd	r25, Y+16	; 0x10
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <displayError+0x250>
    11fc:	98 8b       	std	Y+16, r25	; 0x10
    11fe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_clearScreen();
    1200:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
    1204:	86 c0       	rjmp	.+268    	; 0x1312 <displayError+0x36a>
		break;
	case PASSWORD_INCORRECT:
		LCD_clearScreen();
    1206:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		LCD_moveCursor(0, 6);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	66 e0       	ldi	r22, 0x06	; 6
    120e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("Error");
    1212:	8f e9       	ldi	r24, 0x9F	; 159
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		LCD_moveCursor(1, 0);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("Incorrect Pass.");
    1222:	8f ea       	ldi	r24, 0xAF	; 175
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	aa e7       	ldi	r26, 0x7A	; 122
    1230:	b4 e4       	ldi	r27, 0x44	; 68
    1232:	8b 87       	std	Y+11, r24	; 0x0b
    1234:	9c 87       	std	Y+12, r25	; 0x0c
    1236:	ad 87       	std	Y+13, r26	; 0x0d
    1238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123a:	6b 85       	ldd	r22, Y+11	; 0x0b
    123c:	7c 85       	ldd	r23, Y+12	; 0x0c
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	4a ef       	ldi	r20, 0xFA	; 250
    1248:	54 e4       	ldi	r21, 0x44	; 68
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	8f 83       	std	Y+7, r24	; 0x07
    1254:	98 87       	std	Y+8, r25	; 0x08
    1256:	a9 87       	std	Y+9, r26	; 0x09
    1258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125a:	6f 81       	ldd	r22, Y+7	; 0x07
    125c:	78 85       	ldd	r23, Y+8	; 0x08
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <displayError+0x2d4>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <displayError+0x352>
	else if (__tmp > 65535)
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	57 e4       	ldi	r21, 0x47	; 71
    128c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1290:	18 16       	cp	r1, r24
    1292:	4c f5       	brge	.+82     	; 0x12e6 <displayError+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1294:	6b 85       	ldd	r22, Y+11	; 0x0b
    1296:	7c 85       	ldd	r23, Y+12	; 0x0c
    1298:	8d 85       	ldd	r24, Y+13	; 0x0d
    129a:	9e 85       	ldd	r25, Y+14	; 0x0e
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <displayError+0x334>
    12be:	88 ec       	ldi	r24, 0xC8	; 200
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <displayError+0x322>
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	69 f7       	brne	.-38     	; 0x12be <displayError+0x316>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <displayError+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <displayError+0x35e>
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    130e:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		break;
	}
}
    1312:	ad 96       	adiw	r28, 0x2d	; 45
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <checkNewPassword>:

uint8 checkNewPassword( void )
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	61 97       	sbiw	r28, 0x11	; 17
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
	while(UART_recieveByte() != CONTROL_MCU_READY);
    1338:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    133c:	80 31       	cpi	r24, 0x10	; 16
    133e:	e1 f7       	brne	.-8      	; 0x1338 <checkNewPassword+0x14>
	UART_sendByte(CONTROL_COMPARE_TWO_PASSWORDS);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
    1346:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    134a:	80 31       	cpi	r24, 0x10	; 16
    134c:	e1 f7       	brne	.-8      	; 0x1346 <checkNewPassword+0x22>
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    134e:	18 8a       	std	Y+16, r1	; 0x10
    1350:	0c c0       	rjmp	.+24     	; 0x136a <checkNewPassword+0x46>
	{
		UART_sendByte(password[i]);
    1352:	88 89       	ldd	r24, Y+16	; 0x10
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	fc 01       	movw	r30, r24
    135a:	e6 5e       	subi	r30, 0xE6	; 230
    135c:	fe 4f       	sbci	r31, 0xFE	; 254
    135e:	80 81       	ld	r24, Z
    1360:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	while(UART_recieveByte() != CONTROL_MCU_READY);
	UART_sendByte(CONTROL_COMPARE_TWO_PASSWORDS);

	while(UART_recieveByte() != CONTROL_MCU_READY);
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    1364:	88 89       	ldd	r24, Y+16	; 0x10
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	88 8b       	std	Y+16, r24	; 0x10
    136a:	88 89       	ldd	r24, Y+16	; 0x10
    136c:	85 30       	cpi	r24, 0x05	; 5
    136e:	88 f3       	brcs	.-30     	; 0x1352 <checkNewPassword+0x2e>
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    1370:	1f 86       	std	Y+15, r1	; 0x0f
    1372:	0c c0       	rjmp	.+24     	; 0x138c <checkNewPassword+0x68>
	{
		UART_sendByte(reEnteredPassword[i]);
    1374:	8f 85       	ldd	r24, Y+15	; 0x0f
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	fc 01       	movw	r30, r24
    137c:	e1 5e       	subi	r30, 0xE1	; 225
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	80 81       	ld	r24, Z
    1382:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    1386:	8f 85       	ldd	r24, Y+15	; 0x0f
    1388:	8f 5f       	subi	r24, 0xFF	; 255
    138a:	8f 87       	std	Y+15, r24	; 0x0f
    138c:	8f 85       	ldd	r24, Y+15	; 0x0f
    138e:	85 30       	cpi	r24, 0x05	; 5
    1390:	88 f3       	brcs	.-30     	; 0x1374 <checkNewPassword+0x50>
	{
		UART_sendByte(reEnteredPassword[i]);
	}

	UART_sendByte(HMI_MCU_READY);
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	uint8 compareResult = UART_recieveByte();
    1398:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    139c:	89 8b       	std	Y+17, r24	; 0x11

	if(compareResult)
    139e:	89 89       	ldd	r24, Y+17	; 0x11
    13a0:	88 23       	and	r24, r24
    13a2:	59 f0       	breq	.+22     	; 0x13ba <checkNewPassword+0x96>
	{
		LCD_clearScreen();
    13a4:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		LCD_moveCursor(0, 6);
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	66 e0       	ldi	r22, 0x06	; 6
    13ac:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("Match");
    13b0:	8f eb       	ldi	r24, 0xBF	; 191
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
    13b8:	0a c0       	rjmp	.+20     	; 0x13ce <checkNewPassword+0xaa>
	}
	else
	{
		LCD_clearScreen();
    13ba:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		LCD_moveCursor(0, 4);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	64 e0       	ldi	r22, 0x04	; 4
    13c2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
		LCD_displayString("Mis Match");
    13c6:	85 ec       	ldi	r24, 0xC5	; 197
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	aa e7       	ldi	r26, 0x7A	; 122
    13d4:	b4 e4       	ldi	r27, 0x44	; 68
    13d6:	8b 87       	std	Y+11, r24	; 0x0b
    13d8:	9c 87       	std	Y+12, r25	; 0x0c
    13da:	ad 87       	std	Y+13, r26	; 0x0d
    13dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	4a ef       	ldi	r20, 0xFA	; 250
    13ec:	54 e4       	ldi	r21, 0x44	; 68
    13ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8f 83       	std	Y+7, r24	; 0x07
    13f8:	98 87       	std	Y+8, r25	; 0x08
    13fa:	a9 87       	std	Y+9, r26	; 0x09
    13fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1412:	88 23       	and	r24, r24
    1414:	2c f4       	brge	.+10     	; 0x1420 <checkNewPassword+0xfc>
		__ticks = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	3f c0       	rjmp	.+126    	; 0x149e <checkNewPassword+0x17a>
	else if (__tmp > 65535)
    1420:	6f 81       	ldd	r22, Y+7	; 0x07
    1422:	78 85       	ldd	r23, Y+8	; 0x08
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	4f e7       	ldi	r20, 0x7F	; 127
    142e:	57 e4       	ldi	r21, 0x47	; 71
    1430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1434:	18 16       	cp	r1, r24
    1436:	4c f5       	brge	.+82     	; 0x148a <checkNewPassword+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1438:	6b 85       	ldd	r22, Y+11	; 0x0b
    143a:	7c 85       	ldd	r23, Y+12	; 0x0c
    143c:	8d 85       	ldd	r24, Y+13	; 0x0d
    143e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <checkNewPassword+0x15c>
    1462:	88 ec       	ldi	r24, 0xC8	; 200
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <checkNewPassword+0x14a>
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	69 f7       	brne	.-38     	; 0x1462 <checkNewPassword+0x13e>
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <checkNewPassword+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <checkNewPassword+0x186>
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(1000);
	return compareResult;
    14b2:	89 89       	ldd	r24, Y+17	; 0x11
}
    14b4:	61 96       	adiw	r28, 0x11	; 17
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <displayMainOptions>:

void displayMainOptions( void )
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	ee 97       	sbiw	r28, 0x3e	; 62
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    14da:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
	LCD_displayString("+ : Open Door.");
    14de:	8f ec       	ldi	r24, 0xCF	; 207
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
	LCD_moveCursor(1, 0);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
	LCD_displayString("- : Change Pass.");
    14ee:	8e ed       	ldi	r24, 0xDE	; 222
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
	uint8 key = KEYPAD_getPressedKey();
    14f6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <KEYPAD_getPressedKey>
    14fa:	8c af       	std	Y+60, r24	; 0x3c
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a8 ec       	ldi	r26, 0xC8	; 200
    1502:	b3 e4       	ldi	r27, 0x43	; 67
    1504:	8d ab       	std	Y+53, r24	; 0x35
    1506:	9e ab       	std	Y+54, r25	; 0x36
    1508:	af ab       	std	Y+55, r26	; 0x37
    150a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	6d a9       	ldd	r22, Y+53	; 0x35
    150e:	7e a9       	ldd	r23, Y+54	; 0x36
    1510:	8f a9       	ldd	r24, Y+55	; 0x37
    1512:	98 ad       	ldd	r25, Y+56	; 0x38
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a ef       	ldi	r20, 0xFA	; 250
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	89 ab       	std	Y+49, r24	; 0x31
    1526:	9a ab       	std	Y+50, r25	; 0x32
    1528:	ab ab       	std	Y+51, r26	; 0x33
    152a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    152c:	69 a9       	ldd	r22, Y+49	; 0x31
    152e:	7a a9       	ldd	r23, Y+50	; 0x32
    1530:	8b a9       	ldd	r24, Y+51	; 0x33
    1532:	9c a9       	ldd	r25, Y+52	; 0x34
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	2c f4       	brge	.+10     	; 0x154e <displayMainOptions+0x88>
		__ticks = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	98 ab       	std	Y+48, r25	; 0x30
    154a:	8f a7       	std	Y+47, r24	; 0x2f
    154c:	3f c0       	rjmp	.+126    	; 0x15cc <displayMainOptions+0x106>
	else if (__tmp > 65535)
    154e:	69 a9       	ldd	r22, Y+49	; 0x31
    1550:	7a a9       	ldd	r23, Y+50	; 0x32
    1552:	8b a9       	ldd	r24, Y+51	; 0x33
    1554:	9c a9       	ldd	r25, Y+52	; 0x34
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	4c f5       	brge	.+82     	; 0x15b8 <displayMainOptions+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1566:	6d a9       	ldd	r22, Y+53	; 0x35
    1568:	7e a9       	ldd	r23, Y+54	; 0x36
    156a:	8f a9       	ldd	r24, Y+55	; 0x37
    156c:	98 ad       	ldd	r25, Y+56	; 0x38
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	98 ab       	std	Y+48, r25	; 0x30
    158c:	8f a7       	std	Y+47, r24	; 0x2f
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <displayMainOptions+0xe8>
    1590:	88 ec       	ldi	r24, 0xC8	; 200
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9e a7       	std	Y+46, r25	; 0x2e
    1596:	8d a7       	std	Y+45, r24	; 0x2d
    1598:	8d a5       	ldd	r24, Y+45	; 0x2d
    159a:	9e a5       	ldd	r25, Y+46	; 0x2e
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <displayMainOptions+0xd6>
    15a0:	9e a7       	std	Y+46, r25	; 0x2e
    15a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a6:	98 a9       	ldd	r25, Y+48	; 0x30
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	98 ab       	std	Y+48, r25	; 0x30
    15ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b0:	98 a9       	ldd	r25, Y+48	; 0x30
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f7       	brne	.-38     	; 0x1590 <displayMainOptions+0xca>
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <displayMainOptions+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	69 a9       	ldd	r22, Y+49	; 0x31
    15ba:	7a a9       	ldd	r23, Y+50	; 0x32
    15bc:	8b a9       	ldd	r24, Y+51	; 0x33
    15be:	9c a9       	ldd	r25, Y+52	; 0x34
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	98 ab       	std	Y+48, r25	; 0x30
    15ca:	8f a7       	std	Y+47, r24	; 0x2f
    15cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ce:	98 a9       	ldd	r25, Y+48	; 0x30
    15d0:	9c a7       	std	Y+44, r25	; 0x2c
    15d2:	8b a7       	std	Y+43, r24	; 0x2b
    15d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    15d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <displayMainOptions+0x112>
    15dc:	9c a7       	std	Y+44, r25	; 0x2c
    15de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(400);
	switch(key)
    15e0:	8c ad       	ldd	r24, Y+60	; 0x3c
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3e af       	std	Y+62, r19	; 0x3e
    15e8:	2d af       	std	Y+61, r18	; 0x3d
    15ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ee:	8b 32       	cpi	r24, 0x2B	; 43
    15f0:	91 05       	cpc	r25, r1
    15f2:	39 f0       	breq	.+14     	; 0x1602 <displayMainOptions+0x13c>
    15f4:	2d ad       	ldd	r18, Y+61	; 0x3d
    15f6:	3e ad       	ldd	r19, Y+62	; 0x3e
    15f8:	2d 32       	cpi	r18, 0x2D	; 45
    15fa:	31 05       	cpc	r19, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <displayMainOptions+0x13a>
    15fe:	90 c1       	rjmp	.+800    	; 0x1920 <displayMainOptions+0x45a>
    1600:	ab c1       	rjmp	.+854    	; 0x1958 <displayMainOptions+0x492>
	{
	case '+':
		requestPassword();
    1602:	0e 94 b5 0c 	call	0x196a	; 0x196a <requestPassword>
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <displayMainOptions+0x150>
		while(!checkTryingPassword())
		{
			Error error = PASSWORD_INCORRECT;
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	8b af       	std	Y+59, r24	; 0x3b
			displayError(error);
    160c:	8b ad       	ldd	r24, Y+59	; 0x3b
    160e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <displayError>
			requestPassword();
    1612:	0e 94 b5 0c 	call	0x196a	; 0x196a <requestPassword>
	_delay_ms(400);
	switch(key)
	{
	case '+':
		requestPassword();
		while(!checkTryingPassword())
    1616:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <checkTryingPassword>
    161a:	88 23       	and	r24, r24
    161c:	a9 f3       	breq	.-22     	; 0x1608 <displayMainOptions+0x142>
		{
			Error error = PASSWORD_INCORRECT;
			displayError(error);
			requestPassword();
		}
		LCD_clearScreen();
    161e:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		LCD_displayString("Openning");
    1622:	8f ee       	ldi	r24, 0xEF	; 239
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		while(UART_recieveByte() != CONTROL_MCU_READY);
    162a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    162e:	80 31       	cpi	r24, 0x10	; 16
    1630:	e1 f7       	brne	.-8      	; 0x162a <displayMainOptions+0x164>
		UART_sendByte(CONTROL_MOTOR_ROTATE_CW);
    1632:	86 e0       	ldi	r24, 0x06	; 6
    1634:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	aa e7       	ldi	r26, 0x7A	; 122
    163e:	b4 e4       	ldi	r27, 0x44	; 68
    1640:	8f a3       	std	Y+39, r24	; 0x27
    1642:	98 a7       	std	Y+40, r25	; 0x28
    1644:	a9 a7       	std	Y+41, r26	; 0x29
    1646:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1648:	6f a1       	ldd	r22, Y+39	; 0x27
    164a:	78 a5       	ldd	r23, Y+40	; 0x28
    164c:	89 a5       	ldd	r24, Y+41	; 0x29
    164e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a ef       	ldi	r20, 0xFA	; 250
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	8b a3       	std	Y+35, r24	; 0x23
    1662:	9c a3       	std	Y+36, r25	; 0x24
    1664:	ad a3       	std	Y+37, r26	; 0x25
    1666:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1668:	6b a1       	ldd	r22, Y+35	; 0x23
    166a:	7c a1       	ldd	r23, Y+36	; 0x24
    166c:	8d a1       	ldd	r24, Y+37	; 0x25
    166e:	9e a1       	ldd	r25, Y+38	; 0x26
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	5f e3       	ldi	r21, 0x3F	; 63
    1678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <displayMainOptions+0x1c4>
		__ticks = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9a a3       	std	Y+34, r25	; 0x22
    1686:	89 a3       	std	Y+33, r24	; 0x21
    1688:	3f c0       	rjmp	.+126    	; 0x1708 <displayMainOptions+0x242>
	else if (__tmp > 65535)
    168a:	6b a1       	ldd	r22, Y+35	; 0x23
    168c:	7c a1       	ldd	r23, Y+36	; 0x24
    168e:	8d a1       	ldd	r24, Y+37	; 0x25
    1690:	9e a1       	ldd	r25, Y+38	; 0x26
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169e:	18 16       	cp	r1, r24
    16a0:	4c f5       	brge	.+82     	; 0x16f4 <displayMainOptions+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a2:	6f a1       	ldd	r22, Y+39	; 0x27
    16a4:	78 a5       	ldd	r23, Y+40	; 0x28
    16a6:	89 a5       	ldd	r24, Y+41	; 0x29
    16a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e2       	ldi	r20, 0x20	; 32
    16b0:	51 e4       	ldi	r21, 0x41	; 65
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9a a3       	std	Y+34, r25	; 0x22
    16c8:	89 a3       	std	Y+33, r24	; 0x21
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <displayMainOptions+0x224>
    16cc:	88 ec       	ldi	r24, 0xC8	; 200
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	98 a3       	std	Y+32, r25	; 0x20
    16d2:	8f 8f       	std	Y+31, r24	; 0x1f
    16d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16d6:	98 a1       	ldd	r25, Y+32	; 0x20
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <displayMainOptions+0x212>
    16dc:	98 a3       	std	Y+32, r25	; 0x20
    16de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	89 a1       	ldd	r24, Y+33	; 0x21
    16e2:	9a a1       	ldd	r25, Y+34	; 0x22
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9a a3       	std	Y+34, r25	; 0x22
    16e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	89 a1       	ldd	r24, Y+33	; 0x21
    16ec:	9a a1       	ldd	r25, Y+34	; 0x22
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	69 f7       	brne	.-38     	; 0x16cc <displayMainOptions+0x206>
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <displayMainOptions+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	6b a1       	ldd	r22, Y+35	; 0x23
    16f6:	7c a1       	ldd	r23, Y+36	; 0x24
    16f8:	8d a1       	ldd	r24, Y+37	; 0x25
    16fa:	9e a1       	ldd	r25, Y+38	; 0x26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9a a3       	std	Y+34, r25	; 0x22
    1706:	89 a3       	std	Y+33, r24	; 0x21
    1708:	89 a1       	ldd	r24, Y+33	; 0x21
    170a:	9a a1       	ldd	r25, Y+34	; 0x22
    170c:	9e 8f       	std	Y+30, r25	; 0x1e
    170e:	8d 8f       	std	Y+29, r24	; 0x1d
    1710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <displayMainOptions+0x24e>
    1718:	9e 8f       	std	Y+30, r25	; 0x1e
    171a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_clearScreen();
    171c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		while(UART_recieveByte() != CONTROL_MCU_READY);
    1720:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    1724:	80 31       	cpi	r24, 0x10	; 16
    1726:	e1 f7       	brne	.-8      	; 0x1720 <displayMainOptions+0x25a>
		UART_sendByte(CONTROL_MOTOR_STOP);
    1728:	87 e0       	ldi	r24, 0x07	; 7
    172a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	aa ef       	ldi	r26, 0xFA	; 250
    1734:	b3 e4       	ldi	r27, 0x43	; 67
    1736:	89 8f       	std	Y+25, r24	; 0x19
    1738:	9a 8f       	std	Y+26, r25	; 0x1a
    173a:	ab 8f       	std	Y+27, r26	; 0x1b
    173c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	69 8d       	ldd	r22, Y+25	; 0x19
    1740:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1744:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a ef       	ldi	r20, 0xFA	; 250
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8d 8b       	std	Y+21, r24	; 0x15
    1758:	9e 8b       	std	Y+22, r25	; 0x16
    175a:	af 8b       	std	Y+23, r26	; 0x17
    175c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    175e:	6d 89       	ldd	r22, Y+21	; 0x15
    1760:	7e 89       	ldd	r23, Y+22	; 0x16
    1762:	8f 89       	ldd	r24, Y+23	; 0x17
    1764:	98 8d       	ldd	r25, Y+24	; 0x18
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <displayMainOptions+0x2ba>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <displayMainOptions+0x338>
	else if (__tmp > 65535)
    1780:	6d 89       	ldd	r22, Y+21	; 0x15
    1782:	7e 89       	ldd	r23, Y+22	; 0x16
    1784:	8f 89       	ldd	r24, Y+23	; 0x17
    1786:	98 8d       	ldd	r25, Y+24	; 0x18
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <displayMainOptions+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	69 8d       	ldd	r22, Y+25	; 0x19
    179a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    179c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    179e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <displayMainOptions+0x31a>
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9a 8b       	std	Y+18, r25	; 0x12
    17c8:	89 8b       	std	Y+17, r24	; 0x11
    17ca:	89 89       	ldd	r24, Y+17	; 0x11
    17cc:	9a 89       	ldd	r25, Y+18	; 0x12
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <displayMainOptions+0x308>
    17d2:	9a 8b       	std	Y+18, r25	; 0x12
    17d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	8b 89       	ldd	r24, Y+19	; 0x13
    17d8:	9c 89       	ldd	r25, Y+20	; 0x14
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9c 8b       	std	Y+20, r25	; 0x14
    17de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	8b 89       	ldd	r24, Y+19	; 0x13
    17e2:	9c 89       	ldd	r25, Y+20	; 0x14
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <displayMainOptions+0x2fc>
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <displayMainOptions+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	6d 89       	ldd	r22, Y+21	; 0x15
    17ec:	7e 89       	ldd	r23, Y+22	; 0x16
    17ee:	8f 89       	ldd	r24, Y+23	; 0x17
    17f0:	98 8d       	ldd	r25, Y+24	; 0x18
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	9c 89       	ldd	r25, Y+20	; 0x14
    1802:	98 8b       	std	Y+16, r25	; 0x10
    1804:	8f 87       	std	Y+15, r24	; 0x0f
    1806:	8f 85       	ldd	r24, Y+15	; 0x0f
    1808:	98 89       	ldd	r25, Y+16	; 0x10
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <displayMainOptions+0x344>
    180e:	98 8b       	std	Y+16, r25	; 0x10
    1810:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_displayString("Closing");
    1812:	88 ef       	ldi	r24, 0xF8	; 248
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		UART_sendByte(CONTROL_MOTOR_ROTATE_CCW);
    181a:	88 e0       	ldi	r24, 0x08	; 8
    181c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
		while(UART_recieveByte() != CONTROL_MCU_READY);
    1820:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    1824:	80 31       	cpi	r24, 0x10	; 16
    1826:	e1 f7       	brne	.-8      	; 0x1820 <displayMainOptions+0x35a>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	aa e7       	ldi	r26, 0x7A	; 122
    182e:	b4 e4       	ldi	r27, 0x44	; 68
    1830:	8b 87       	std	Y+11, r24	; 0x0b
    1832:	9c 87       	std	Y+12, r25	; 0x0c
    1834:	ad 87       	std	Y+13, r26	; 0x0d
    1836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a ef       	ldi	r20, 0xFA	; 250
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8f 83       	std	Y+7, r24	; 0x07
    1852:	98 87       	std	Y+8, r25	; 0x08
    1854:	a9 87       	std	Y+9, r26	; 0x09
    1856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1858:	6f 81       	ldd	r22, Y+7	; 0x07
    185a:	78 85       	ldd	r23, Y+8	; 0x08
    185c:	89 85       	ldd	r24, Y+9	; 0x09
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186c:	88 23       	and	r24, r24
    186e:	2c f4       	brge	.+10     	; 0x187a <displayMainOptions+0x3b4>
		__ticks = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9e 83       	std	Y+6, r25	; 0x06
    1876:	8d 83       	std	Y+5, r24	; 0x05
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <displayMainOptions+0x432>
	else if (__tmp > 65535)
    187a:	6f 81       	ldd	r22, Y+7	; 0x07
    187c:	78 85       	ldd	r23, Y+8	; 0x08
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    188e:	18 16       	cp	r1, r24
    1890:	4c f5       	brge	.+82     	; 0x18e4 <displayMainOptions+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	7c 85       	ldd	r23, Y+12	; 0x0c
    1896:	8d 85       	ldd	r24, Y+13	; 0x0d
    1898:	9e 85       	ldd	r25, Y+14	; 0x0e
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <displayMainOptions+0x414>
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <displayMainOptions+0x402>
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	69 f7       	brne	.-38     	; 0x18bc <displayMainOptions+0x3f6>
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <displayMainOptions+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	9a 83       	std	Y+2, r25	; 0x02
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <displayMainOptions+0x43e>
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    190c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
		while(UART_recieveByte() != CONTROL_MCU_READY);
    1910:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    1914:	80 31       	cpi	r24, 0x10	; 16
    1916:	e1 f7       	brne	.-8      	; 0x1910 <displayMainOptions+0x44a>
		UART_sendByte(CONTROL_MOTOR_STOP);
    1918:	87 e0       	ldi	r24, 0x07	; 7
    191a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
    191e:	1c c0       	rjmp	.+56     	; 0x1958 <displayMainOptions+0x492>
		break;
	case '-':
		requestPassword();
    1920:	0e 94 b5 0c 	call	0x196a	; 0x196a <requestPassword>
    1924:	07 c0       	rjmp	.+14     	; 0x1934 <displayMainOptions+0x46e>
		while(!checkTryingPassword())
		{
			Error error = PASSWORD_INCORRECT;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	8a af       	std	Y+58, r24	; 0x3a
			displayError(error);
    192a:	8a ad       	ldd	r24, Y+58	; 0x3a
    192c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <displayError>
			requestPassword();
    1930:	0e 94 b5 0c 	call	0x196a	; 0x196a <requestPassword>
		while(UART_recieveByte() != CONTROL_MCU_READY);
		UART_sendByte(CONTROL_MOTOR_STOP);
		break;
	case '-':
		requestPassword();
		while(!checkTryingPassword())
    1934:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <checkTryingPassword>
    1938:	88 23       	and	r24, r24
    193a:	a9 f3       	breq	.-22     	; 0x1926 <displayMainOptions+0x460>
		{
			Error error = PASSWORD_INCORRECT;
			displayError(error);
			requestPassword();
		}
		requestNewPassword();
    193c:	0e 94 80 07 	call	0xf00	; 0xf00 <requestNewPassword>
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <displayMainOptions+0x48a>
		while(!checkNewPassword())
		{
			Error error = PASSWORD_REENTERING_ERROR;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	89 af       	std	Y+57, r24	; 0x39
			displayError(error);
    1946:	89 ad       	ldd	r24, Y+57	; 0x39
    1948:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <displayError>
			requestNewPassword();
    194c:	0e 94 80 07 	call	0xf00	; 0xf00 <requestNewPassword>
			Error error = PASSWORD_INCORRECT;
			displayError(error);
			requestPassword();
		}
		requestNewPassword();
		while(!checkNewPassword())
    1950:	0e 94 92 09 	call	0x1324	; 0x1324 <checkNewPassword>
    1954:	88 23       	and	r24, r24
    1956:	a9 f3       	breq	.-22     	; 0x1942 <displayMainOptions+0x47c>
		}
		break;
	default:
		break;
	}
}
    1958:	ee 96       	adiw	r28, 0x3e	; 62
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <requestPassword>:

void requestPassword( void )
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <requestPassword+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <requestPassword+0x8>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	8b 83       	std	Y+3, r24	; 0x03
	LCD_clearScreen();
    197a:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_clearScreen>
    197e:	1a c0       	rjmp	.+52     	; 0x19b4 <requestPassword+0x4a>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
    1980:	1b 82       	std	Y+3, r1	; 0x03
		/* Request password from user and then press Enter key*/
		LCD_displayString("Enter pass.:");
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
		getPassword(tryingPassword, &passLength);
    198a:	84 e2       	ldi	r24, 0x24	; 36
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	9e 01       	movw	r18, r28
    1990:	2c 5f       	subi	r18, 0xFC	; 252
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	b9 01       	movw	r22, r18
    1996:	0e 94 5f 06 	call	0xcbe	; 0xcbe <getPassword>
		uint8 result = checkPasswordLength( passLength );
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <checkPasswordLength>
    19a0:	8a 83       	std	Y+2, r24	; 0x02

		if(result == LOGIC_LOW)
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	88 23       	and	r24, r24
    19a6:	31 f4       	brne	.+12     	; 0x19b4 <requestPassword+0x4a>
		{
			errorFlag = LOGIC_HIGH;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	8b 83       	std	Y+3, r24	; 0x03
			Error error = PASSWORD_LENGTH_ERROR;
    19ac:	19 82       	std	Y+1, r1	; 0x01
			displayError(error);
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <displayError>
{
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
	LCD_clearScreen();
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	19 f3       	breq	.-58     	; 0x1980 <requestPassword+0x16>
			errorFlag = LOGIC_HIGH;
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <checkPasswordLength>:

uint8 checkPasswordLength(uint8 length)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	89 83       	std	Y+1, r24	; 0x01
	/* Display error if password is not 5 characters. */
	while(UART_recieveByte() != CONTROL_MCU_READY);
    19d4:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    19d8:	80 31       	cpi	r24, 0x10	; 16
    19da:	e1 f7       	brne	.-8      	; 0x19d4 <checkPasswordLength+0xc>
	UART_sendByte(CONTROL_CHECK_PASSWORD_LENGTH);
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
    19e2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    19e6:	80 31       	cpi	r24, 0x10	; 16
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <checkPasswordLength+0x1a>
	UART_sendByte(length);
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>

	UART_sendByte(HMI_MCU_READY);
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	return UART_recieveByte();
    19f6:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
}
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <checkTryingPassword>:

uint8 checkTryingPassword( void )
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != CONTROL_MCU_READY);
    1a0c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    1a10:	80 31       	cpi	r24, 0x10	; 16
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <checkTryingPassword+0xa>
	UART_sendByte(CHECK_PASSWORD_WITH_SAVED_PASSWORD);
    1a14:	85 e0       	ldi	r24, 0x05	; 5
    1a16:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
    1a1a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    1a1e:	80 31       	cpi	r24, 0x10	; 16
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <checkTryingPassword+0x18>
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	0c c0       	rjmp	.+24     	; 0x1a3e <checkTryingPassword+0x3c>
	{
		UART_sendByte(tryingPassword[i]);
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	ec 5d       	subi	r30, 0xDC	; 220
    1a30:	fe 4f       	sbci	r31, 0xFE	; 254
    1a32:	80 81       	ld	r24, Z
    1a34:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	while(UART_recieveByte() != CONTROL_MCU_READY);
	UART_sendByte(CHECK_PASSWORD_WITH_SAVED_PASSWORD);

	while(UART_recieveByte() != CONTROL_MCU_READY);
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	85 30       	cpi	r24, 0x05	; 5
    1a42:	88 f3       	brcs	.-30     	; 0x1a26 <checkTryingPassword+0x24>
	{
		UART_sendByte(tryingPassword[i]);
	}

	UART_sendByte(HMI_MCU_READY);
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
	return UART_recieveByte();
    1a4a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
}
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <GPIO_setupPinDirection+0x6>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <GPIO_setupPinDirection+0x8>
    1a5e:	0f 92       	push	r0
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	6a 83       	std	Y+2, r22	; 0x02
    1a68:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	88 30       	cpi	r24, 0x08	; 8
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <GPIO_setupPinDirection+0x1c>
    1a70:	d5 c0       	rjmp	.+426    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	08 f0       	brcs	.+2      	; 0x1a7a <GPIO_setupPinDirection+0x24>
    1a78:	d1 c0       	rjmp	.+418    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3d 83       	std	Y+5, r19	; 0x05
    1a82:	2c 83       	std	Y+4, r18	; 0x04
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <GPIO_setupPinDirection+0x3a>
    1a8e:	43 c0       	rjmp	.+134    	; 0x1b16 <GPIO_setupPinDirection+0xc0>
    1a90:	2c 81       	ldd	r18, Y+4	; 0x04
    1a92:	3d 81       	ldd	r19, Y+5	; 0x05
    1a94:	22 30       	cpi	r18, 0x02	; 2
    1a96:	31 05       	cpc	r19, r1
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <GPIO_setupPinDirection+0x4e>
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	71 f0       	breq	.+28     	; 0x1abe <GPIO_setupPinDirection+0x68>
    1aa2:	bc c0       	rjmp	.+376    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
    1aa4:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa6:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <GPIO_setupPinDirection+0x5a>
    1aae:	5f c0       	rjmp	.+190    	; 0x1b6e <GPIO_setupPinDirection+0x118>
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <GPIO_setupPinDirection+0x66>
    1aba:	85 c0       	rjmp	.+266    	; 0x1bc6 <GPIO_setupPinDirection+0x170>
    1abc:	af c0       	rjmp	.+350    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	a1 f4       	brne	.+40     	; 0x1aec <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ac4:	aa e3       	ldi	r26, 0x3A	; 58
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ea e3       	ldi	r30, 0x3A	; 58
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <GPIO_setupPinDirection+0x8c>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <GPIO_setupPinDirection+0x88>
    1ae6:	84 2b       	or	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	98 c0       	rjmp	.+304    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1aec:	aa e3       	ldi	r26, 0x3A	; 58
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ea e3       	ldi	r30, 0x3A	; 58
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <GPIO_setupPinDirection+0xb4>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <GPIO_setupPinDirection+0xb0>
    1b0e:	80 95       	com	r24
    1b10:	84 23       	and	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	83 c0       	rjmp	.+262    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	a1 f4       	brne	.+40     	; 0x1b44 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b1c:	a7 e3       	ldi	r26, 0x37	; 55
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e7 e3       	ldi	r30, 0x37	; 55
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <GPIO_setupPinDirection+0xe4>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <GPIO_setupPinDirection+0xe0>
    1b3e:	84 2b       	or	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	6c c0       	rjmp	.+216    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b44:	a7 e3       	ldi	r26, 0x37	; 55
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e7 e3       	ldi	r30, 0x37	; 55
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <GPIO_setupPinDirection+0x10c>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <GPIO_setupPinDirection+0x108>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	57 c0       	rjmp	.+174    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	a1 f4       	brne	.+40     	; 0x1b9c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b74:	a4 e3       	ldi	r26, 0x34	; 52
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e4 e3       	ldi	r30, 0x34	; 52
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_setupPinDirection+0x13c>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_setupPinDirection+0x138>
    1b96:	84 2b       	or	r24, r20
    1b98:	8c 93       	st	X, r24
    1b9a:	40 c0       	rjmp	.+128    	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b9c:	a4 e3       	ldi	r26, 0x34	; 52
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e4 e3       	ldi	r30, 0x34	; 52
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <GPIO_setupPinDirection+0x164>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <GPIO_setupPinDirection+0x160>
    1bbe:	80 95       	com	r24
    1bc0:	84 23       	and	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	2b c0       	rjmp	.+86     	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	a1 f4       	brne	.+40     	; 0x1bf4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1bcc:	a1 e3       	ldi	r26, 0x31	; 49
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e1 e3       	ldi	r30, 0x31	; 49
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_setupPinDirection+0x194>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_setupPinDirection+0x190>
    1bee:	84 2b       	or	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1bf4:	a1 e3       	ldi	r26, 0x31	; 49
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e1 e3       	ldi	r30, 0x31	; 49
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <GPIO_setupPinDirection+0x1bc>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <GPIO_setupPinDirection+0x1b8>
    1c16:	80 95       	com	r24
    1c18:	84 23       	and	r24, r20
    1c1a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <GPIO_writePin+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <GPIO_writePin+0x8>
    1c34:	0f 92       	push	r0
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	6a 83       	std	Y+2, r22	; 0x02
    1c3e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	88 30       	cpi	r24, 0x08	; 8
    1c44:	08 f0       	brcs	.+2      	; 0x1c48 <GPIO_writePin+0x1c>
    1c46:	d5 c0       	rjmp	.+426    	; 0x1df2 <GPIO_writePin+0x1c6>
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	84 30       	cpi	r24, 0x04	; 4
    1c4c:	08 f0       	brcs	.+2      	; 0x1c50 <GPIO_writePin+0x24>
    1c4e:	d1 c0       	rjmp	.+418    	; 0x1df2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	3d 83       	std	Y+5, r19	; 0x05
    1c58:	2c 83       	std	Y+4, r18	; 0x04
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <GPIO_writePin+0x3a>
    1c64:	43 c0       	rjmp	.+134    	; 0x1cec <GPIO_writePin+0xc0>
    1c66:	2c 81       	ldd	r18, Y+4	; 0x04
    1c68:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <GPIO_writePin+0x4e>
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	71 f0       	breq	.+28     	; 0x1c94 <GPIO_writePin+0x68>
    1c78:	bc c0       	rjmp	.+376    	; 0x1df2 <GPIO_writePin+0x1c6>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <GPIO_writePin+0x5a>
    1c84:	5f c0       	rjmp	.+190    	; 0x1d44 <GPIO_writePin+0x118>
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <GPIO_writePin+0x66>
    1c90:	85 c0       	rjmp	.+266    	; 0x1d9c <GPIO_writePin+0x170>
    1c92:	af c0       	rjmp	.+350    	; 0x1df2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	a1 f4       	brne	.+40     	; 0x1cc2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c9a:	ab e3       	ldi	r26, 0x3B	; 59
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <GPIO_writePin+0x8c>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <GPIO_writePin+0x88>
    1cbc:	84 2b       	or	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	98 c0       	rjmp	.+304    	; 0x1df2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1cc2:	ab e3       	ldi	r26, 0x3B	; 59
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	eb e3       	ldi	r30, 0x3B	; 59
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <GPIO_writePin+0xb4>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <GPIO_writePin+0xb0>
    1ce4:	80 95       	com	r24
    1ce6:	84 23       	and	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	83 c0       	rjmp	.+262    	; 0x1df2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	a1 f4       	brne	.+40     	; 0x1d1a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1cf2:	a8 e3       	ldi	r26, 0x38	; 56
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e8 e3       	ldi	r30, 0x38	; 56
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <GPIO_writePin+0xe4>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <GPIO_writePin+0xe0>
    1d14:	84 2b       	or	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	6c c0       	rjmp	.+216    	; 0x1df2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d1a:	a8 e3       	ldi	r26, 0x38	; 56
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e8 e3       	ldi	r30, 0x38	; 56
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <GPIO_writePin+0x10c>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <GPIO_writePin+0x108>
    1d3c:	80 95       	com	r24
    1d3e:	84 23       	and	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	57 c0       	rjmp	.+174    	; 0x1df2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	a1 f4       	brne	.+40     	; 0x1d72 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d4a:	a5 e3       	ldi	r26, 0x35	; 53
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e5 e3       	ldi	r30, 0x35	; 53
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <GPIO_writePin+0x13c>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <GPIO_writePin+0x138>
    1d6c:	84 2b       	or	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	40 c0       	rjmp	.+128    	; 0x1df2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d72:	a5 e3       	ldi	r26, 0x35	; 53
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e5 e3       	ldi	r30, 0x35	; 53
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_writePin+0x164>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_writePin+0x160>
    1d94:	80 95       	com	r24
    1d96:	84 23       	and	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	2b c0       	rjmp	.+86     	; 0x1df2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	a1 f4       	brne	.+40     	; 0x1dca <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1da2:	a2 e3       	ldi	r26, 0x32	; 50
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e2 e3       	ldi	r30, 0x32	; 50
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_writePin+0x194>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_writePin+0x190>
    1dc4:	84 2b       	or	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1dca:	a2 e3       	ldi	r26, 0x32	; 50
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e2 e3       	ldi	r30, 0x32	; 50
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <GPIO_writePin+0x1bc>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <GPIO_writePin+0x1b8>
    1dec:	80 95       	com	r24
    1dee:	84 23       	and	r24, r20
    1df0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <GPIO_readPin+0x6>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <GPIO_readPin+0x8>
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	8a 83       	std	Y+2, r24	; 0x02
    1e12:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e14:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	88 30       	cpi	r24, 0x08	; 8
    1e1a:	08 f0       	brcs	.+2      	; 0x1e1e <GPIO_readPin+0x1c>
    1e1c:	84 c0       	rjmp	.+264    	; 0x1f26 <GPIO_readPin+0x124>
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <GPIO_readPin+0x24>
    1e24:	80 c0       	rjmp	.+256    	; 0x1f26 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3d 83       	std	Y+5, r19	; 0x05
    1e2e:	2c 83       	std	Y+4, r18	; 0x04
    1e30:	4c 81       	ldd	r20, Y+4	; 0x04
    1e32:	5d 81       	ldd	r21, Y+5	; 0x05
    1e34:	41 30       	cpi	r20, 0x01	; 1
    1e36:	51 05       	cpc	r21, r1
    1e38:	79 f1       	breq	.+94     	; 0x1e98 <GPIO_readPin+0x96>
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	91 05       	cpc	r25, r1
    1e42:	34 f4       	brge	.+12     	; 0x1e50 <GPIO_readPin+0x4e>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	21 15       	cp	r18, r1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	69 f0       	breq	.+26     	; 0x1e68 <GPIO_readPin+0x66>
    1e4e:	6b c0       	rjmp	.+214    	; 0x1f26 <GPIO_readPin+0x124>
    1e50:	4c 81       	ldd	r20, Y+4	; 0x04
    1e52:	5d 81       	ldd	r21, Y+5	; 0x05
    1e54:	42 30       	cpi	r20, 0x02	; 2
    1e56:	51 05       	cpc	r21, r1
    1e58:	b9 f1       	breq	.+110    	; 0x1ec8 <GPIO_readPin+0xc6>
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	91 05       	cpc	r25, r1
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <GPIO_readPin+0x64>
    1e64:	49 c0       	rjmp	.+146    	; 0x1ef8 <GPIO_readPin+0xf6>
    1e66:	5f c0       	rjmp	.+190    	; 0x1f26 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e68:	e9 e3       	ldi	r30, 0x39	; 57
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <GPIO_readPin+0x7e>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <GPIO_readPin+0x7a>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	90 70       	andi	r25, 0x00	; 0
    1e8a:	88 23       	and	r24, r24
    1e8c:	19 f0       	breq	.+6      	; 0x1e94 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	49 c0       	rjmp	.+146    	; 0x1f26 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	47 c0       	rjmp	.+142    	; 0x1f26 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e98:	e6 e3       	ldi	r30, 0x36	; 54
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a9 01       	movw	r20, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <GPIO_readPin+0xae>
    1eac:	55 95       	asr	r21
    1eae:	47 95       	ror	r20
    1eb0:	8a 95       	dec	r24
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <GPIO_readPin+0xaa>
    1eb4:	ca 01       	movw	r24, r20
    1eb6:	81 70       	andi	r24, 0x01	; 1
    1eb8:	90 70       	andi	r25, 0x00	; 0
    1eba:	88 23       	and	r24, r24
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	31 c0       	rjmp	.+98     	; 0x1f26 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
    1ec6:	2f c0       	rjmp	.+94     	; 0x1f26 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ec8:	e3 e3       	ldi	r30, 0x33	; 51
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a9 01       	movw	r20, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <GPIO_readPin+0xde>
    1edc:	55 95       	asr	r21
    1ede:	47 95       	ror	r20
    1ee0:	8a 95       	dec	r24
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <GPIO_readPin+0xda>
    1ee4:	ca 01       	movw	r24, r20
    1ee6:	81 70       	andi	r24, 0x01	; 1
    1ee8:	90 70       	andi	r25, 0x00	; 0
    1eea:	88 23       	and	r24, r24
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	19 c0       	rjmp	.+50     	; 0x1f26 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
    1ef6:	17 c0       	rjmp	.+46     	; 0x1f26 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ef8:	e0 e3       	ldi	r30, 0x30	; 48
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a9 01       	movw	r20, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <GPIO_readPin+0x10e>
    1f0c:	55 95       	asr	r21
    1f0e:	47 95       	ror	r20
    1f10:	8a 95       	dec	r24
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <GPIO_readPin+0x10a>
    1f14:	ca 01       	movw	r24, r20
    1f16:	81 70       	andi	r24, 0x01	; 1
    1f18:	90 70       	andi	r25, 0x00	; 0
    1f1a:	88 23       	and	r24, r24
    1f1c:	19 f0       	breq	.+6      	; 0x1f24 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f24:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <GPIO_setupPortDirection+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <GPIO_setupPortDirection+0x8>
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	84 30       	cpi	r24, 0x04	; 4
    1f4c:	90 f5       	brcc	.+100    	; 0x1fb2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	3c 83       	std	Y+4, r19	; 0x04
    1f56:	2b 83       	std	Y+3, r18	; 0x03
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	91 05       	cpc	r25, r1
    1f60:	d1 f0       	breq	.+52     	; 0x1f96 <GPIO_setupPortDirection+0x5e>
    1f62:	2b 81       	ldd	r18, Y+3	; 0x03
    1f64:	3c 81       	ldd	r19, Y+4	; 0x04
    1f66:	22 30       	cpi	r18, 0x02	; 2
    1f68:	31 05       	cpc	r19, r1
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <GPIO_setupPortDirection+0x3e>
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	61 f0       	breq	.+24     	; 0x1f8c <GPIO_setupPortDirection+0x54>
    1f74:	1e c0       	rjmp	.+60     	; 0x1fb2 <GPIO_setupPortDirection+0x7a>
    1f76:	2b 81       	ldd	r18, Y+3	; 0x03
    1f78:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7a:	22 30       	cpi	r18, 0x02	; 2
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	81 f0       	breq	.+32     	; 0x1fa0 <GPIO_setupPortDirection+0x68>
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	91 05       	cpc	r25, r1
    1f88:	81 f0       	breq	.+32     	; 0x1faa <GPIO_setupPortDirection+0x72>
    1f8a:	13 c0       	rjmp	.+38     	; 0x1fb2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f8c:	ea e3       	ldi	r30, 0x3A	; 58
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	80 83       	st	Z, r24
    1f94:	0e c0       	rjmp	.+28     	; 0x1fb2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f96:	e7 e3       	ldi	r30, 0x37	; 55
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	80 83       	st	Z, r24
    1f9e:	09 c0       	rjmp	.+18     	; 0x1fb2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fa0:	e4 e3       	ldi	r30, 0x34	; 52
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	80 83       	st	Z, r24
    1fa8:	04 c0       	rjmp	.+8      	; 0x1fb2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1faa:	e1 e3       	ldi	r30, 0x31	; 49
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <GPIO_writePort+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <GPIO_writePort+0x8>
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	84 30       	cpi	r24, 0x04	; 4
    1fd4:	90 f5       	brcc	.+100    	; 0x203a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	3c 83       	std	Y+4, r19	; 0x04
    1fde:	2b 83       	std	Y+3, r18	; 0x03
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	d1 f0       	breq	.+52     	; 0x201e <GPIO_writePort+0x5e>
    1fea:	2b 81       	ldd	r18, Y+3	; 0x03
    1fec:	3c 81       	ldd	r19, Y+4	; 0x04
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <GPIO_writePort+0x3e>
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	61 f0       	breq	.+24     	; 0x2014 <GPIO_writePort+0x54>
    1ffc:	1e c0       	rjmp	.+60     	; 0x203a <GPIO_writePort+0x7a>
    1ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    2000:	3c 81       	ldd	r19, Y+4	; 0x04
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	81 f0       	breq	.+32     	; 0x2028 <GPIO_writePort+0x68>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	83 30       	cpi	r24, 0x03	; 3
    200e:	91 05       	cpc	r25, r1
    2010:	81 f0       	breq	.+32     	; 0x2032 <GPIO_writePort+0x72>
    2012:	13 c0       	rjmp	.+38     	; 0x203a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2014:	eb e3       	ldi	r30, 0x3B	; 59
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	80 83       	st	Z, r24
    201c:	0e c0       	rjmp	.+28     	; 0x203a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    201e:	e8 e3       	ldi	r30, 0x38	; 56
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	80 83       	st	Z, r24
    2026:	09 c0       	rjmp	.+18     	; 0x203a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2028:	e5 e3       	ldi	r30, 0x35	; 53
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	80 83       	st	Z, r24
    2030:	04 c0       	rjmp	.+8      	; 0x203a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2032:	e2 e3       	ldi	r30, 0x32	; 50
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	80 83       	st	Z, r24
			break;
		}
	}
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <GPIO_readPort+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <GPIO_readPort+0x8>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2056:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	84 30       	cpi	r24, 0x04	; 4
    205c:	90 f5       	brcc	.+100    	; 0x20c2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	3c 83       	std	Y+4, r19	; 0x04
    2066:	2b 83       	std	Y+3, r18	; 0x03
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	91 05       	cpc	r25, r1
    2070:	d1 f0       	breq	.+52     	; 0x20a6 <GPIO_readPort+0x5e>
    2072:	2b 81       	ldd	r18, Y+3	; 0x03
    2074:	3c 81       	ldd	r19, Y+4	; 0x04
    2076:	22 30       	cpi	r18, 0x02	; 2
    2078:	31 05       	cpc	r19, r1
    207a:	2c f4       	brge	.+10     	; 0x2086 <GPIO_readPort+0x3e>
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	61 f0       	breq	.+24     	; 0x209c <GPIO_readPort+0x54>
    2084:	1e c0       	rjmp	.+60     	; 0x20c2 <GPIO_readPort+0x7a>
    2086:	2b 81       	ldd	r18, Y+3	; 0x03
    2088:	3c 81       	ldd	r19, Y+4	; 0x04
    208a:	22 30       	cpi	r18, 0x02	; 2
    208c:	31 05       	cpc	r19, r1
    208e:	81 f0       	breq	.+32     	; 0x20b0 <GPIO_readPort+0x68>
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	91 05       	cpc	r25, r1
    2098:	81 f0       	breq	.+32     	; 0x20ba <GPIO_readPort+0x72>
    209a:	13 c0       	rjmp	.+38     	; 0x20c2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    209c:	e9 e3       	ldi	r30, 0x39	; 57
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	0e c0       	rjmp	.+28     	; 0x20c2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20a6:	e6 e3       	ldi	r30, 0x36	; 54
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	09 c0       	rjmp	.+18     	; 0x20c2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20b0:	e3 e3       	ldi	r30, 0x33	; 51
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20ba:	e0 e3       	ldi	r30, 0x30	; 48
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <KEYPAD_getPressedKey+0x6>
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    20de:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    20e0:	1b 82       	std	Y+3, r1	; 0x03
    20e2:	43 c0       	rjmp	.+134    	; 0x216a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	98 2f       	mov	r25, r24
    20f0:	9c 5f       	subi	r25, 0xFC	; 252
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	69 2f       	mov	r22, r25
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9c 01       	movw	r18, r24
    2104:	2c 5f       	subi	r18, 0xFC	; 252
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <KEYPAD_getPressedKey+0x40>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	2a 95       	dec	r18
    2114:	e2 f7       	brpl	.-8      	; 0x210e <KEYPAD_getPressedKey+0x3c>
    2116:	80 95       	com	r24
    2118:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	69 81       	ldd	r22, Y+1	; 0x01
    211e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2122:	1a 82       	std	Y+2, r1	; 0x02
    2124:	1c c0       	rjmp	.+56     	; 0x215e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	6a 81       	ldd	r22, Y+2	; 0x02
    212a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <GPIO_readPin>
    212e:	88 23       	and	r24, r24
    2130:	99 f4       	brne	.+38     	; 0x2158 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	98 2f       	mov	r25, r24
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	89 0f       	add	r24, r25
    2146:	8f 5f       	subi	r24, 0xFF	; 255
    2148:	0e 94 ba 10 	call	0x2174	; 0x2174 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	08 f3       	brcs	.-62     	; 0x2126 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	8f 5f       	subi	r24, 0xFF	; 255
    2168:	8b 83       	std	Y+3, r24	; 0x03
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	84 30       	cpi	r24, 0x04	; 4
    216e:	08 f4       	brcc	.+2      	; 0x2172 <KEYPAD_getPressedKey+0xa0>
    2170:	b9 cf       	rjmp	.-142    	; 0x20e4 <KEYPAD_getPressedKey+0x12>
    2172:	b6 cf       	rjmp	.-148    	; 0x20e0 <KEYPAD_getPressedKey+0xe>

00002174 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	00 d0       	rcall	.+0      	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x6>
    217a:	00 d0       	rcall	.+0      	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x8>
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2182:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	3c 83       	std	Y+4, r19	; 0x04
    218c:	2b 83       	std	Y+3, r18	; 0x03
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	88 30       	cpi	r24, 0x08	; 8
    2194:	91 05       	cpc	r25, r1
    2196:	09 f4       	brne	.+2      	; 0x219a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2198:	70 c0       	rjmp	.+224    	; 0x227a <KEYPAD_4x4_adjustKeyNumber+0x106>
    219a:	2b 81       	ldd	r18, Y+3	; 0x03
    219c:	3c 81       	ldd	r19, Y+4	; 0x04
    219e:	29 30       	cpi	r18, 0x09	; 9
    21a0:	31 05       	cpc	r19, r1
    21a2:	5c f5       	brge	.+86     	; 0x21fa <KEYPAD_4x4_adjustKeyNumber+0x86>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	84 30       	cpi	r24, 0x04	; 4
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    21ae:	59 c0       	rjmp	.+178    	; 0x2262 <KEYPAD_4x4_adjustKeyNumber+0xee>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	25 30       	cpi	r18, 0x05	; 5
    21b6:	31 05       	cpc	r19, r1
    21b8:	9c f4       	brge	.+38     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	91 05       	cpc	r25, r1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    21c4:	48 c0       	rjmp	.+144    	; 0x2256 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    21c6:	2b 81       	ldd	r18, Y+3	; 0x03
    21c8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ca:	23 30       	cpi	r18, 0x03	; 3
    21cc:	31 05       	cpc	r19, r1
    21ce:	0c f0       	brlt	.+2      	; 0x21d2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    21d0:	45 c0       	rjmp	.+138    	; 0x225c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	91 05       	cpc	r25, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <KEYPAD_4x4_adjustKeyNumber+0x6a>
    21dc:	39 c0       	rjmp	.+114    	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    21de:	67 c0       	rjmp	.+206    	; 0x22ae <KEYPAD_4x4_adjustKeyNumber+0x13a>
    21e0:	2b 81       	ldd	r18, Y+3	; 0x03
    21e2:	3c 81       	ldd	r19, Y+4	; 0x04
    21e4:	26 30       	cpi	r18, 0x06	; 6
    21e6:	31 05       	cpc	r19, r1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <KEYPAD_4x4_adjustKeyNumber+0x78>
    21ea:	41 c0       	rjmp	.+130    	; 0x226e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	87 30       	cpi	r24, 0x07	; 7
    21f2:	91 05       	cpc	r25, r1
    21f4:	0c f0       	brlt	.+2      	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    21f6:	3e c0       	rjmp	.+124    	; 0x2274 <KEYPAD_4x4_adjustKeyNumber+0x100>
    21f8:	37 c0       	rjmp	.+110    	; 0x2268 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    21fa:	2b 81       	ldd	r18, Y+3	; 0x03
    21fc:	3c 81       	ldd	r19, Y+4	; 0x04
    21fe:	2c 30       	cpi	r18, 0x0C	; 12
    2200:	31 05       	cpc	r19, r1
    2202:	09 f4       	brne	.+2      	; 0x2206 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2204:	46 c0       	rjmp	.+140    	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	8d 30       	cpi	r24, 0x0D	; 13
    220c:	91 05       	cpc	r25, r1
    220e:	5c f4       	brge	.+22     	; 0x2226 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2210:	2b 81       	ldd	r18, Y+3	; 0x03
    2212:	3c 81       	ldd	r19, Y+4	; 0x04
    2214:	2a 30       	cpi	r18, 0x0A	; 10
    2216:	31 05       	cpc	r19, r1
    2218:	b1 f1       	breq	.+108    	; 0x2286 <KEYPAD_4x4_adjustKeyNumber+0x112>
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	8b 30       	cpi	r24, 0x0B	; 11
    2220:	91 05       	cpc	r25, r1
    2222:	a4 f5       	brge	.+104    	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0x118>
    2224:	2d c0       	rjmp	.+90     	; 0x2280 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2226:	2b 81       	ldd	r18, Y+3	; 0x03
    2228:	3c 81       	ldd	r19, Y+4	; 0x04
    222a:	2e 30       	cpi	r18, 0x0E	; 14
    222c:	31 05       	cpc	r19, r1
    222e:	b9 f1       	breq	.+110    	; 0x229e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	8e 30       	cpi	r24, 0x0E	; 14
    2236:	91 05       	cpc	r25, r1
    2238:	7c f1       	brlt	.+94     	; 0x2298 <KEYPAD_4x4_adjustKeyNumber+0x124>
    223a:	2b 81       	ldd	r18, Y+3	; 0x03
    223c:	3c 81       	ldd	r19, Y+4	; 0x04
    223e:	2f 30       	cpi	r18, 0x0F	; 15
    2240:	31 05       	cpc	r19, r1
    2242:	79 f1       	breq	.+94     	; 0x22a2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	80 31       	cpi	r24, 0x10	; 16
    224a:	91 05       	cpc	r25, r1
    224c:	69 f1       	breq	.+90     	; 0x22a8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    224e:	2f c0       	rjmp	.+94     	; 0x22ae <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2250:	87 e0       	ldi	r24, 0x07	; 7
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	2e c0       	rjmp	.+92     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2256:	88 e0       	ldi	r24, 0x08	; 8
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	2b c0       	rjmp	.+86     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    225c:	89 e0       	ldi	r24, 0x09	; 9
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	28 c0       	rjmp	.+80     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2262:	85 e2       	ldi	r24, 0x25	; 37
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	25 c0       	rjmp	.+74     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2268:	84 e0       	ldi	r24, 0x04	; 4
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	22 c0       	rjmp	.+68     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    226e:	85 e0       	ldi	r24, 0x05	; 5
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	1f c0       	rjmp	.+62     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2274:	86 e0       	ldi	r24, 0x06	; 6
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	1c c0       	rjmp	.+56     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    227a:	8a e2       	ldi	r24, 0x2A	; 42
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	19 c0       	rjmp	.+50     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	16 c0       	rjmp	.+44     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	13 c0       	rjmp	.+38     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	10 c0       	rjmp	.+32     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2292:	8d e2       	ldi	r24, 0x2D	; 45
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	0d c0       	rjmp	.+26     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2298:	8d e0       	ldi	r24, 0x0D	; 13
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	0a c0       	rjmp	.+20     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    229e:	19 82       	std	Y+1, r1	; 0x01
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    22a2:	8d e3       	ldi	r24, 0x3D	; 61
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    22a8:	8b e2       	ldi	r24, 0x2B	; 43
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	62 e0       	ldi	r22, 0x02	; 2
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	6f ef       	ldi	r22, 0xFF	; 255
    22ec:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    22f0:	88 e3       	ldi	r24, 0x38	; 56
    22f2:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    22f6:	8c e0       	ldi	r24, 0x0C	; 12
    22f8:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
}
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	ea 97       	sbiw	r28, 0x3a	; 58
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    231e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	a0 e8       	ldi	r26, 0x80	; 128
    233a:	bf e3       	ldi	r27, 0x3F	; 63
    233c:	8d ab       	std	Y+53, r24	; 0x35
    233e:	9e ab       	std	Y+54, r25	; 0x36
    2340:	af ab       	std	Y+55, r26	; 0x37
    2342:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2344:	6d a9       	ldd	r22, Y+53	; 0x35
    2346:	7e a9       	ldd	r23, Y+54	; 0x36
    2348:	8f a9       	ldd	r24, Y+55	; 0x37
    234a:	98 ad       	ldd	r25, Y+56	; 0x38
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4a e7       	ldi	r20, 0x7A	; 122
    2352:	53 e4       	ldi	r21, 0x43	; 67
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	89 ab       	std	Y+49, r24	; 0x31
    235e:	9a ab       	std	Y+50, r25	; 0x32
    2360:	ab ab       	std	Y+51, r26	; 0x33
    2362:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2364:	69 a9       	ldd	r22, Y+49	; 0x31
    2366:	7a a9       	ldd	r23, Y+50	; 0x32
    2368:	8b a9       	ldd	r24, Y+51	; 0x33
    236a:	9c a9       	ldd	r25, Y+52	; 0x34
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e8       	ldi	r20, 0x80	; 128
    2372:	5f e3       	ldi	r21, 0x3F	; 63
    2374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2378:	88 23       	and	r24, r24
    237a:	2c f4       	brge	.+10     	; 0x2386 <LCD_sendCommand+0x7e>
		__ticks = 1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	98 ab       	std	Y+48, r25	; 0x30
    2382:	8f a7       	std	Y+47, r24	; 0x2f
    2384:	3f c0       	rjmp	.+126    	; 0x2404 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2386:	69 a9       	ldd	r22, Y+49	; 0x31
    2388:	7a a9       	ldd	r23, Y+50	; 0x32
    238a:	8b a9       	ldd	r24, Y+51	; 0x33
    238c:	9c a9       	ldd	r25, Y+52	; 0x34
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	4c f5       	brge	.+82     	; 0x23f0 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239e:	6d a9       	ldd	r22, Y+53	; 0x35
    23a0:	7e a9       	ldd	r23, Y+54	; 0x36
    23a2:	8f a9       	ldd	r24, Y+55	; 0x37
    23a4:	98 ad       	ldd	r25, Y+56	; 0x38
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e2       	ldi	r20, 0x20	; 32
    23ac:	51 e4       	ldi	r21, 0x41	; 65
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	98 ab       	std	Y+48, r25	; 0x30
    23c4:	8f a7       	std	Y+47, r24	; 0x2f
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <LCD_sendCommand+0xde>
    23c8:	89 e1       	ldi	r24, 0x19	; 25
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9e a7       	std	Y+46, r25	; 0x2e
    23ce:	8d a7       	std	Y+45, r24	; 0x2d
    23d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    23d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <LCD_sendCommand+0xcc>
    23d8:	9e a7       	std	Y+46, r25	; 0x2e
    23da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23de:	98 a9       	ldd	r25, Y+48	; 0x30
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	98 ab       	std	Y+48, r25	; 0x30
    23e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	69 f7       	brne	.-38     	; 0x23c8 <LCD_sendCommand+0xc0>
    23ee:	14 c0       	rjmp	.+40     	; 0x2418 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f0:	69 a9       	ldd	r22, Y+49	; 0x31
    23f2:	7a a9       	ldd	r23, Y+50	; 0x32
    23f4:	8b a9       	ldd	r24, Y+51	; 0x33
    23f6:	9c a9       	ldd	r25, Y+52	; 0x34
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	98 ab       	std	Y+48, r25	; 0x30
    2402:	8f a7       	std	Y+47, r24	; 0x2f
    2404:	8f a5       	ldd	r24, Y+47	; 0x2f
    2406:	98 a9       	ldd	r25, Y+48	; 0x30
    2408:	9c a7       	std	Y+44, r25	; 0x2c
    240a:	8b a7       	std	Y+43, r24	; 0x2b
    240c:	8b a5       	ldd	r24, Y+43	; 0x2b
    240e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_sendCommand+0x108>
    2414:	9c a7       	std	Y+44, r25	; 0x2c
    2416:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a0 e8       	ldi	r26, 0x80	; 128
    2428:	bf e3       	ldi	r27, 0x3F	; 63
    242a:	8f a3       	std	Y+39, r24	; 0x27
    242c:	98 a7       	std	Y+40, r25	; 0x28
    242e:	a9 a7       	std	Y+41, r26	; 0x29
    2430:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2432:	6f a1       	ldd	r22, Y+39	; 0x27
    2434:	78 a5       	ldd	r23, Y+40	; 0x28
    2436:	89 a5       	ldd	r24, Y+41	; 0x29
    2438:	9a a5       	ldd	r25, Y+42	; 0x2a
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a e7       	ldi	r20, 0x7A	; 122
    2440:	53 e4       	ldi	r21, 0x43	; 67
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8b a3       	std	Y+35, r24	; 0x23
    244c:	9c a3       	std	Y+36, r25	; 0x24
    244e:	ad a3       	std	Y+37, r26	; 0x25
    2450:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2452:	6b a1       	ldd	r22, Y+35	; 0x23
    2454:	7c a1       	ldd	r23, Y+36	; 0x24
    2456:	8d a1       	ldd	r24, Y+37	; 0x25
    2458:	9e a1       	ldd	r25, Y+38	; 0x26
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	5f e3       	ldi	r21, 0x3F	; 63
    2462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2466:	88 23       	and	r24, r24
    2468:	2c f4       	brge	.+10     	; 0x2474 <LCD_sendCommand+0x16c>
		__ticks = 1;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9a a3       	std	Y+34, r25	; 0x22
    2470:	89 a3       	std	Y+33, r24	; 0x21
    2472:	3f c0       	rjmp	.+126    	; 0x24f2 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2474:	6b a1       	ldd	r22, Y+35	; 0x23
    2476:	7c a1       	ldd	r23, Y+36	; 0x24
    2478:	8d a1       	ldd	r24, Y+37	; 0x25
    247a:	9e a1       	ldd	r25, Y+38	; 0x26
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	3f ef       	ldi	r19, 0xFF	; 255
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	57 e4       	ldi	r21, 0x47	; 71
    2484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	4c f5       	brge	.+82     	; 0x24de <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248c:	6f a1       	ldd	r22, Y+39	; 0x27
    248e:	78 a5       	ldd	r23, Y+40	; 0x28
    2490:	89 a5       	ldd	r24, Y+41	; 0x29
    2492:	9a a5       	ldd	r25, Y+42	; 0x2a
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e2       	ldi	r20, 0x20	; 32
    249a:	51 e4       	ldi	r21, 0x41	; 65
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	9a a3       	std	Y+34, r25	; 0x22
    24b2:	89 a3       	std	Y+33, r24	; 0x21
    24b4:	0f c0       	rjmp	.+30     	; 0x24d4 <LCD_sendCommand+0x1cc>
    24b6:	89 e1       	ldi	r24, 0x19	; 25
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	98 a3       	std	Y+32, r25	; 0x20
    24bc:	8f 8f       	std	Y+31, r24	; 0x1f
    24be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c0:	98 a1       	ldd	r25, Y+32	; 0x20
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <LCD_sendCommand+0x1ba>
    24c6:	98 a3       	std	Y+32, r25	; 0x20
    24c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ca:	89 a1       	ldd	r24, Y+33	; 0x21
    24cc:	9a a1       	ldd	r25, Y+34	; 0x22
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	9a a3       	std	Y+34, r25	; 0x22
    24d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	89 a1       	ldd	r24, Y+33	; 0x21
    24d6:	9a a1       	ldd	r25, Y+34	; 0x22
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	69 f7       	brne	.-38     	; 0x24b6 <LCD_sendCommand+0x1ae>
    24dc:	14 c0       	rjmp	.+40     	; 0x2506 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24de:	6b a1       	ldd	r22, Y+35	; 0x23
    24e0:	7c a1       	ldd	r23, Y+36	; 0x24
    24e2:	8d a1       	ldd	r24, Y+37	; 0x25
    24e4:	9e a1       	ldd	r25, Y+38	; 0x26
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	9a a3       	std	Y+34, r25	; 0x22
    24f0:	89 a3       	std	Y+33, r24	; 0x21
    24f2:	89 a1       	ldd	r24, Y+33	; 0x21
    24f4:	9a a1       	ldd	r25, Y+34	; 0x22
    24f6:	9e 8f       	std	Y+30, r25	; 0x1e
    24f8:	8d 8f       	std	Y+29, r24	; 0x1d
    24fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCD_sendCommand+0x1f6>
    2502:	9e 8f       	std	Y+30, r25	; 0x1e
    2504:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	6a ad       	ldd	r22, Y+58	; 0x3a
    250a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_writePort>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e8       	ldi	r26, 0x80	; 128
    2514:	bf e3       	ldi	r27, 0x3F	; 63
    2516:	89 8f       	std	Y+25, r24	; 0x19
    2518:	9a 8f       	std	Y+26, r25	; 0x1a
    251a:	ab 8f       	std	Y+27, r26	; 0x1b
    251c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	69 8d       	ldd	r22, Y+25	; 0x19
    2520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a e7       	ldi	r20, 0x7A	; 122
    252c:	53 e4       	ldi	r21, 0x43	; 67
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8d 8b       	std	Y+21, r24	; 0x15
    2538:	9e 8b       	std	Y+22, r25	; 0x16
    253a:	af 8b       	std	Y+23, r26	; 0x17
    253c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    253e:	6d 89       	ldd	r22, Y+21	; 0x15
    2540:	7e 89       	ldd	r23, Y+22	; 0x16
    2542:	8f 89       	ldd	r24, Y+23	; 0x17
    2544:	98 8d       	ldd	r25, Y+24	; 0x18
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <LCD_sendCommand+0x258>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9c 8b       	std	Y+20, r25	; 0x14
    255c:	8b 8b       	std	Y+19, r24	; 0x13
    255e:	3f c0       	rjmp	.+126    	; 0x25de <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2560:	6d 89       	ldd	r22, Y+21	; 0x15
    2562:	7e 89       	ldd	r23, Y+22	; 0x16
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	98 8d       	ldd	r25, Y+24	; 0x18
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	69 8d       	ldd	r22, Y+25	; 0x19
    257a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    257c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9c 8b       	std	Y+20, r25	; 0x14
    259e:	8b 8b       	std	Y+19, r24	; 0x13
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <LCD_sendCommand+0x2b8>
    25a2:	89 e1       	ldi	r24, 0x19	; 25
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9a 8b       	std	Y+18, r25	; 0x12
    25a8:	89 8b       	std	Y+17, r24	; 0x11
    25aa:	89 89       	ldd	r24, Y+17	; 0x11
    25ac:	9a 89       	ldd	r25, Y+18	; 0x12
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <LCD_sendCommand+0x2a6>
    25b2:	9a 8b       	std	Y+18, r25	; 0x12
    25b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8b 89       	ldd	r24, Y+19	; 0x13
    25b8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9c 8b       	std	Y+20, r25	; 0x14
    25be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8b 89       	ldd	r24, Y+19	; 0x13
    25c2:	9c 89       	ldd	r25, Y+20	; 0x14
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <LCD_sendCommand+0x29a>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	6d 89       	ldd	r22, Y+21	; 0x15
    25cc:	7e 89       	ldd	r23, Y+22	; 0x16
    25ce:	8f 89       	ldd	r24, Y+23	; 0x17
    25d0:	98 8d       	ldd	r25, Y+24	; 0x18
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9c 8b       	std	Y+20, r25	; 0x14
    25dc:	8b 8b       	std	Y+19, r24	; 0x13
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	98 8b       	std	Y+16, r25	; 0x10
    25e4:	8f 87       	std	Y+15, r24	; 0x0f
    25e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e8:	98 89       	ldd	r25, Y+16	; 0x10
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <LCD_sendCommand+0x2e2>
    25ee:	98 8b       	std	Y+16, r25	; 0x10
    25f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	62 e0       	ldi	r22, 0x02	; 2
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	a0 e8       	ldi	r26, 0x80	; 128
    2602:	bf e3       	ldi	r27, 0x3F	; 63
    2604:	8b 87       	std	Y+11, r24	; 0x0b
    2606:	9c 87       	std	Y+12, r25	; 0x0c
    2608:	ad 87       	std	Y+13, r26	; 0x0d
    260a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260c:	6b 85       	ldd	r22, Y+11	; 0x0b
    260e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2610:	8d 85       	ldd	r24, Y+13	; 0x0d
    2612:	9e 85       	ldd	r25, Y+14	; 0x0e
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	4a e7       	ldi	r20, 0x7A	; 122
    261a:	53 e4       	ldi	r21, 0x43	; 67
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	8f 83       	std	Y+7, r24	; 0x07
    2626:	98 87       	std	Y+8, r25	; 0x08
    2628:	a9 87       	std	Y+9, r26	; 0x09
    262a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    262c:	6f 81       	ldd	r22, Y+7	; 0x07
    262e:	78 85       	ldd	r23, Y+8	; 0x08
    2630:	89 85       	ldd	r24, Y+9	; 0x09
    2632:	9a 85       	ldd	r25, Y+10	; 0x0a
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e8       	ldi	r20, 0x80	; 128
    263a:	5f e3       	ldi	r21, 0x3F	; 63
    263c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2640:	88 23       	and	r24, r24
    2642:	2c f4       	brge	.+10     	; 0x264e <LCD_sendCommand+0x346>
		__ticks = 1;
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	3f c0       	rjmp	.+126    	; 0x26cc <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	78 85       	ldd	r23, Y+8	; 0x08
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	3f ef       	ldi	r19, 0xFF	; 255
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	57 e4       	ldi	r21, 0x47	; 71
    265e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2662:	18 16       	cp	r1, r24
    2664:	4c f5       	brge	.+82     	; 0x26b8 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2666:	6b 85       	ldd	r22, Y+11	; 0x0b
    2668:	7c 85       	ldd	r23, Y+12	; 0x0c
    266a:	8d 85       	ldd	r24, Y+13	; 0x0d
    266c:	9e 85       	ldd	r25, Y+14	; 0x0e
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e2       	ldi	r20, 0x20	; 32
    2674:	51 e4       	ldi	r21, 0x41	; 65
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	bc 01       	movw	r22, r24
    2680:	cd 01       	movw	r24, r26
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
    268e:	0f c0       	rjmp	.+30     	; 0x26ae <LCD_sendCommand+0x3a6>
    2690:	89 e1       	ldi	r24, 0x19	; 25
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	9c 81       	ldd	r25, Y+4	; 0x04
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <LCD_sendCommand+0x394>
    26a0:	9c 83       	std	Y+4, r25	; 0x04
    26a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	69 f7       	brne	.-38     	; 0x2690 <LCD_sendCommand+0x388>
    26b6:	14 c0       	rjmp	.+40     	; 0x26e0 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ba:	78 85       	ldd	r23, Y+8	; 0x08
    26bc:	89 85       	ldd	r24, Y+9	; 0x09
    26be:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <LCD_sendCommand+0x3d0>
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26e0:	ea 96       	adiw	r28, 0x3a	; 58
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	ea 97       	sbiw	r28, 0x3a	; 58
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2708:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	a0 e8       	ldi	r26, 0x80	; 128
    2724:	bf e3       	ldi	r27, 0x3F	; 63
    2726:	8d ab       	std	Y+53, r24	; 0x35
    2728:	9e ab       	std	Y+54, r25	; 0x36
    272a:	af ab       	std	Y+55, r26	; 0x37
    272c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272e:	6d a9       	ldd	r22, Y+53	; 0x35
    2730:	7e a9       	ldd	r23, Y+54	; 0x36
    2732:	8f a9       	ldd	r24, Y+55	; 0x37
    2734:	98 ad       	ldd	r25, Y+56	; 0x38
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	4a e7       	ldi	r20, 0x7A	; 122
    273c:	53 e4       	ldi	r21, 0x43	; 67
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	89 ab       	std	Y+49, r24	; 0x31
    2748:	9a ab       	std	Y+50, r25	; 0x32
    274a:	ab ab       	std	Y+51, r26	; 0x33
    274c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    274e:	69 a9       	ldd	r22, Y+49	; 0x31
    2750:	7a a9       	ldd	r23, Y+50	; 0x32
    2752:	8b a9       	ldd	r24, Y+51	; 0x33
    2754:	9c a9       	ldd	r25, Y+52	; 0x34
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	5f e3       	ldi	r21, 0x3F	; 63
    275e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2762:	88 23       	and	r24, r24
    2764:	2c f4       	brge	.+10     	; 0x2770 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	98 ab       	std	Y+48, r25	; 0x30
    276c:	8f a7       	std	Y+47, r24	; 0x2f
    276e:	3f c0       	rjmp	.+126    	; 0x27ee <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2770:	69 a9       	ldd	r22, Y+49	; 0x31
    2772:	7a a9       	ldd	r23, Y+50	; 0x32
    2774:	8b a9       	ldd	r24, Y+51	; 0x33
    2776:	9c a9       	ldd	r25, Y+52	; 0x34
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	3f ef       	ldi	r19, 0xFF	; 255
    277c:	4f e7       	ldi	r20, 0x7F	; 127
    277e:	57 e4       	ldi	r21, 0x47	; 71
    2780:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2784:	18 16       	cp	r1, r24
    2786:	4c f5       	brge	.+82     	; 0x27da <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2788:	6d a9       	ldd	r22, Y+53	; 0x35
    278a:	7e a9       	ldd	r23, Y+54	; 0x36
    278c:	8f a9       	ldd	r24, Y+55	; 0x37
    278e:	98 ad       	ldd	r25, Y+56	; 0x38
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e2       	ldi	r20, 0x20	; 32
    2796:	51 e4       	ldi	r21, 0x41	; 65
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	98 ab       	std	Y+48, r25	; 0x30
    27ae:	8f a7       	std	Y+47, r24	; 0x2f
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <LCD_displayCharacter+0xde>
    27b2:	89 e1       	ldi	r24, 0x19	; 25
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9e a7       	std	Y+46, r25	; 0x2e
    27b8:	8d a7       	std	Y+45, r24	; 0x2d
    27ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    27bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <LCD_displayCharacter+0xcc>
    27c2:	9e a7       	std	Y+46, r25	; 0x2e
    27c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	98 ab       	std	Y+48, r25	; 0x30
    27ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d2:	98 a9       	ldd	r25, Y+48	; 0x30
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	69 f7       	brne	.-38     	; 0x27b2 <LCD_displayCharacter+0xc0>
    27d8:	14 c0       	rjmp	.+40     	; 0x2802 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27da:	69 a9       	ldd	r22, Y+49	; 0x31
    27dc:	7a a9       	ldd	r23, Y+50	; 0x32
    27de:	8b a9       	ldd	r24, Y+51	; 0x33
    27e0:	9c a9       	ldd	r25, Y+52	; 0x34
    27e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	98 ab       	std	Y+48, r25	; 0x30
    27ec:	8f a7       	std	Y+47, r24	; 0x2f
    27ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f0:	98 a9       	ldd	r25, Y+48	; 0x30
    27f2:	9c a7       	std	Y+44, r25	; 0x2c
    27f4:	8b a7       	std	Y+43, r24	; 0x2b
    27f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <LCD_displayCharacter+0x108>
    27fe:	9c a7       	std	Y+44, r25	; 0x2c
    2800:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	62 e0       	ldi	r22, 0x02	; 2
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a0 e8       	ldi	r26, 0x80	; 128
    2812:	bf e3       	ldi	r27, 0x3F	; 63
    2814:	8f a3       	std	Y+39, r24	; 0x27
    2816:	98 a7       	std	Y+40, r25	; 0x28
    2818:	a9 a7       	std	Y+41, r26	; 0x29
    281a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	6f a1       	ldd	r22, Y+39	; 0x27
    281e:	78 a5       	ldd	r23, Y+40	; 0x28
    2820:	89 a5       	ldd	r24, Y+41	; 0x29
    2822:	9a a5       	ldd	r25, Y+42	; 0x2a
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a e7       	ldi	r20, 0x7A	; 122
    282a:	53 e4       	ldi	r21, 0x43	; 67
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8b a3       	std	Y+35, r24	; 0x23
    2836:	9c a3       	std	Y+36, r25	; 0x24
    2838:	ad a3       	std	Y+37, r26	; 0x25
    283a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    283c:	6b a1       	ldd	r22, Y+35	; 0x23
    283e:	7c a1       	ldd	r23, Y+36	; 0x24
    2840:	8d a1       	ldd	r24, Y+37	; 0x25
    2842:	9e a1       	ldd	r25, Y+38	; 0x26
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	2c f4       	brge	.+10     	; 0x285e <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9a a3       	std	Y+34, r25	; 0x22
    285a:	89 a3       	std	Y+33, r24	; 0x21
    285c:	3f c0       	rjmp	.+126    	; 0x28dc <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    285e:	6b a1       	ldd	r22, Y+35	; 0x23
    2860:	7c a1       	ldd	r23, Y+36	; 0x24
    2862:	8d a1       	ldd	r24, Y+37	; 0x25
    2864:	9e a1       	ldd	r25, Y+38	; 0x26
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	4c f5       	brge	.+82     	; 0x28c8 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2876:	6f a1       	ldd	r22, Y+39	; 0x27
    2878:	78 a5       	ldd	r23, Y+40	; 0x28
    287a:	89 a5       	ldd	r24, Y+41	; 0x29
    287c:	9a a5       	ldd	r25, Y+42	; 0x2a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9a a3       	std	Y+34, r25	; 0x22
    289c:	89 a3       	std	Y+33, r24	; 0x21
    289e:	0f c0       	rjmp	.+30     	; 0x28be <LCD_displayCharacter+0x1cc>
    28a0:	89 e1       	ldi	r24, 0x19	; 25
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	98 a3       	std	Y+32, r25	; 0x20
    28a6:	8f 8f       	std	Y+31, r24	; 0x1f
    28a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28aa:	98 a1       	ldd	r25, Y+32	; 0x20
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <LCD_displayCharacter+0x1ba>
    28b0:	98 a3       	std	Y+32, r25	; 0x20
    28b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b4:	89 a1       	ldd	r24, Y+33	; 0x21
    28b6:	9a a1       	ldd	r25, Y+34	; 0x22
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28be:	89 a1       	ldd	r24, Y+33	; 0x21
    28c0:	9a a1       	ldd	r25, Y+34	; 0x22
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	69 f7       	brne	.-38     	; 0x28a0 <LCD_displayCharacter+0x1ae>
    28c6:	14 c0       	rjmp	.+40     	; 0x28f0 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ca:	7c a1       	ldd	r23, Y+36	; 0x24
    28cc:	8d a1       	ldd	r24, Y+37	; 0x25
    28ce:	9e a1       	ldd	r25, Y+38	; 0x26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
    28dc:	89 a1       	ldd	r24, Y+33	; 0x21
    28de:	9a a1       	ldd	r25, Y+34	; 0x22
    28e0:	9e 8f       	std	Y+30, r25	; 0x1e
    28e2:	8d 8f       	std	Y+29, r24	; 0x1d
    28e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <LCD_displayCharacter+0x1f6>
    28ec:	9e 8f       	std	Y+30, r25	; 0x1e
    28ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	6a ad       	ldd	r22, Y+58	; 0x3a
    28f4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_writePort>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e8       	ldi	r26, 0x80	; 128
    28fe:	bf e3       	ldi	r27, 0x3F	; 63
    2900:	89 8f       	std	Y+25, r24	; 0x19
    2902:	9a 8f       	std	Y+26, r25	; 0x1a
    2904:	ab 8f       	std	Y+27, r26	; 0x1b
    2906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	69 8d       	ldd	r22, Y+25	; 0x19
    290a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a e7       	ldi	r20, 0x7A	; 122
    2916:	53 e4       	ldi	r21, 0x43	; 67
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8d 8b       	std	Y+21, r24	; 0x15
    2922:	9e 8b       	std	Y+22, r25	; 0x16
    2924:	af 8b       	std	Y+23, r26	; 0x17
    2926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2928:	6d 89       	ldd	r22, Y+21	; 0x15
    292a:	7e 89       	ldd	r23, Y+22	; 0x16
    292c:	8f 89       	ldd	r24, Y+23	; 0x17
    292e:	98 8d       	ldd	r25, Y+24	; 0x18
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <LCD_displayCharacter+0x258>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	8b 8b       	std	Y+19, r24	; 0x13
    2948:	3f c0       	rjmp	.+126    	; 0x29c8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    294a:	6d 89       	ldd	r22, Y+21	; 0x15
    294c:	7e 89       	ldd	r23, Y+22	; 0x16
    294e:	8f 89       	ldd	r24, Y+23	; 0x17
    2950:	98 8d       	ldd	r25, Y+24	; 0x18
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	4c f5       	brge	.+82     	; 0x29b4 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2962:	69 8d       	ldd	r22, Y+25	; 0x19
    2964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9c 8b       	std	Y+20, r25	; 0x14
    2988:	8b 8b       	std	Y+19, r24	; 0x13
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <LCD_displayCharacter+0x2b8>
    298c:	89 e1       	ldi	r24, 0x19	; 25
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9a 8b       	std	Y+18, r25	; 0x12
    2992:	89 8b       	std	Y+17, r24	; 0x11
    2994:	89 89       	ldd	r24, Y+17	; 0x11
    2996:	9a 89       	ldd	r25, Y+18	; 0x12
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_displayCharacter+0x2a6>
    299c:	9a 8b       	std	Y+18, r25	; 0x12
    299e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	8b 89       	ldd	r24, Y+19	; 0x13
    29a2:	9c 89       	ldd	r25, Y+20	; 0x14
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	8b 89       	ldd	r24, Y+19	; 0x13
    29ac:	9c 89       	ldd	r25, Y+20	; 0x14
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	69 f7       	brne	.-38     	; 0x298c <LCD_displayCharacter+0x29a>
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	6d 89       	ldd	r22, Y+21	; 0x15
    29b6:	7e 89       	ldd	r23, Y+22	; 0x16
    29b8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ba:	98 8d       	ldd	r25, Y+24	; 0x18
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9c 8b       	std	Y+20, r25	; 0x14
    29c6:	8b 8b       	std	Y+19, r24	; 0x13
    29c8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ca:	9c 89       	ldd	r25, Y+20	; 0x14
    29cc:	98 8b       	std	Y+16, r25	; 0x10
    29ce:	8f 87       	std	Y+15, r24	; 0x0f
    29d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d2:	98 89       	ldd	r25, Y+16	; 0x10
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_displayCharacter+0x2e2>
    29d8:	98 8b       	std	Y+16, r25	; 0x10
    29da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	62 e0       	ldi	r22, 0x02	; 2
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_writePin>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e8       	ldi	r26, 0x80	; 128
    29ec:	bf e3       	ldi	r27, 0x3F	; 63
    29ee:	8b 87       	std	Y+11, r24	; 0x0b
    29f0:	9c 87       	std	Y+12, r25	; 0x0c
    29f2:	ad 87       	std	Y+13, r26	; 0x0d
    29f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a e7       	ldi	r20, 0x7A	; 122
    2a04:	53 e4       	ldi	r21, 0x43	; 67
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8f 83       	std	Y+7, r24	; 0x07
    2a10:	98 87       	std	Y+8, r25	; 0x08
    2a12:	a9 87       	std	Y+9, r26	; 0x09
    2a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <LCD_displayCharacter+0x346>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2a38:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3a:	78 85       	ldd	r23, Y+8	; 0x08
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_displayCharacter+0x3a6>
    2a7a:	89 e1       	ldi	r24, 0x19	; 25
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c 83       	std	Y+4, r25	; 0x04
    2a80:	8b 83       	std	Y+3, r24	; 0x03
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_displayCharacter+0x394>
    2a8a:	9c 83       	std	Y+4, r25	; 0x04
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9e 83       	std	Y+6, r25	; 0x06
    2a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_displayCharacter+0x388>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_displayCharacter+0x3d0>
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2aca:	ea 96       	adiw	r28, 0x3a	; 58
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <LCD_displayString+0x6>
    2ae2:	0f 92       	push	r0
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	9b 83       	std	Y+3, r25	; 0x03
    2aea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aec:	19 82       	std	Y+1, r1	; 0x01
    2aee:	0e c0       	rjmp	.+28     	; 0x2b0c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	9b 81       	ldd	r25, Y+3	; 0x03
    2afa:	fc 01       	movw	r30, r24
    2afc:	e2 0f       	add	r30, r18
    2afe:	f3 1f       	adc	r31, r19
    2b00:	80 81       	ld	r24, Z
    2b02:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_displayCharacter>
		i++;
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	8f 5f       	subi	r24, 0xFF	; 255
    2b0a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	fc 01       	movw	r30, r24
    2b18:	e2 0f       	add	r30, r18
    2b1a:	f3 1f       	adc	r31, r19
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 23       	and	r24, r24
    2b20:	39 f7       	brne	.-50     	; 0x2af0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <LCD_moveCursor+0x6>
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <LCD_moveCursor+0x8>
    2b36:	0f 92       	push	r0
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	8a 83       	std	Y+2, r24	; 0x02
    2b3e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	3d 83       	std	Y+5, r19	; 0x05
    2b48:	2c 83       	std	Y+4, r18	; 0x04
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4e:	81 30       	cpi	r24, 0x01	; 1
    2b50:	91 05       	cpc	r25, r1
    2b52:	c1 f0       	breq	.+48     	; 0x2b84 <LCD_moveCursor+0x56>
    2b54:	2c 81       	ldd	r18, Y+4	; 0x04
    2b56:	3d 81       	ldd	r19, Y+5	; 0x05
    2b58:	22 30       	cpi	r18, 0x02	; 2
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <LCD_moveCursor+0x3a>
    2b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b60:	9d 81       	ldd	r25, Y+5	; 0x05
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	61 f0       	breq	.+24     	; 0x2b7e <LCD_moveCursor+0x50>
    2b66:	19 c0       	rjmp	.+50     	; 0x2b9a <LCD_moveCursor+0x6c>
    2b68:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6c:	22 30       	cpi	r18, 0x02	; 2
    2b6e:	31 05       	cpc	r19, r1
    2b70:	69 f0       	breq	.+26     	; 0x2b8c <LCD_moveCursor+0x5e>
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	91 05       	cpc	r25, r1
    2b7a:	61 f0       	breq	.+24     	; 0x2b94 <LCD_moveCursor+0x66>
    2b7c:	0e c0       	rjmp	.+28     	; 0x2b9a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	0b c0       	rjmp	.+22     	; 0x2b9a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	80 5c       	subi	r24, 0xC0	; 192
    2b88:	89 83       	std	Y+1, r24	; 0x01
    2b8a:	07 c0       	rjmp	.+14     	; 0x2b9a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	80 5f       	subi	r24, 0xF0	; 240
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	03 c0       	rjmp	.+6      	; 0x2b9a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	80 5b       	subi	r24, 0xB0	; 176
    2b98:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	80 68       	ori	r24, 0x80	; 128
    2b9e:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <LCD_displayStringRowColumn+0x6>
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <LCD_displayStringRowColumn+0x8>
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	6a 83       	std	Y+2, r22	; 0x02
    2bc2:	5c 83       	std	Y+4, r21	; 0x04
    2bc4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	6a 81       	ldd	r22, Y+2	; 0x02
    2bca:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
}
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	62 97       	sbiw	r28, 0x12	; 18
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	9a 8b       	std	Y+18, r25	; 0x12
    2bfa:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2bfc:	89 89       	ldd	r24, Y+17	; 0x11
    2bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    2c00:	9e 01       	movw	r18, r28
    2c02:	2f 5f       	subi	r18, 0xFF	; 255
    2c04:	3f 4f       	sbci	r19, 0xFF	; 255
    2c06:	b9 01       	movw	r22, r18
    2c08:	4a e0       	ldi	r20, 0x0A	; 10
    2c0a:	50 e0       	ldi	r21, 0x00	; 0
    2c0c:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <itoa>
   LCD_displayString(buff); /* Display the string */
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_displayString>
}
    2c18:	62 96       	adiw	r28, 0x12	; 18
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
}
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init( UART_ConfigType* config )
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	00 d0       	rcall	.+0      	; 0x2c44 <UART_init+0x6>
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <UART_init+0x8>
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <UART_init+0xa>
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	9c 83       	std	Y+4, r25	; 0x04
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2c50:	1a 82       	std	Y+2, r1	; 0x02
    2c52:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c54:	eb e2       	ldi	r30, 0x2B	; 43
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 initially and i will change it later while i select the data bits.
	 * RXB8 & TXB8 not used for 8-bit data mode /////////
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c5c:	ea e2       	ldi	r30, 0x2A	; 42
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	88 e1       	ldi	r24, 0x18	; 24
    2c62:	80 83       	st	Z, r24
	 * USBS    = inserted according to configurations
	 * UCSZ1:0 = 11 For 8-bit data mode /////////////////////
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	/* Insert the value of parity type in bits 5:4, and number of stop bits according to configurations.*/
	UCSRC = (1<<URSEL) | ((UCSRC&~(0x30))|((config->parity)<<4)) | ((config->stopBits)<<USBS);
    2c64:	a0 e4       	ldi	r26, 0x40	; 64
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e0 e4       	ldi	r30, 0x40	; 64
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	28 2f       	mov	r18, r24
    2c70:	2f 7c       	andi	r18, 0xCF	; 207
    2c72:	eb 81       	ldd	r30, Y+3	; 0x03
    2c74:	fc 81       	ldd	r31, Y+4	; 0x04
    2c76:	83 81       	ldd	r24, Z+3	; 0x03
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	82 95       	swap	r24
    2c7e:	92 95       	swap	r25
    2c80:	90 7f       	andi	r25, 0xF0	; 240
    2c82:	98 27       	eor	r25, r24
    2c84:	80 7f       	andi	r24, 0xF0	; 240
    2c86:	98 27       	eor	r25, r24
    2c88:	82 2b       	or	r24, r18
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	20 68       	ori	r18, 0x80	; 128
    2c8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c90:	fc 81       	ldd	r31, Y+4	; 0x04
    2c92:	84 81       	ldd	r24, Z+4	; 0x04
    2c94:	88 2f       	mov	r24, r24
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	82 2b       	or	r24, r18
    2ca6:	8c 93       	st	X, r24

	/* Configure registers according to required data bits*/
	switch(config->dataLength)
    2ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    2caa:	fc 81       	ldd	r31, Y+4	; 0x04
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3e 83       	std	Y+6, r19	; 0x06
    2cb4:	2d 83       	std	Y+5, r18	; 0x05
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	99 23       	and	r25, r25
    2cbc:	34 f1       	brlt	.+76     	; 0x2d0a <UART_init+0xcc>
    2cbe:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc0:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc2:	24 30       	cpi	r18, 0x04	; 4
    2cc4:	31 05       	cpc	r19, r1
    2cc6:	34 f0       	brlt	.+12     	; 0x2cd4 <UART_init+0x96>
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	84 30       	cpi	r24, 0x04	; 4
    2cce:	91 05       	cpc	r25, r1
    2cd0:	71 f0       	breq	.+28     	; 0x2cee <UART_init+0xb0>
    2cd2:	1b c0       	rjmp	.+54     	; 0x2d0a <UART_init+0xcc>
	case BITS_5:
	case BITS_6:
	case BITS_7:
	case BITS_8:
		/* Keep UCSZ2 at UCSRB register 0 as it is and insert number of bits on UCSRC register at first 2 bits.*/
		UCSRC = (UCSRC&~(0x03))|(config->dataLength);
    2cd4:	a0 e4       	ldi	r26, 0x40	; 64
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e0 e4       	ldi	r30, 0x40	; 64
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	98 2f       	mov	r25, r24
    2ce0:	9c 7f       	andi	r25, 0xFC	; 252
    2ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce6:	82 81       	ldd	r24, Z+2	; 0x02
    2ce8:	89 2b       	or	r24, r25
    2cea:	8c 93       	st	X, r24
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <UART_init+0xcc>
		break;
	case BITS_9:
		/* Set UCSZ2 at UCSRB register to 1 and insert 0b11 at first 2 bits.*/
		UCSRB |= (1<<UCSZ2);
    2cee:	aa e2       	ldi	r26, 0x2A	; 42
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ea e2       	ldi	r30, 0x2A	; 42
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	84 60       	ori	r24, 0x04	; 4
    2cfa:	8c 93       	st	X, r24
		UCSRC |= 0x03;
    2cfc:	a0 e4       	ldi	r26, 0x40	; 64
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e0 e4       	ldi	r30, 0x40	; 64
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	83 60       	ori	r24, 0x03	; 3
    2d08:	8c 93       	st	X, r24
		break;
	}
	
	/* Calculate the UBRR register value according to configurations */
	ubrr_value = (uint16)(((F_CPU / (config->bitRate * 8UL))) - 1);
    2d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	cc 01       	movw	r24, r24
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	aa 1f       	adc	r26, r26
    2d1e:	bb 1f       	adc	r27, r27
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	aa 1f       	adc	r26, r26
    2d26:	bb 1f       	adc	r27, r27
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	9c 01       	movw	r18, r24
    2d32:	ad 01       	movw	r20, r26
    2d34:	80 e4       	ldi	r24, 0x40	; 64
    2d36:	92 e4       	ldi	r25, 0x42	; 66
    2d38:	af e0       	ldi	r26, 0x0F	; 15
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__udivmodsi4>
    2d44:	da 01       	movw	r26, r20
    2d46:	c9 01       	movw	r24, r18
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9a 83       	std	Y+2, r25	; 0x02
    2d4c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2d4e:	e0 e4       	ldi	r30, 0x40	; 64
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	89 2f       	mov	r24, r25
    2d58:	99 27       	eor	r25, r25
    2d5a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d5c:	e9 e2       	ldi	r30, 0x29	; 41
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	80 83       	st	Z, r24
}
    2d64:	26 96       	adiw	r28, 0x06	; 6
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	0f 92       	push	r0
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d82:	eb e2       	ldi	r30, 0x2B	; 43
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	88 2f       	mov	r24, r24
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	80 72       	andi	r24, 0x20	; 32
    2d8e:	90 70       	andi	r25, 0x00	; 0
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	b9 f3       	breq	.-18     	; 0x2d82 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d94:	ec e2       	ldi	r30, 0x2C	; 44
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d9c:	0f 90       	pop	r0
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2dac:	eb e2       	ldi	r30, 0x2B	; 43
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	88 23       	and	r24, r24
    2db4:	dc f7       	brge	.-10     	; 0x2dac <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2db6:	ec e2       	ldi	r30, 0x2C	; 44
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
}
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <UART_sendString+0x6>
    2dc8:	0f 92       	push	r0
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	9b 83       	std	Y+3, r25	; 0x03
    2dd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dd2:	19 82       	std	Y+1, r1	; 0x01
    2dd4:	0e c0       	rjmp	.+28     	; 0x2df2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	9b 81       	ldd	r25, Y+3	; 0x03
    2de0:	fc 01       	movw	r30, r24
    2de2:	e2 0f       	add	r30, r18
    2de4:	f3 1f       	adc	r31, r19
    2de6:	80 81       	ld	r24, Z
    2de8:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <UART_sendByte>
		i++;
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	8f 5f       	subi	r24, 0xFF	; 255
    2df0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	e2 0f       	add	r30, r18
    2e00:	f3 1f       	adc	r31, r19
    2e02:	80 81       	ld	r24, Z
    2e04:	88 23       	and	r24, r24
    2e06:	39 f7       	brne	.-50     	; 0x2dd6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <UART_receiveString+0xa>
    2e1e:	0f 92       	push	r0
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	9b 83       	std	Y+3, r25	; 0x03
    2e26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e28:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	9b 81       	ldd	r25, Y+3	; 0x03
    2e34:	8c 01       	movw	r16, r24
    2e36:	02 0f       	add	r16, r18
    2e38:	13 1f       	adc	r17, r19
    2e3a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    2e3e:	f8 01       	movw	r30, r16
    2e40:	80 83       	st	Z, r24
    2e42:	0f c0       	rjmp	.+30     	; 0x2e62 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	9b 81       	ldd	r25, Y+3	; 0x03
    2e54:	8c 01       	movw	r16, r24
    2e56:	02 0f       	add	r16, r18
    2e58:	13 1f       	adc	r17, r19
    2e5a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <UART_recieveByte>
    2e5e:	f8 01       	movw	r30, r16
    2e60:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	e2 0f       	add	r30, r18
    2e70:	f3 1f       	adc	r31, r19
    2e72:	80 81       	ld	r24, Z
    2e74:	83 32       	cpi	r24, 0x23	; 35
    2e76:	31 f7       	brne	.-52     	; 0x2e44 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	fc 01       	movw	r30, r24
    2e84:	e2 0f       	add	r30, r18
    2e86:	f3 1f       	adc	r31, r19
    2e88:	10 82       	st	Z, r1
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	08 95       	ret

00002e9a <__udivmodsi4>:
    2e9a:	a1 e2       	ldi	r26, 0x21	; 33
    2e9c:	1a 2e       	mov	r1, r26
    2e9e:	aa 1b       	sub	r26, r26
    2ea0:	bb 1b       	sub	r27, r27
    2ea2:	fd 01       	movw	r30, r26
    2ea4:	0d c0       	rjmp	.+26     	; 0x2ec0 <__udivmodsi4_ep>

00002ea6 <__udivmodsi4_loop>:
    2ea6:	aa 1f       	adc	r26, r26
    2ea8:	bb 1f       	adc	r27, r27
    2eaa:	ee 1f       	adc	r30, r30
    2eac:	ff 1f       	adc	r31, r31
    2eae:	a2 17       	cp	r26, r18
    2eb0:	b3 07       	cpc	r27, r19
    2eb2:	e4 07       	cpc	r30, r20
    2eb4:	f5 07       	cpc	r31, r21
    2eb6:	20 f0       	brcs	.+8      	; 0x2ec0 <__udivmodsi4_ep>
    2eb8:	a2 1b       	sub	r26, r18
    2eba:	b3 0b       	sbc	r27, r19
    2ebc:	e4 0b       	sbc	r30, r20
    2ebe:	f5 0b       	sbc	r31, r21

00002ec0 <__udivmodsi4_ep>:
    2ec0:	66 1f       	adc	r22, r22
    2ec2:	77 1f       	adc	r23, r23
    2ec4:	88 1f       	adc	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	1a 94       	dec	r1
    2eca:	69 f7       	brne	.-38     	; 0x2ea6 <__udivmodsi4_loop>
    2ecc:	60 95       	com	r22
    2ece:	70 95       	com	r23
    2ed0:	80 95       	com	r24
    2ed2:	90 95       	com	r25
    2ed4:	9b 01       	movw	r18, r22
    2ed6:	ac 01       	movw	r20, r24
    2ed8:	bd 01       	movw	r22, r26
    2eda:	cf 01       	movw	r24, r30
    2edc:	08 95       	ret

00002ede <__prologue_saves__>:
    2ede:	2f 92       	push	r2
    2ee0:	3f 92       	push	r3
    2ee2:	4f 92       	push	r4
    2ee4:	5f 92       	push	r5
    2ee6:	6f 92       	push	r6
    2ee8:	7f 92       	push	r7
    2eea:	8f 92       	push	r8
    2eec:	9f 92       	push	r9
    2eee:	af 92       	push	r10
    2ef0:	bf 92       	push	r11
    2ef2:	cf 92       	push	r12
    2ef4:	df 92       	push	r13
    2ef6:	ef 92       	push	r14
    2ef8:	ff 92       	push	r15
    2efa:	0f 93       	push	r16
    2efc:	1f 93       	push	r17
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	ca 1b       	sub	r28, r26
    2f08:	db 0b       	sbc	r29, r27
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	09 94       	ijmp

00002f16 <__epilogue_restores__>:
    2f16:	2a 88       	ldd	r2, Y+18	; 0x12
    2f18:	39 88       	ldd	r3, Y+17	; 0x11
    2f1a:	48 88       	ldd	r4, Y+16	; 0x10
    2f1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f20:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f22:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f24:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f26:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f28:	b9 84       	ldd	r11, Y+9	; 0x09
    2f2a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f2c:	df 80       	ldd	r13, Y+7	; 0x07
    2f2e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f30:	fd 80       	ldd	r15, Y+5	; 0x05
    2f32:	0c 81       	ldd	r16, Y+4	; 0x04
    2f34:	1b 81       	ldd	r17, Y+3	; 0x03
    2f36:	aa 81       	ldd	r26, Y+2	; 0x02
    2f38:	b9 81       	ldd	r27, Y+1	; 0x01
    2f3a:	ce 0f       	add	r28, r30
    2f3c:	d1 1d       	adc	r29, r1
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	ed 01       	movw	r28, r26
    2f4a:	08 95       	ret

00002f4c <itoa>:
    2f4c:	fb 01       	movw	r30, r22
    2f4e:	9f 01       	movw	r18, r30
    2f50:	e8 94       	clt
    2f52:	42 30       	cpi	r20, 0x02	; 2
    2f54:	c4 f0       	brlt	.+48     	; 0x2f86 <itoa+0x3a>
    2f56:	45 32       	cpi	r20, 0x25	; 37
    2f58:	b4 f4       	brge	.+44     	; 0x2f86 <itoa+0x3a>
    2f5a:	4a 30       	cpi	r20, 0x0A	; 10
    2f5c:	29 f4       	brne	.+10     	; 0x2f68 <itoa+0x1c>
    2f5e:	97 fb       	bst	r25, 7
    2f60:	1e f4       	brtc	.+6      	; 0x2f68 <itoa+0x1c>
    2f62:	90 95       	com	r25
    2f64:	81 95       	neg	r24
    2f66:	9f 4f       	sbci	r25, 0xFF	; 255
    2f68:	64 2f       	mov	r22, r20
    2f6a:	77 27       	eor	r23, r23
    2f6c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
    2f70:	80 5d       	subi	r24, 0xD0	; 208
    2f72:	8a 33       	cpi	r24, 0x3A	; 58
    2f74:	0c f0       	brlt	.+2      	; 0x2f78 <itoa+0x2c>
    2f76:	89 5d       	subi	r24, 0xD9	; 217
    2f78:	81 93       	st	Z+, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	a1 f7       	brne	.-24     	; 0x2f68 <itoa+0x1c>
    2f80:	16 f4       	brtc	.+4      	; 0x2f86 <itoa+0x3a>
    2f82:	5d e2       	ldi	r21, 0x2D	; 45
    2f84:	51 93       	st	Z+, r21
    2f86:	10 82       	st	Z, r1
    2f88:	c9 01       	movw	r24, r18
    2f8a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <strrev>

00002f8e <strrev>:
    2f8e:	dc 01       	movw	r26, r24
    2f90:	fc 01       	movw	r30, r24
    2f92:	67 2f       	mov	r22, r23
    2f94:	71 91       	ld	r23, Z+
    2f96:	77 23       	and	r23, r23
    2f98:	e1 f7       	brne	.-8      	; 0x2f92 <strrev+0x4>
    2f9a:	32 97       	sbiw	r30, 0x02	; 2
    2f9c:	04 c0       	rjmp	.+8      	; 0x2fa6 <strrev+0x18>
    2f9e:	7c 91       	ld	r23, X
    2fa0:	6d 93       	st	X+, r22
    2fa2:	70 83       	st	Z, r23
    2fa4:	62 91       	ld	r22, -Z
    2fa6:	ae 17       	cp	r26, r30
    2fa8:	bf 07       	cpc	r27, r31
    2faa:	c8 f3       	brcs	.-14     	; 0x2f9e <strrev+0x10>
    2fac:	08 95       	ret

00002fae <__udivmodhi4>:
    2fae:	aa 1b       	sub	r26, r26
    2fb0:	bb 1b       	sub	r27, r27
    2fb2:	51 e1       	ldi	r21, 0x11	; 17
    2fb4:	07 c0       	rjmp	.+14     	; 0x2fc4 <__udivmodhi4_ep>

00002fb6 <__udivmodhi4_loop>:
    2fb6:	aa 1f       	adc	r26, r26
    2fb8:	bb 1f       	adc	r27, r27
    2fba:	a6 17       	cp	r26, r22
    2fbc:	b7 07       	cpc	r27, r23
    2fbe:	10 f0       	brcs	.+4      	; 0x2fc4 <__udivmodhi4_ep>
    2fc0:	a6 1b       	sub	r26, r22
    2fc2:	b7 0b       	sbc	r27, r23

00002fc4 <__udivmodhi4_ep>:
    2fc4:	88 1f       	adc	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	5a 95       	dec	r21
    2fca:	a9 f7       	brne	.-22     	; 0x2fb6 <__udivmodhi4_loop>
    2fcc:	80 95       	com	r24
    2fce:	90 95       	com	r25
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	08 95       	ret

00002fd6 <_exit>:
    2fd6:	f8 94       	cli

00002fd8 <__stop_program>:
    2fd8:	ff cf       	rjmp	.-2      	; 0x2fd8 <__stop_program>
