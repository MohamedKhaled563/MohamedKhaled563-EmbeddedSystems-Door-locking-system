
HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00001ae2  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080011a  0080011a  00001c30  2**0
                  ALLOC
  3 .stab         000028ec  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001319  00000000  00000000  0000451c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_3>
      10:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_8>
      24:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 33       	cpi	r26, 0x33	; 51
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
      8a:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer1Tick>:
 * Description:
 * This function used as callback function for timer1 to help making the delay.
 * This function will be called each when the Compare or overflow interrupt of TIMER1 occurs.
 */
static void timer1Tick( void )
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	g_timer1Tick++;
      9a:	80 91 1a 01 	lds	r24, 0x011A
      9e:	90 91 1b 01 	lds	r25, 0x011B
      a2:	a0 91 1c 01 	lds	r26, 0x011C
      a6:	b0 91 1d 01 	lds	r27, 0x011D
      aa:	01 96       	adiw	r24, 0x01	; 1
      ac:	a1 1d       	adc	r26, r1
      ae:	b1 1d       	adc	r27, r1
      b0:	80 93 1a 01 	sts	0x011A, r24
      b4:	90 93 1b 01 	sts	0x011B, r25
      b8:	a0 93 1c 01 	sts	0x011C, r26
      bc:	b0 93 1d 01 	sts	0x011D, r27
}
      c0:	cf 91       	pop	r28
      c2:	df 91       	pop	r29
      c4:	08 95       	ret

000000c6 <delay_ms>:
 * Description:
 * Make busy waiting delay by n ms.
 * This function uses Timer 1 in compare match mode.
 */
void delay_ms( uint32 n )
{
      c6:	df 93       	push	r29
      c8:	cf 93       	push	r28
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	60 97       	sbiw	r28, 0x10	; 16
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	f8 94       	cli
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	cd bf       	out	0x3d, r28	; 61
      da:	68 87       	std	Y+8, r22	; 0x08
      dc:	79 87       	std	Y+9, r23	; 0x09
      de:	8a 87       	std	Y+10, r24	; 0x0a
      e0:	9b 87       	std	Y+11, r25	; 0x0b
	g_timer1Tick = 0;
      e2:	10 92 1a 01 	sts	0x011A, r1
      e6:	10 92 1b 01 	sts	0x011B, r1
      ea:	10 92 1c 01 	sts	0x011C, r1
      ee:	10 92 1d 01 	sts	0x011D, r1
	 * Configuration structure for timer.
	 * timer id, required mode of operation, initial value to be loaded before timer start,
	 * compare value that is used only in compare mode and prescaler value.
	 */
	/* T_TIMER1 = 1us, to get 1ms, Put compare value = 1000 to get 1ms. */
	TIMER_ConfigType config = {TIMER1_ID, COMPARE_MODE, 0, 1000, F_CPU_8};
      f2:	ce 01       	movw	r24, r28
      f4:	01 96       	adiw	r24, 0x01	; 1
      f6:	9d 87       	std	Y+13, r25	; 0x0d
      f8:	8c 87       	std	Y+12, r24	; 0x0c
      fa:	ed e0       	ldi	r30, 0x0D	; 13
      fc:	f1 e0       	ldi	r31, 0x01	; 1
      fe:	ff 87       	std	Y+15, r31	; 0x0f
     100:	ee 87       	std	Y+14, r30	; 0x0e
     102:	f7 e0       	ldi	r31, 0x07	; 7
     104:	f8 8b       	std	Y+16, r31	; 0x10
     106:	ee 85       	ldd	r30, Y+14	; 0x0e
     108:	ff 85       	ldd	r31, Y+15	; 0x0f
     10a:	00 80       	ld	r0, Z
     10c:	8e 85       	ldd	r24, Y+14	; 0x0e
     10e:	9f 85       	ldd	r25, Y+15	; 0x0f
     110:	01 96       	adiw	r24, 0x01	; 1
     112:	9f 87       	std	Y+15, r25	; 0x0f
     114:	8e 87       	std	Y+14, r24	; 0x0e
     116:	ec 85       	ldd	r30, Y+12	; 0x0c
     118:	fd 85       	ldd	r31, Y+13	; 0x0d
     11a:	00 82       	st	Z, r0
     11c:	8c 85       	ldd	r24, Y+12	; 0x0c
     11e:	9d 85       	ldd	r25, Y+13	; 0x0d
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	9d 87       	std	Y+13, r25	; 0x0d
     124:	8c 87       	std	Y+12, r24	; 0x0c
     126:	98 89       	ldd	r25, Y+16	; 0x10
     128:	91 50       	subi	r25, 0x01	; 1
     12a:	98 8b       	std	Y+16, r25	; 0x10
     12c:	e8 89       	ldd	r30, Y+16	; 0x10
     12e:	ee 23       	and	r30, r30
     130:	51 f7       	brne	.-44     	; 0x106 <delay_ms+0x40>
	TIMER_Init(&config);
     132:	ce 01       	movw	r24, r28
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	0e 94 19 09 	call	0x1232	; 0x1232 <TIMER_Init>
	TIMER_setCallBack(timer1Tick, TIMER1_ID);
     13a:	89 e4       	ldi	r24, 0x49	; 73
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TIMER_setCallBack>
	/* Busy wait for n ms. */
	while( g_timer1Tick< n );
     144:	20 91 1a 01 	lds	r18, 0x011A
     148:	30 91 1b 01 	lds	r19, 0x011B
     14c:	40 91 1c 01 	lds	r20, 0x011C
     150:	50 91 1d 01 	lds	r21, 0x011D
     154:	88 85       	ldd	r24, Y+8	; 0x08
     156:	99 85       	ldd	r25, Y+9	; 0x09
     158:	aa 85       	ldd	r26, Y+10	; 0x0a
     15a:	bb 85       	ldd	r27, Y+11	; 0x0b
     15c:	28 17       	cp	r18, r24
     15e:	39 07       	cpc	r19, r25
     160:	4a 07       	cpc	r20, r26
     162:	5b 07       	cpc	r21, r27
     164:	78 f3       	brcs	.-34     	; 0x144 <delay_ms+0x7e>
	TIMER_Deinit(TIMER1_ID);
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <TIMER_Deinit>
}
     16c:	60 96       	adiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <main>:
uint8 password[PASSWORD_LENGTH];
uint8 reEnteredPassword[PASSWORD_LENGTH];
uint8 tryingPassword[PASSWORD_LENGTH];

int main ( void )
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	2b 97       	sbiw	r28, 0x0b	; 11
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     192:	af e5       	ldi	r26, 0x5F	; 95
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	ef e5       	ldi	r30, 0x5F	; 95
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	80 68       	ori	r24, 0x80	; 128
     19e:	8c 93       	st	X, r24
	UART_ConfigType config = {9600,BITS_8,NO_PARITY,ONE_STOP_BIT};
     1a0:	ce 01       	movw	r24, r28
     1a2:	02 96       	adiw	r24, 0x02	; 2
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	8f 83       	std	Y+7, r24	; 0x07
     1a8:	e4 e1       	ldi	r30, 0x14	; 20
     1aa:	f1 e0       	ldi	r31, 0x01	; 1
     1ac:	fa 87       	std	Y+10, r31	; 0x0a
     1ae:	e9 87       	std	Y+9, r30	; 0x09
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	fb 87       	std	Y+11, r31	; 0x0b
     1b4:	e9 85       	ldd	r30, Y+9	; 0x09
     1b6:	fa 85       	ldd	r31, Y+10	; 0x0a
     1b8:	00 80       	ld	r0, Z
     1ba:	89 85       	ldd	r24, Y+9	; 0x09
     1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	9a 87       	std	Y+10, r25	; 0x0a
     1c2:	89 87       	std	Y+9, r24	; 0x09
     1c4:	ef 81       	ldd	r30, Y+7	; 0x07
     1c6:	f8 85       	ldd	r31, Y+8	; 0x08
     1c8:	00 82       	st	Z, r0
     1ca:	8f 81       	ldd	r24, Y+7	; 0x07
     1cc:	98 85       	ldd	r25, Y+8	; 0x08
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	98 87       	std	Y+8, r25	; 0x08
     1d2:	8f 83       	std	Y+7, r24	; 0x07
     1d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     1d6:	91 50       	subi	r25, 0x01	; 1
     1d8:	9b 87       	std	Y+11, r25	; 0x0b
     1da:	eb 85       	ldd	r30, Y+11	; 0x0b
     1dc:	ee 23       	and	r30, r30
     1de:	51 f7       	brne	.-44     	; 0x1b4 <main+0x36>
	UART_init(&config);
     1e0:	ce 01       	movw	r24, r28
     1e2:	02 96       	adiw	r24, 0x02	; 2
     1e4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_init>

	LCD_init();
     1e8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <LCD_init>
			while(UART_recieveByte() != CONTROL_MCU_READY);
     1ec:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     1f0:	80 31       	cpi	r24, 0x10	; 16
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x6e>
			UART_sendByte(CONTROL_ERASE_SAVED_PASSWORD);
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	while(UART_recieveByte() != CONTROL_MCU_READY);
     1fa:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     1fe:	80 31       	cpi	r24, 0x10	; 16
     200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x7c>
	UART_sendByte(CONTROL_CHECK_SAVED_PASSWORD_FLAG);
     202:	83 e0       	ldi	r24, 0x03	; 3
     204:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	UART_sendByte(HMI_MCU_READY);
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	uint8 flag = UART_recieveByte();
     20e:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     212:	89 83       	std	Y+1, r24	; 0x01
	/* If there is no saved password, get one.*/
	if(flag == LOGIC_LOW)
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	88 23       	and	r24, r24
     218:	61 f4       	brne	.+24     	; 0x232 <main+0xb4>
	{
		do
		{
			requestNewPassword();
     21a:	0e 94 5f 01 	call	0x2be	; 0x2be <requestNewPassword>
		}while(	checkNewPassword() == LOGIC_LOW);
     21e:	0e 94 24 02 	call	0x448	; 0x448 <checkNewPassword>
     222:	88 23       	and	r24, r24
     224:	d1 f3       	breq	.-12     	; 0x21a <main+0x9c>
		delay_ms(1000);
     226:	68 ee       	ldi	r22, 0xE8	; 232
     228:	73 e0       	ldi	r23, 0x03	; 3
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	//	UART_sendByte(CONTROL_ERASE_SAVED_PASSWORD);


	while(1)
	{
		displayMainOptions();
     232:	0e 94 82 02 	call	0x504	; 0x504 <displayMainOptions>
     236:	fd cf       	rjmp	.-6      	; 0x232 <main+0xb4>

00000238 <getPassword>:

	return 0;
}

void getPassword( uint8* pass, uint8* counter )
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <getPassword+0x6>
     23e:	00 d0       	rcall	.+0      	; 0x240 <getPassword+0x8>
     240:	0f 92       	push	r0
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
     246:	9b 83       	std	Y+3, r25	; 0x03
     248:	8a 83       	std	Y+2, r24	; 0x02
     24a:	7d 83       	std	Y+5, r23	; 0x05
     24c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 key;

	LCD_moveCursor(1, 0);
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
	*counter = 0;
     256:	ec 81       	ldd	r30, Y+4	; 0x04
     258:	fd 81       	ldd	r31, Y+5	; 0x05
     25a:	10 82       	st	Z, r1

	while(1)
	{
		key = KEYPAD_getPressedKey();
     25c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <KEYPAD_getPressedKey>
     260:	89 83       	std	Y+1, r24	; 0x01
		pass[*counter] = key;
     262:	ec 81       	ldd	r30, Y+4	; 0x04
     264:	fd 81       	ldd	r31, Y+5	; 0x05
     266:	80 81       	ld	r24, Z
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	8a 81       	ldd	r24, Y+2	; 0x02
     26e:	9b 81       	ldd	r25, Y+3	; 0x03
     270:	fc 01       	movw	r30, r24
     272:	e2 0f       	add	r30, r18
     274:	f3 1f       	adc	r31, r19
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	80 83       	st	Z, r24
		/*If user press enter -> end of edit.*/
		if(key == 13)
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	8d 30       	cpi	r24, 0x0D	; 13
     27e:	71 f4       	brne	.+28     	; 0x29c <getPassword+0x64>
		{
			delay_ms(400);
     280:	60 e9       	ldi	r22, 0x90	; 144
     282:	71 e0       	ldi	r23, 0x01	; 1
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		}
		LCD_displayCharacter('*');
		delay_ms(400);
		(*counter)++;
	}
}
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	08 95       	ret
		if(key == 13)
		{
			delay_ms(400);
			break;
		}
		LCD_displayCharacter('*');
     29c:	8a e2       	ldi	r24, 0x2A	; 42
     29e:	0e 94 2c 08 	call	0x1058	; 0x1058 <LCD_displayCharacter>
		delay_ms(400);
     2a2:	60 e9       	ldi	r22, 0x90	; 144
     2a4:	71 e0       	ldi	r23, 0x01	; 1
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		(*counter)++;
     2ae:	ec 81       	ldd	r30, Y+4	; 0x04
     2b0:	fd 81       	ldd	r31, Y+5	; 0x05
     2b2:	80 81       	ld	r24, Z
     2b4:	8f 5f       	subi	r24, 0xFF	; 255
     2b6:	ec 81       	ldd	r30, Y+4	; 0x04
     2b8:	fd 81       	ldd	r31, Y+5	; 0x05
     2ba:	80 83       	st	Z, r24
     2bc:	cf cf       	rjmp	.-98     	; 0x25c <getPassword+0x24>

000002be <requestNewPassword>:
	}
}

void requestNewPassword( void )
{
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <requestNewPassword+0x6>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <requestNewPassword+0x8>
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <requestNewPassword+0xa>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	8d 83       	std	Y+5, r24	; 0x05
	LCD_clearScreen();
     2d0:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
     2d4:	1a c0       	rjmp	.+52     	; 0x30a <requestNewPassword+0x4c>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     2d6:	1d 82       	std	Y+5, r1	; 0x05
		/* Request new password from user and then press Enter key*/
		LCD_displayString("Enter new pass.:");
     2d8:	80 e6       	ldi	r24, 0x60	; 96
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		getPassword(password, &passLength);
     2e0:	84 e2       	ldi	r24, 0x24	; 36
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	9e 01       	movw	r18, r28
     2e6:	2a 5f       	subi	r18, 0xFA	; 250
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	b9 01       	movw	r22, r18
     2ec:	0e 94 1c 01 	call	0x238	; 0x238 <getPassword>
		uint8 result = checkPasswordLength( passLength );
     2f0:	8e 81       	ldd	r24, Y+6	; 0x06
     2f2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <checkPasswordLength>
     2f6:	8c 83       	std	Y+4, r24	; 0x04

		if(result == LOGIC_LOW)
     2f8:	8c 81       	ldd	r24, Y+4	; 0x04
     2fa:	88 23       	and	r24, r24
     2fc:	31 f4       	brne	.+12     	; 0x30a <requestNewPassword+0x4c>
		{
			errorFlag = LOGIC_HIGH;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	8d 83       	std	Y+5, r24	; 0x05
			Error error = PASSWORD_LENGTH_ERROR;
     302:	1b 82       	std	Y+3, r1	; 0x03
			displayError(error);
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	0e 94 b3 01 	call	0x366	; 0x366 <displayError>
{
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
	LCD_clearScreen();
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     30a:	8d 81       	ldd	r24, Y+5	; 0x05
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	19 f3       	breq	.-58     	; 0x2d6 <requestNewPassword+0x18>
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}

	LCD_clearScreen();
     310:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>

	errorFlag = LOGIC_HIGH;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	8d 83       	std	Y+5, r24	; 0x05
     318:	1a c0       	rjmp	.+52     	; 0x34e <requestNewPassword+0x90>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     31a:	1d 82       	std	Y+5, r1	; 0x05
		LCD_displayString("Re-enter pass.:");
     31c:	81 e7       	ldi	r24, 0x71	; 113
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		getPassword(reEnteredPassword, &passLength);
     324:	89 e2       	ldi	r24, 0x29	; 41
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	9e 01       	movw	r18, r28
     32a:	2a 5f       	subi	r18, 0xFA	; 250
     32c:	3f 4f       	sbci	r19, 0xFF	; 255
     32e:	b9 01       	movw	r22, r18
     330:	0e 94 1c 01 	call	0x238	; 0x238 <getPassword>

		uint8 result = checkPasswordLength( passLength );
     334:	8e 81       	ldd	r24, Y+6	; 0x06
     336:	0e 94 50 03 	call	0x6a0	; 0x6a0 <checkPasswordLength>
     33a:	8a 83       	std	Y+2, r24	; 0x02

		if(result == LOGIC_LOW)
     33c:	8a 81       	ldd	r24, Y+2	; 0x02
     33e:	88 23       	and	r24, r24
     340:	31 f4       	brne	.+12     	; 0x34e <requestNewPassword+0x90>
		{
			errorFlag = LOGIC_HIGH;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	8d 83       	std	Y+5, r24	; 0x05
			Error error = PASSWORD_LENGTH_ERROR;
     346:	19 82       	std	Y+1, r1	; 0x01
			displayError(error);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	0e 94 b3 01 	call	0x366	; 0x366 <displayError>

	LCD_clearScreen();

	errorFlag = LOGIC_HIGH;
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     34e:	8d 81       	ldd	r24, Y+5	; 0x05
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	19 f3       	breq	.-58     	; 0x31a <requestNewPassword+0x5c>
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}

}
     354:	26 96       	adiw	r28, 0x06	; 6
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	cf 91       	pop	r28
     362:	df 91       	pop	r29
     364:	08 95       	ret

00000366 <displayError>:

void displayError( Error error )
{
     366:	df 93       	push	r29
     368:	cf 93       	push	r28
     36a:	00 d0       	rcall	.+0      	; 0x36c <displayError+0x6>
     36c:	0f 92       	push	r0
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	89 83       	std	Y+1, r24	; 0x01
	switch(error)
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	3b 83       	std	Y+3, r19	; 0x03
     37c:	2a 83       	std	Y+2, r18	; 0x02
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	9b 81       	ldd	r25, Y+3	; 0x03
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	91 05       	cpc	r25, r1
     386:	29 f1       	breq	.+74     	; 0x3d2 <displayError+0x6c>
     388:	2a 81       	ldd	r18, Y+2	; 0x02
     38a:	3b 81       	ldd	r19, Y+3	; 0x03
     38c:	22 30       	cpi	r18, 0x02	; 2
     38e:	31 05       	cpc	r19, r1
     390:	d9 f1       	breq	.+118    	; 0x408 <displayError+0xa2>
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	9b 81       	ldd	r25, Y+3	; 0x03
     396:	00 97       	sbiw	r24, 0x00	; 0
     398:	09 f0       	breq	.+2      	; 0x39c <displayError+0x36>
     39a:	50 c0       	rjmp	.+160    	; 0x43c <displayError+0xd6>
	{
	case PASSWORD_LENGTH_ERROR:
		LCD_clearScreen();
     39c:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("Password must be");
     3a8:	81 e8       	ldi	r24, 0x81	; 129
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		LCD_moveCursor(1, 0);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("5 characters");
     3b8:	82 e9       	ldi	r24, 0x92	; 146
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		delay_ms(1000);
     3c0:	68 ee       	ldi	r22, 0xE8	; 232
     3c2:	73 e0       	ldi	r23, 0x03	; 3
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     3cc:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
     3d0:	35 c0       	rjmp	.+106    	; 0x43c <displayError+0xd6>
		break;
	case PASSWORD_REENTERING_ERROR:
		LCD_clearScreen();
     3d2:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		LCD_moveCursor(0, 6);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	66 e0       	ldi	r22, 0x06	; 6
     3da:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("Error");
     3de:	8f e9       	ldi	r24, 0x9F	; 159
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		LCD_moveCursor(1, 3);
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	63 e0       	ldi	r22, 0x03	; 3
     3ea:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("Try Again");
     3ee:	85 ea       	ldi	r24, 0xA5	; 165
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		delay_ms(1000);
     3f6:	68 ee       	ldi	r22, 0xE8	; 232
     3f8:	73 e0       	ldi	r23, 0x03	; 3
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     402:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
     406:	1a c0       	rjmp	.+52     	; 0x43c <displayError+0xd6>
		break;
	case PASSWORD_INCORRECT:
		LCD_clearScreen();
     408:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		LCD_moveCursor(0, 6);
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	66 e0       	ldi	r22, 0x06	; 6
     410:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("Error");
     414:	8f e9       	ldi	r24, 0x9F	; 159
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		LCD_moveCursor(1, 0);
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("Incorrect Pass.");
     424:	8f ea       	ldi	r24, 0xAF	; 175
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		delay_ms(1000);
     42c:	68 ee       	ldi	r22, 0xE8	; 232
     42e:	73 e0       	ldi	r23, 0x03	; 3
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     438:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		break;
	}
}
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <checkNewPassword>:

uint8 checkNewPassword( void )
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	00 d0       	rcall	.+0      	; 0x44e <checkNewPassword+0x6>
     44e:	0f 92       	push	r0
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != CONTROL_MCU_READY);
     454:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     458:	80 31       	cpi	r24, 0x10	; 16
     45a:	e1 f7       	brne	.-8      	; 0x454 <checkNewPassword+0xc>
	UART_sendByte(CONTROL_COMPARE_TWO_PASSWORDS);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
     462:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     466:	80 31       	cpi	r24, 0x10	; 16
     468:	e1 f7       	brne	.-8      	; 0x462 <__stack+0x3>
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     46a:	1a 82       	std	Y+2, r1	; 0x02
     46c:	0c c0       	rjmp	.+24     	; 0x486 <__stack+0x27>
	{
		UART_sendByte(password[i]);
     46e:	8a 81       	ldd	r24, Y+2	; 0x02
     470:	88 2f       	mov	r24, r24
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	fc 01       	movw	r30, r24
     476:	ec 5d       	subi	r30, 0xDC	; 220
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	80 81       	ld	r24, Z
     47c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	while(UART_recieveByte() != CONTROL_MCU_READY);
	UART_sendByte(CONTROL_COMPARE_TWO_PASSWORDS);

	while(UART_recieveByte() != CONTROL_MCU_READY);
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	8f 5f       	subi	r24, 0xFF	; 255
     484:	8a 83       	std	Y+2, r24	; 0x02
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	85 30       	cpi	r24, 0x05	; 5
     48a:	88 f3       	brcs	.-30     	; 0x46e <__stack+0xf>
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     48c:	19 82       	std	Y+1, r1	; 0x01
     48e:	0c c0       	rjmp	.+24     	; 0x4a8 <__stack+0x49>
	{
		UART_sendByte(reEnteredPassword[i]);
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	88 2f       	mov	r24, r24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	e7 5d       	subi	r30, 0xD7	; 215
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	80 81       	ld	r24, Z
     49e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	85 30       	cpi	r24, 0x05	; 5
     4ac:	88 f3       	brcs	.-30     	; 0x490 <__stack+0x31>
	{
		UART_sendByte(reEnteredPassword[i]);
	}

	UART_sendByte(HMI_MCU_READY);
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	uint8 compareResult = UART_recieveByte();
     4b4:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     4b8:	8b 83       	std	Y+3, r24	; 0x03

	if(compareResult)
     4ba:	8b 81       	ldd	r24, Y+3	; 0x03
     4bc:	88 23       	and	r24, r24
     4be:	59 f0       	breq	.+22     	; 0x4d6 <__stack+0x77>
	{
		LCD_clearScreen();
     4c0:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		LCD_moveCursor(0, 6);
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	66 e0       	ldi	r22, 0x06	; 6
     4c8:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("Match");
     4cc:	8f eb       	ldi	r24, 0xBF	; 191
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
     4d4:	0a c0       	rjmp	.+20     	; 0x4ea <__stack+0x8b>
	}
	else
	{
		LCD_clearScreen();
     4d6:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		LCD_moveCursor(0, 4);
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	64 e0       	ldi	r22, 0x04	; 4
     4de:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
		LCD_displayString("Mis Match");
     4e2:	85 ec       	ldi	r24, 0xC5	; 197
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
	}
	delay_ms(1000);
     4ea:	68 ee       	ldi	r22, 0xE8	; 232
     4ec:	73 e0       	ldi	r23, 0x03	; 3
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	return compareResult;
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	cf 91       	pop	r28
     500:	df 91       	pop	r29
     502:	08 95       	ret

00000504 <displayMainOptions>:

void displayMainOptions( void )
{
     504:	df 93       	push	r29
     506:	cf 93       	push	r28
     508:	00 d0       	rcall	.+0      	; 0x50a <displayMainOptions+0x6>
     50a:	00 d0       	rcall	.+0      	; 0x50c <displayMainOptions+0x8>
     50c:	00 d0       	rcall	.+0      	; 0x50e <displayMainOptions+0xa>
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     512:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
	LCD_displayString("+ : Open Door.");
     516:	8f ec       	ldi	r24, 0xCF	; 207
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
	LCD_moveCursor(1, 0);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
	LCD_displayString("- : Change Pass.");
     526:	8e ed       	ldi	r24, 0xDE	; 222
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
	uint8 key = KEYPAD_getPressedKey();
     52e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <KEYPAD_getPressedKey>
     532:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(400);
     534:	60 e9       	ldi	r22, 0x90	; 144
     536:	71 e0       	ldi	r23, 0x01	; 1
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	switch(key)
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	3e 83       	std	Y+6, r19	; 0x06
     548:	2d 83       	std	Y+5, r18	; 0x05
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	9e 81       	ldd	r25, Y+6	; 0x06
     54e:	8b 32       	cpi	r24, 0x2B	; 43
     550:	91 05       	cpc	r25, r1
     552:	39 f0       	breq	.+14     	; 0x562 <displayMainOptions+0x5e>
     554:	2d 81       	ldd	r18, Y+5	; 0x05
     556:	3e 81       	ldd	r19, Y+6	; 0x06
     558:	2d 32       	cpi	r18, 0x2D	; 45
     55a:	31 05       	cpc	r19, r1
     55c:	09 f4       	brne	.+2      	; 0x560 <displayMainOptions+0x5c>
     55e:	4c c0       	rjmp	.+152    	; 0x5f8 <displayMainOptions+0xf4>
     560:	67 c0       	rjmp	.+206    	; 0x630 <displayMainOptions+0x12c>
	{
	case '+':
		requestPassword();
     562:	0e 94 21 03 	call	0x642	; 0x642 <requestPassword>
     566:	07 c0       	rjmp	.+14     	; 0x576 <displayMainOptions+0x72>
		while(!checkTryingPassword())
		{
			Error error = PASSWORD_INCORRECT;
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	8b 83       	std	Y+3, r24	; 0x03
			displayError(error);
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	0e 94 b3 01 	call	0x366	; 0x366 <displayError>
			requestPassword();
     572:	0e 94 21 03 	call	0x642	; 0x642 <requestPassword>
	delay_ms(400);
	switch(key)
	{
	case '+':
		requestPassword();
		while(!checkTryingPassword())
     576:	0e 94 6d 03 	call	0x6da	; 0x6da <checkTryingPassword>
     57a:	88 23       	and	r24, r24
     57c:	a9 f3       	breq	.-22     	; 0x568 <displayMainOptions+0x64>
		{
			Error error = PASSWORD_INCORRECT;
			displayError(error);
			requestPassword();
		}
		LCD_clearScreen();
     57e:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		LCD_displayString("Openning");
     582:	8f ee       	ldi	r24, 0xEF	; 239
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     58a:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     58e:	80 31       	cpi	r24, 0x10	; 16
     590:	e1 f7       	brne	.-8      	; 0x58a <displayMainOptions+0x86>
		UART_sendByte(CONTROL_MOTOR_ROTATE_CW);
     592:	86 e0       	ldi	r24, 0x06	; 6
     594:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
		delay_ms(1000);
     598:	68 ee       	ldi	r22, 0xE8	; 232
     59a:	73 e0       	ldi	r23, 0x03	; 3
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     5a4:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     5a8:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     5ac:	80 31       	cpi	r24, 0x10	; 16
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <displayMainOptions+0xa4>
		UART_sendByte(CONTROL_MOTOR_STOP);
     5b0:	87 e0       	ldi	r24, 0x07	; 7
     5b2:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
		delay_ms(500);
     5b6:	64 ef       	ldi	r22, 0xF4	; 244
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_displayString("Closing");
     5c2:	88 ef       	ldi	r24, 0xF8	; 248
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		UART_sendByte(CONTROL_MOTOR_ROTATE_CCW);
     5ca:	88 e0       	ldi	r24, 0x08	; 8
     5cc:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     5d0:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     5d4:	80 31       	cpi	r24, 0x10	; 16
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <displayMainOptions+0xcc>
		delay_ms(1000);
     5d8:	68 ee       	ldi	r22, 0xE8	; 232
     5da:	73 e0       	ldi	r23, 0x03	; 3
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
		LCD_clearScreen();
     5e4:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
		while(UART_recieveByte() != CONTROL_MCU_READY);
     5e8:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     5ec:	80 31       	cpi	r24, 0x10	; 16
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <displayMainOptions+0xe4>
		UART_sendByte(CONTROL_MOTOR_STOP);
     5f0:	87 e0       	ldi	r24, 0x07	; 7
     5f2:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
     5f6:	1c c0       	rjmp	.+56     	; 0x630 <displayMainOptions+0x12c>
		break;
	case '-':
		requestPassword();
     5f8:	0e 94 21 03 	call	0x642	; 0x642 <requestPassword>
     5fc:	07 c0       	rjmp	.+14     	; 0x60c <displayMainOptions+0x108>
		while(!checkTryingPassword())
		{
			Error error = PASSWORD_INCORRECT;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	8a 83       	std	Y+2, r24	; 0x02
			displayError(error);
     602:	8a 81       	ldd	r24, Y+2	; 0x02
     604:	0e 94 b3 01 	call	0x366	; 0x366 <displayError>
			requestPassword();
     608:	0e 94 21 03 	call	0x642	; 0x642 <requestPassword>
		while(UART_recieveByte() != CONTROL_MCU_READY);
		UART_sendByte(CONTROL_MOTOR_STOP);
		break;
	case '-':
		requestPassword();
		while(!checkTryingPassword())
     60c:	0e 94 6d 03 	call	0x6da	; 0x6da <checkTryingPassword>
     610:	88 23       	and	r24, r24
     612:	a9 f3       	breq	.-22     	; 0x5fe <displayMainOptions+0xfa>
		{
			Error error = PASSWORD_INCORRECT;
			displayError(error);
			requestPassword();
		}
		requestNewPassword();
     614:	0e 94 5f 01 	call	0x2be	; 0x2be <requestNewPassword>
     618:	07 c0       	rjmp	.+14     	; 0x628 <displayMainOptions+0x124>
		while(!checkNewPassword())
		{
			Error error = PASSWORD_REENTERING_ERROR;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	89 83       	std	Y+1, r24	; 0x01
			displayError(error);
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	0e 94 b3 01 	call	0x366	; 0x366 <displayError>
			requestNewPassword();
     624:	0e 94 5f 01 	call	0x2be	; 0x2be <requestNewPassword>
			Error error = PASSWORD_INCORRECT;
			displayError(error);
			requestPassword();
		}
		requestNewPassword();
		while(!checkNewPassword())
     628:	0e 94 24 02 	call	0x448	; 0x448 <checkNewPassword>
     62c:	88 23       	and	r24, r24
     62e:	a9 f3       	breq	.-22     	; 0x61a <displayMainOptions+0x116>
		}
		break;
	default:
		break;
	}
}
     630:	26 96       	adiw	r28, 0x06	; 6
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <requestPassword>:

void requestPassword( void )
{
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	00 d0       	rcall	.+0      	; 0x648 <requestPassword+0x6>
     648:	00 d0       	rcall	.+0      	; 0x64a <requestPassword+0x8>
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8b 83       	std	Y+3, r24	; 0x03
	LCD_clearScreen();
     652:	0e 94 0f 09 	call	0x121e	; 0x121e <LCD_clearScreen>
     656:	1a c0       	rjmp	.+52     	; 0x68c <requestPassword+0x4a>
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
	{
		errorFlag = LOGIC_LOW;
     658:	1b 82       	std	Y+3, r1	; 0x03
		/* Request password from user and then press Enter key*/
		LCD_displayString("Enter pass.:");
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
		getPassword(tryingPassword, &passLength);
     662:	8e e2       	ldi	r24, 0x2E	; 46
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	9e 01       	movw	r18, r28
     668:	2c 5f       	subi	r18, 0xFC	; 252
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	b9 01       	movw	r22, r18
     66e:	0e 94 1c 01 	call	0x238	; 0x238 <getPassword>
		uint8 result = checkPasswordLength( passLength );
     672:	8c 81       	ldd	r24, Y+4	; 0x04
     674:	0e 94 50 03 	call	0x6a0	; 0x6a0 <checkPasswordLength>
     678:	8a 83       	std	Y+2, r24	; 0x02

		if(result == LOGIC_LOW)
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	88 23       	and	r24, r24
     67e:	31 f4       	brne	.+12     	; 0x68c <requestPassword+0x4a>
		{
			errorFlag = LOGIC_HIGH;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	8b 83       	std	Y+3, r24	; 0x03
			Error error = PASSWORD_LENGTH_ERROR;
     684:	19 82       	std	Y+1, r1	; 0x01
			displayError(error);
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	0e 94 b3 01 	call	0x366	; 0x366 <displayError>
{
	uint8 passLength;
	boolean errorFlag = LOGIC_HIGH;
	LCD_clearScreen();
	/* Enter password till pressing enter */
	while(errorFlag == LOGIC_HIGH)
     68c:	8b 81       	ldd	r24, Y+3	; 0x03
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	19 f3       	breq	.-58     	; 0x658 <requestPassword+0x16>
			errorFlag = LOGIC_HIGH;
			Error error = PASSWORD_LENGTH_ERROR;
			displayError(error);
		}
	}
}
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	cf 91       	pop	r28
     69c:	df 91       	pop	r29
     69e:	08 95       	ret

000006a0 <checkPasswordLength>:

uint8 checkPasswordLength(uint8 length)
{
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	0f 92       	push	r0
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	89 83       	std	Y+1, r24	; 0x01
	/* Display error if password is not 5 characters. */
	while(UART_recieveByte() != CONTROL_MCU_READY);
     6ac:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     6b0:	80 31       	cpi	r24, 0x10	; 16
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <checkPasswordLength+0xc>
	UART_sendByte(CONTROL_CHECK_PASSWORD_LENGTH);
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
     6ba:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     6be:	80 31       	cpi	r24, 0x10	; 16
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <checkPasswordLength+0x1a>
	UART_sendByte(length);
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>

	UART_sendByte(HMI_MCU_READY);
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	return UART_recieveByte();
     6ce:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
}
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <checkTryingPassword>:

uint8 checkTryingPassword( void )
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	0f 92       	push	r0
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != CONTROL_MCU_READY);
     6e4:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     6e8:	80 31       	cpi	r24, 0x10	; 16
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <checkTryingPassword+0xa>
	UART_sendByte(CHECK_PASSWORD_WITH_SAVED_PASSWORD);
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>

	while(UART_recieveByte() != CONTROL_MCU_READY);
     6f2:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
     6f6:	80 31       	cpi	r24, 0x10	; 16
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <checkTryingPassword+0x18>
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     6fa:	19 82       	std	Y+1, r1	; 0x01
     6fc:	0c c0       	rjmp	.+24     	; 0x716 <checkTryingPassword+0x3c>
	{
		UART_sendByte(tryingPassword[i]);
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	fc 01       	movw	r30, r24
     706:	e2 5d       	subi	r30, 0xD2	; 210
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	80 81       	ld	r24, Z
     70c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	while(UART_recieveByte() != CONTROL_MCU_READY);
	UART_sendByte(CHECK_PASSWORD_WITH_SAVED_PASSWORD);

	while(UART_recieveByte() != CONTROL_MCU_READY);
	/* Sending password */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	85 30       	cpi	r24, 0x05	; 5
     71a:	88 f3       	brcs	.-30     	; 0x6fe <checkTryingPassword+0x24>
	{
		UART_sendByte(tryingPassword[i]);
	}

	UART_sendByte(HMI_MCU_READY);
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
	return UART_recieveByte();
     722:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
}
     726:	0f 90       	pop	r0
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	00 d0       	rcall	.+0      	; 0x734 <GPIO_setupPinDirection+0x6>
     734:	00 d0       	rcall	.+0      	; 0x736 <GPIO_setupPinDirection+0x8>
     736:	0f 92       	push	r0
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	6a 83       	std	Y+2, r22	; 0x02
     740:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	08 f0       	brcs	.+2      	; 0x74a <GPIO_setupPinDirection+0x1c>
     748:	d5 c0       	rjmp	.+426    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	84 30       	cpi	r24, 0x04	; 4
     74e:	08 f0       	brcs	.+2      	; 0x752 <GPIO_setupPinDirection+0x24>
     750:	d1 c0       	rjmp	.+418    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	28 2f       	mov	r18, r24
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	3d 83       	std	Y+5, r19	; 0x05
     75a:	2c 83       	std	Y+4, r18	; 0x04
     75c:	8c 81       	ldd	r24, Y+4	; 0x04
     75e:	9d 81       	ldd	r25, Y+5	; 0x05
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	91 05       	cpc	r25, r1
     764:	09 f4       	brne	.+2      	; 0x768 <GPIO_setupPinDirection+0x3a>
     766:	43 c0       	rjmp	.+134    	; 0x7ee <GPIO_setupPinDirection+0xc0>
     768:	2c 81       	ldd	r18, Y+4	; 0x04
     76a:	3d 81       	ldd	r19, Y+5	; 0x05
     76c:	22 30       	cpi	r18, 0x02	; 2
     76e:	31 05       	cpc	r19, r1
     770:	2c f4       	brge	.+10     	; 0x77c <GPIO_setupPinDirection+0x4e>
     772:	8c 81       	ldd	r24, Y+4	; 0x04
     774:	9d 81       	ldd	r25, Y+5	; 0x05
     776:	00 97       	sbiw	r24, 0x00	; 0
     778:	71 f0       	breq	.+28     	; 0x796 <GPIO_setupPinDirection+0x68>
     77a:	bc c0       	rjmp	.+376    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
     77c:	2c 81       	ldd	r18, Y+4	; 0x04
     77e:	3d 81       	ldd	r19, Y+5	; 0x05
     780:	22 30       	cpi	r18, 0x02	; 2
     782:	31 05       	cpc	r19, r1
     784:	09 f4       	brne	.+2      	; 0x788 <GPIO_setupPinDirection+0x5a>
     786:	5f c0       	rjmp	.+190    	; 0x846 <GPIO_setupPinDirection+0x118>
     788:	8c 81       	ldd	r24, Y+4	; 0x04
     78a:	9d 81       	ldd	r25, Y+5	; 0x05
     78c:	83 30       	cpi	r24, 0x03	; 3
     78e:	91 05       	cpc	r25, r1
     790:	09 f4       	brne	.+2      	; 0x794 <GPIO_setupPinDirection+0x66>
     792:	85 c0       	rjmp	.+266    	; 0x89e <GPIO_setupPinDirection+0x170>
     794:	af c0       	rjmp	.+350    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	a1 f4       	brne	.+40     	; 0x7c4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     79c:	aa e3       	ldi	r26, 0x3A	; 58
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	ea e3       	ldi	r30, 0x3A	; 58
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	48 2f       	mov	r20, r24
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	28 2f       	mov	r18, r24
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	02 2e       	mov	r0, r18
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <GPIO_setupPinDirection+0x8c>
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	0a 94       	dec	r0
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <GPIO_setupPinDirection+0x88>
     7be:	84 2b       	or	r24, r20
     7c0:	8c 93       	st	X, r24
     7c2:	98 c0       	rjmp	.+304    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     7c4:	aa e3       	ldi	r26, 0x3A	; 58
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	ea e3       	ldi	r30, 0x3A	; 58
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	48 2f       	mov	r20, r24
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	28 2f       	mov	r18, r24
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	02 2e       	mov	r0, r18
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <GPIO_setupPinDirection+0xb4>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	0a 94       	dec	r0
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <GPIO_setupPinDirection+0xb0>
     7e6:	80 95       	com	r24
     7e8:	84 23       	and	r24, r20
     7ea:	8c 93       	st	X, r24
     7ec:	83 c0       	rjmp	.+262    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	a1 f4       	brne	.+40     	; 0x81c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     7f4:	a7 e3       	ldi	r26, 0x37	; 55
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	e7 e3       	ldi	r30, 0x37	; 55
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	48 2f       	mov	r20, r24
     800:	8a 81       	ldd	r24, Y+2	; 0x02
     802:	28 2f       	mov	r18, r24
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	02 2e       	mov	r0, r18
     80c:	02 c0       	rjmp	.+4      	; 0x812 <GPIO_setupPinDirection+0xe4>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	0a 94       	dec	r0
     814:	e2 f7       	brpl	.-8      	; 0x80e <GPIO_setupPinDirection+0xe0>
     816:	84 2b       	or	r24, r20
     818:	8c 93       	st	X, r24
     81a:	6c c0       	rjmp	.+216    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     81c:	a7 e3       	ldi	r26, 0x37	; 55
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e7 e3       	ldi	r30, 0x37	; 55
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	48 2f       	mov	r20, r24
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	28 2f       	mov	r18, r24
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 2e       	mov	r0, r18
     834:	02 c0       	rjmp	.+4      	; 0x83a <GPIO_setupPinDirection+0x10c>
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <GPIO_setupPinDirection+0x108>
     83e:	80 95       	com	r24
     840:	84 23       	and	r24, r20
     842:	8c 93       	st	X, r24
     844:	57 c0       	rjmp	.+174    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	a1 f4       	brne	.+40     	; 0x874 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     84c:	a4 e3       	ldi	r26, 0x34	; 52
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	e4 e3       	ldi	r30, 0x34	; 52
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	48 2f       	mov	r20, r24
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	28 2f       	mov	r18, r24
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	02 2e       	mov	r0, r18
     864:	02 c0       	rjmp	.+4      	; 0x86a <GPIO_setupPinDirection+0x13c>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	0a 94       	dec	r0
     86c:	e2 f7       	brpl	.-8      	; 0x866 <GPIO_setupPinDirection+0x138>
     86e:	84 2b       	or	r24, r20
     870:	8c 93       	st	X, r24
     872:	40 c0       	rjmp	.+128    	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     874:	a4 e3       	ldi	r26, 0x34	; 52
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e4 e3       	ldi	r30, 0x34	; 52
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	48 2f       	mov	r20, r24
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 2e       	mov	r0, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <GPIO_setupPinDirection+0x164>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <GPIO_setupPinDirection+0x160>
     896:	80 95       	com	r24
     898:	84 23       	and	r24, r20
     89a:	8c 93       	st	X, r24
     89c:	2b c0       	rjmp	.+86     	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	a1 f4       	brne	.+40     	; 0x8cc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     8a4:	a1 e3       	ldi	r26, 0x31	; 49
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e1 e3       	ldi	r30, 0x31	; 49
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	48 2f       	mov	r20, r24
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 2e       	mov	r0, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <GPIO_setupPinDirection+0x194>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	0a 94       	dec	r0
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <GPIO_setupPinDirection+0x190>
     8c6:	84 2b       	or	r24, r20
     8c8:	8c 93       	st	X, r24
     8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     8cc:	a1 e3       	ldi	r26, 0x31	; 49
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	e1 e3       	ldi	r30, 0x31	; 49
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	48 2f       	mov	r20, r24
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	28 2f       	mov	r18, r24
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	02 2e       	mov	r0, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <GPIO_setupPinDirection+0x1bc>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	0a 94       	dec	r0
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <GPIO_setupPinDirection+0x1b8>
     8ee:	80 95       	com	r24
     8f0:	84 23       	and	r24, r20
     8f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	08 95       	ret

00000904 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	00 d0       	rcall	.+0      	; 0x90a <GPIO_writePin+0x6>
     90a:	00 d0       	rcall	.+0      	; 0x90c <GPIO_writePin+0x8>
     90c:	0f 92       	push	r0
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	89 83       	std	Y+1, r24	; 0x01
     914:	6a 83       	std	Y+2, r22	; 0x02
     916:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	88 30       	cpi	r24, 0x08	; 8
     91c:	08 f0       	brcs	.+2      	; 0x920 <GPIO_writePin+0x1c>
     91e:	d5 c0       	rjmp	.+426    	; 0xaca <GPIO_writePin+0x1c6>
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	08 f0       	brcs	.+2      	; 0x928 <GPIO_writePin+0x24>
     926:	d1 c0       	rjmp	.+418    	; 0xaca <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	3d 83       	std	Y+5, r19	; 0x05
     930:	2c 83       	std	Y+4, r18	; 0x04
     932:	8c 81       	ldd	r24, Y+4	; 0x04
     934:	9d 81       	ldd	r25, Y+5	; 0x05
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	91 05       	cpc	r25, r1
     93a:	09 f4       	brne	.+2      	; 0x93e <GPIO_writePin+0x3a>
     93c:	43 c0       	rjmp	.+134    	; 0x9c4 <GPIO_writePin+0xc0>
     93e:	2c 81       	ldd	r18, Y+4	; 0x04
     940:	3d 81       	ldd	r19, Y+5	; 0x05
     942:	22 30       	cpi	r18, 0x02	; 2
     944:	31 05       	cpc	r19, r1
     946:	2c f4       	brge	.+10     	; 0x952 <GPIO_writePin+0x4e>
     948:	8c 81       	ldd	r24, Y+4	; 0x04
     94a:	9d 81       	ldd	r25, Y+5	; 0x05
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	71 f0       	breq	.+28     	; 0x96c <GPIO_writePin+0x68>
     950:	bc c0       	rjmp	.+376    	; 0xaca <GPIO_writePin+0x1c6>
     952:	2c 81       	ldd	r18, Y+4	; 0x04
     954:	3d 81       	ldd	r19, Y+5	; 0x05
     956:	22 30       	cpi	r18, 0x02	; 2
     958:	31 05       	cpc	r19, r1
     95a:	09 f4       	brne	.+2      	; 0x95e <GPIO_writePin+0x5a>
     95c:	5f c0       	rjmp	.+190    	; 0xa1c <GPIO_writePin+0x118>
     95e:	8c 81       	ldd	r24, Y+4	; 0x04
     960:	9d 81       	ldd	r25, Y+5	; 0x05
     962:	83 30       	cpi	r24, 0x03	; 3
     964:	91 05       	cpc	r25, r1
     966:	09 f4       	brne	.+2      	; 0x96a <GPIO_writePin+0x66>
     968:	85 c0       	rjmp	.+266    	; 0xa74 <GPIO_writePin+0x170>
     96a:	af c0       	rjmp	.+350    	; 0xaca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	a1 f4       	brne	.+40     	; 0x99a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     972:	ab e3       	ldi	r26, 0x3B	; 59
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	eb e3       	ldi	r30, 0x3B	; 59
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	48 2f       	mov	r20, r24
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	28 2f       	mov	r18, r24
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	02 2e       	mov	r0, r18
     98a:	02 c0       	rjmp	.+4      	; 0x990 <GPIO_writePin+0x8c>
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	0a 94       	dec	r0
     992:	e2 f7       	brpl	.-8      	; 0x98c <GPIO_writePin+0x88>
     994:	84 2b       	or	r24, r20
     996:	8c 93       	st	X, r24
     998:	98 c0       	rjmp	.+304    	; 0xaca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     99a:	ab e3       	ldi	r26, 0x3B	; 59
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	eb e3       	ldi	r30, 0x3B	; 59
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	48 2f       	mov	r20, r24
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	28 2f       	mov	r18, r24
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	02 2e       	mov	r0, r18
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <GPIO_writePin+0xb4>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	0a 94       	dec	r0
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <GPIO_writePin+0xb0>
     9bc:	80 95       	com	r24
     9be:	84 23       	and	r24, r20
     9c0:	8c 93       	st	X, r24
     9c2:	83 c0       	rjmp	.+262    	; 0xaca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	a1 f4       	brne	.+40     	; 0x9f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     9ca:	a8 e3       	ldi	r26, 0x38	; 56
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	e8 e3       	ldi	r30, 0x38	; 56
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	48 2f       	mov	r20, r24
     9d6:	8a 81       	ldd	r24, Y+2	; 0x02
     9d8:	28 2f       	mov	r18, r24
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	02 2e       	mov	r0, r18
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <GPIO_writePin+0xe4>
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	0a 94       	dec	r0
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <GPIO_writePin+0xe0>
     9ec:	84 2b       	or	r24, r20
     9ee:	8c 93       	st	X, r24
     9f0:	6c c0       	rjmp	.+216    	; 0xaca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     9f2:	a8 e3       	ldi	r26, 0x38	; 56
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	e8 e3       	ldi	r30, 0x38	; 56
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	48 2f       	mov	r20, r24
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	28 2f       	mov	r18, r24
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	02 2e       	mov	r0, r18
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <GPIO_writePin+0x10c>
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	0a 94       	dec	r0
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <GPIO_writePin+0x108>
     a14:	80 95       	com	r24
     a16:	84 23       	and	r24, r20
     a18:	8c 93       	st	X, r24
     a1a:	57 c0       	rjmp	.+174    	; 0xaca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	a1 f4       	brne	.+40     	; 0xa4a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     a22:	a5 e3       	ldi	r26, 0x35	; 53
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e5 e3       	ldi	r30, 0x35	; 53
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	48 2f       	mov	r20, r24
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	28 2f       	mov	r18, r24
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	02 2e       	mov	r0, r18
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <GPIO_writePin+0x13c>
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	0a 94       	dec	r0
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <GPIO_writePin+0x138>
     a44:	84 2b       	or	r24, r20
     a46:	8c 93       	st	X, r24
     a48:	40 c0       	rjmp	.+128    	; 0xaca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     a4a:	a5 e3       	ldi	r26, 0x35	; 53
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	e5 e3       	ldi	r30, 0x35	; 53
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	48 2f       	mov	r20, r24
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	28 2f       	mov	r18, r24
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	02 2e       	mov	r0, r18
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <GPIO_writePin+0x164>
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	0a 94       	dec	r0
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <GPIO_writePin+0x160>
     a6c:	80 95       	com	r24
     a6e:	84 23       	and	r24, r20
     a70:	8c 93       	st	X, r24
     a72:	2b c0       	rjmp	.+86     	; 0xaca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	a1 f4       	brne	.+40     	; 0xaa2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     a7a:	a2 e3       	ldi	r26, 0x32	; 50
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e2 e3       	ldi	r30, 0x32	; 50
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	48 2f       	mov	r20, r24
     a86:	8a 81       	ldd	r24, Y+2	; 0x02
     a88:	28 2f       	mov	r18, r24
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	02 2e       	mov	r0, r18
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <GPIO_writePin+0x194>
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	0a 94       	dec	r0
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <GPIO_writePin+0x190>
     a9c:	84 2b       	or	r24, r20
     a9e:	8c 93       	st	X, r24
     aa0:	14 c0       	rjmp	.+40     	; 0xaca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     aa2:	a2 e3       	ldi	r26, 0x32	; 50
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e2 e3       	ldi	r30, 0x32	; 50
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	48 2f       	mov	r20, r24
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	02 2e       	mov	r0, r18
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <GPIO_writePin+0x1bc>
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	0a 94       	dec	r0
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <GPIO_writePin+0x1b8>
     ac4:	80 95       	com	r24
     ac6:	84 23       	and	r24, r20
     ac8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	cf 91       	pop	r28
     ad6:	df 91       	pop	r29
     ad8:	08 95       	ret

00000ada <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	00 d0       	rcall	.+0      	; 0xae0 <GPIO_readPin+0x6>
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <GPIO_readPin+0x8>
     ae2:	0f 92       	push	r0
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	8a 83       	std	Y+2, r24	; 0x02
     aea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     aec:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	88 30       	cpi	r24, 0x08	; 8
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <GPIO_readPin+0x1c>
     af4:	84 c0       	rjmp	.+264    	; 0xbfe <GPIO_readPin+0x124>
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	08 f0       	brcs	.+2      	; 0xafe <GPIO_readPin+0x24>
     afc:	80 c0       	rjmp	.+256    	; 0xbfe <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	28 2f       	mov	r18, r24
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	3d 83       	std	Y+5, r19	; 0x05
     b06:	2c 83       	std	Y+4, r18	; 0x04
     b08:	4c 81       	ldd	r20, Y+4	; 0x04
     b0a:	5d 81       	ldd	r21, Y+5	; 0x05
     b0c:	41 30       	cpi	r20, 0x01	; 1
     b0e:	51 05       	cpc	r21, r1
     b10:	79 f1       	breq	.+94     	; 0xb70 <GPIO_readPin+0x96>
     b12:	8c 81       	ldd	r24, Y+4	; 0x04
     b14:	9d 81       	ldd	r25, Y+5	; 0x05
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	91 05       	cpc	r25, r1
     b1a:	34 f4       	brge	.+12     	; 0xb28 <GPIO_readPin+0x4e>
     b1c:	2c 81       	ldd	r18, Y+4	; 0x04
     b1e:	3d 81       	ldd	r19, Y+5	; 0x05
     b20:	21 15       	cp	r18, r1
     b22:	31 05       	cpc	r19, r1
     b24:	69 f0       	breq	.+26     	; 0xb40 <GPIO_readPin+0x66>
     b26:	6b c0       	rjmp	.+214    	; 0xbfe <GPIO_readPin+0x124>
     b28:	4c 81       	ldd	r20, Y+4	; 0x04
     b2a:	5d 81       	ldd	r21, Y+5	; 0x05
     b2c:	42 30       	cpi	r20, 0x02	; 2
     b2e:	51 05       	cpc	r21, r1
     b30:	b9 f1       	breq	.+110    	; 0xba0 <GPIO_readPin+0xc6>
     b32:	8c 81       	ldd	r24, Y+4	; 0x04
     b34:	9d 81       	ldd	r25, Y+5	; 0x05
     b36:	83 30       	cpi	r24, 0x03	; 3
     b38:	91 05       	cpc	r25, r1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <GPIO_readPin+0x64>
     b3c:	49 c0       	rjmp	.+146    	; 0xbd0 <GPIO_readPin+0xf6>
     b3e:	5f c0       	rjmp	.+190    	; 0xbfe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     b40:	e9 e3       	ldi	r30, 0x39	; 57
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	28 2f       	mov	r18, r24
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a9 01       	movw	r20, r18
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <GPIO_readPin+0x7e>
     b54:	55 95       	asr	r21
     b56:	47 95       	ror	r20
     b58:	8a 95       	dec	r24
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <GPIO_readPin+0x7a>
     b5c:	ca 01       	movw	r24, r20
     b5e:	81 70       	andi	r24, 0x01	; 1
     b60:	90 70       	andi	r25, 0x00	; 0
     b62:	88 23       	and	r24, r24
     b64:	19 f0       	breq	.+6      	; 0xb6c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	49 c0       	rjmp	.+146    	; 0xbfe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     b6c:	19 82       	std	Y+1, r1	; 0x01
     b6e:	47 c0       	rjmp	.+142    	; 0xbfe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     b70:	e6 e3       	ldi	r30, 0x36	; 54
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a9 01       	movw	r20, r18
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <GPIO_readPin+0xae>
     b84:	55 95       	asr	r21
     b86:	47 95       	ror	r20
     b88:	8a 95       	dec	r24
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <GPIO_readPin+0xaa>
     b8c:	ca 01       	movw	r24, r20
     b8e:	81 70       	andi	r24, 0x01	; 1
     b90:	90 70       	andi	r25, 0x00	; 0
     b92:	88 23       	and	r24, r24
     b94:	19 f0       	breq	.+6      	; 0xb9c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	31 c0       	rjmp	.+98     	; 0xbfe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     b9c:	19 82       	std	Y+1, r1	; 0x01
     b9e:	2f c0       	rjmp	.+94     	; 0xbfe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     ba0:	e3 e3       	ldi	r30, 0x33	; 51
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	88 2f       	mov	r24, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a9 01       	movw	r20, r18
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <GPIO_readPin+0xde>
     bb4:	55 95       	asr	r21
     bb6:	47 95       	ror	r20
     bb8:	8a 95       	dec	r24
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <GPIO_readPin+0xda>
     bbc:	ca 01       	movw	r24, r20
     bbe:	81 70       	andi	r24, 0x01	; 1
     bc0:	90 70       	andi	r25, 0x00	; 0
     bc2:	88 23       	and	r24, r24
     bc4:	19 f0       	breq	.+6      	; 0xbcc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	19 c0       	rjmp	.+50     	; 0xbfe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     bcc:	19 82       	std	Y+1, r1	; 0x01
     bce:	17 c0       	rjmp	.+46     	; 0xbfe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     bd0:	e0 e3       	ldi	r30, 0x30	; 48
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a9 01       	movw	r20, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <GPIO_readPin+0x10e>
     be4:	55 95       	asr	r21
     be6:	47 95       	ror	r20
     be8:	8a 95       	dec	r24
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <GPIO_readPin+0x10a>
     bec:	ca 01       	movw	r24, r20
     bee:	81 70       	andi	r24, 0x01	; 1
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	88 23       	and	r24, r24
     bf4:	19 f0       	breq	.+6      	; 0xbfc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     bfc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	00 d0       	rcall	.+0      	; 0xc16 <GPIO_setupPortDirection+0x6>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <GPIO_setupPortDirection+0x8>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	84 30       	cpi	r24, 0x04	; 4
     c24:	90 f5       	brcc	.+100    	; 0xc8a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	3c 83       	std	Y+4, r19	; 0x04
     c2e:	2b 83       	std	Y+3, r18	; 0x03
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	91 05       	cpc	r25, r1
     c38:	d1 f0       	breq	.+52     	; 0xc6e <GPIO_setupPortDirection+0x5e>
     c3a:	2b 81       	ldd	r18, Y+3	; 0x03
     c3c:	3c 81       	ldd	r19, Y+4	; 0x04
     c3e:	22 30       	cpi	r18, 0x02	; 2
     c40:	31 05       	cpc	r19, r1
     c42:	2c f4       	brge	.+10     	; 0xc4e <GPIO_setupPortDirection+0x3e>
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	61 f0       	breq	.+24     	; 0xc64 <GPIO_setupPortDirection+0x54>
     c4c:	1e c0       	rjmp	.+60     	; 0xc8a <GPIO_setupPortDirection+0x7a>
     c4e:	2b 81       	ldd	r18, Y+3	; 0x03
     c50:	3c 81       	ldd	r19, Y+4	; 0x04
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	31 05       	cpc	r19, r1
     c56:	81 f0       	breq	.+32     	; 0xc78 <GPIO_setupPortDirection+0x68>
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	91 05       	cpc	r25, r1
     c60:	81 f0       	breq	.+32     	; 0xc82 <GPIO_setupPortDirection+0x72>
     c62:	13 c0       	rjmp	.+38     	; 0xc8a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     c64:	ea e3       	ldi	r30, 0x3A	; 58
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	80 83       	st	Z, r24
     c6c:	0e c0       	rjmp	.+28     	; 0xc8a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     c6e:	e7 e3       	ldi	r30, 0x37	; 55
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	80 83       	st	Z, r24
     c76:	09 c0       	rjmp	.+18     	; 0xc8a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	80 83       	st	Z, r24
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     c82:	e1 e3       	ldi	r30, 0x31	; 49
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	80 83       	st	Z, r24
			break;
		}
	}
}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <GPIO_writePort+0x6>
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <GPIO_writePort+0x8>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	90 f5       	brcc	.+100    	; 0xd12 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3c 83       	std	Y+4, r19	; 0x04
     cb6:	2b 83       	std	Y+3, r18	; 0x03
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	d1 f0       	breq	.+52     	; 0xcf6 <GPIO_writePort+0x5e>
     cc2:	2b 81       	ldd	r18, Y+3	; 0x03
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <GPIO_writePort+0x3e>
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <GPIO_writePort+0x54>
     cd4:	1e c0       	rjmp	.+60     	; 0xd12 <GPIO_writePort+0x7a>
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	81 f0       	breq	.+32     	; 0xd00 <GPIO_writePort+0x68>
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <GPIO_writePort+0x72>
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     cec:	eb e3       	ldi	r30, 0x3B	; 59
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	80 83       	st	Z, r24
     cf4:	0e c0       	rjmp	.+28     	; 0xd12 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     cf6:	e8 e3       	ldi	r30, 0x38	; 56
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	80 83       	st	Z, r24
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     d00:	e5 e3       	ldi	r30, 0x35	; 53
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	80 83       	st	Z, r24
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     d0a:	e2 e3       	ldi	r30, 0x32	; 50
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	80 83       	st	Z, r24
			break;
		}
	}
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <GPIO_readPort+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <GPIO_readPort+0x8>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     d2e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	90 f5       	brcc	.+100    	; 0xd9a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	3c 83       	std	Y+4, r19	; 0x04
     d3e:	2b 83       	std	Y+3, r18	; 0x03
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	91 05       	cpc	r25, r1
     d48:	d1 f0       	breq	.+52     	; 0xd7e <GPIO_readPort+0x5e>
     d4a:	2b 81       	ldd	r18, Y+3	; 0x03
     d4c:	3c 81       	ldd	r19, Y+4	; 0x04
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	2c f4       	brge	.+10     	; 0xd5e <GPIO_readPort+0x3e>
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	61 f0       	breq	.+24     	; 0xd74 <GPIO_readPort+0x54>
     d5c:	1e c0       	rjmp	.+60     	; 0xd9a <GPIO_readPort+0x7a>
     d5e:	2b 81       	ldd	r18, Y+3	; 0x03
     d60:	3c 81       	ldd	r19, Y+4	; 0x04
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	81 f0       	breq	.+32     	; 0xd88 <GPIO_readPort+0x68>
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	91 05       	cpc	r25, r1
     d70:	81 f0       	breq	.+32     	; 0xd92 <GPIO_readPort+0x72>
     d72:	13 c0       	rjmp	.+38     	; 0xd9a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     d74:	e9 e3       	ldi	r30, 0x39	; 57
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	0e c0       	rjmp	.+28     	; 0xd9a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     d7e:	e6 e3       	ldi	r30, 0x36	; 54
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     d88:	e3 e3       	ldi	r30, 0x33	; 51
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     d92:	e0 e3       	ldi	r30, 0x30	; 48
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <KEYPAD_getPressedKey+0x6>
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
     db6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     db8:	1b 82       	std	Y+3, r1	; 0x03
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	0e 94 08 06 	call	0xc10	; 0xc10 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	98 2f       	mov	r25, r24
     dc8:	9c 5f       	subi	r25, 0xFC	; 252
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	69 2f       	mov	r22, r25
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	0e 94 97 03 	call	0x72e	; 0x72e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9c 01       	movw	r18, r24
     ddc:	2c 5f       	subi	r18, 0xFC	; 252
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <KEYPAD_getPressedKey+0x40>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	2a 95       	dec	r18
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <KEYPAD_getPressedKey+0x3c>
     dee:	80 95       	com	r24
     df0:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	69 81       	ldd	r22, Y+1	; 0x01
     df6:	0e 94 4c 06 	call	0xc98	; 0xc98 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     dfa:	1a 82       	std	Y+2, r1	; 0x02
     dfc:	1c c0       	rjmp	.+56     	; 0xe36 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	6a 81       	ldd	r22, Y+2	; 0x02
     e02:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_readPin>
     e06:	88 23       	and	r24, r24
     e08:	99 f4       	brne	.+38     	; 0xe30 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	98 2f       	mov	r25, r24
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	89 0f       	add	r24, r25
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	0e 94 26 07 	call	0xe4c	; 0xe4c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	8a 83       	std	Y+2, r24	; 0x02
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	08 f3       	brcs	.-62     	; 0xdfe <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	08 f4       	brcc	.+2      	; 0xe4a <KEYPAD_getPressedKey+0xa0>
     e48:	b9 cf       	rjmp	.-142    	; 0xdbc <KEYPAD_getPressedKey+0x12>
     e4a:	b6 cf       	rjmp	.-148    	; 0xdb8 <KEYPAD_getPressedKey+0xe>

00000e4c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <KEYPAD_4x4_adjustKeyNumber+0x6>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <KEYPAD_4x4_adjustKeyNumber+0x8>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	3c 83       	std	Y+4, r19	; 0x04
     e64:	2b 83       	std	Y+3, r18	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	88 30       	cpi	r24, 0x08	; 8
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <KEYPAD_4x4_adjustKeyNumber+0x26>
     e70:	70 c0       	rjmp	.+224    	; 0xf52 <KEYPAD_4x4_adjustKeyNumber+0x106>
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	3c 81       	ldd	r19, Y+4	; 0x04
     e76:	29 30       	cpi	r18, 0x09	; 9
     e78:	31 05       	cpc	r19, r1
     e7a:	5c f5       	brge	.+86     	; 0xed2 <KEYPAD_4x4_adjustKeyNumber+0x86>
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	9c 81       	ldd	r25, Y+4	; 0x04
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	91 05       	cpc	r25, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <KEYPAD_4x4_adjustKeyNumber+0x3c>
     e86:	59 c0       	rjmp	.+178    	; 0xf3a <KEYPAD_4x4_adjustKeyNumber+0xee>
     e88:	2b 81       	ldd	r18, Y+3	; 0x03
     e8a:	3c 81       	ldd	r19, Y+4	; 0x04
     e8c:	25 30       	cpi	r18, 0x05	; 5
     e8e:	31 05       	cpc	r19, r1
     e90:	9c f4       	brge	.+38     	; 0xeb8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <KEYPAD_4x4_adjustKeyNumber+0x52>
     e9c:	48 c0       	rjmp	.+144    	; 0xf2e <KEYPAD_4x4_adjustKeyNumber+0xe2>
     e9e:	2b 81       	ldd	r18, Y+3	; 0x03
     ea0:	3c 81       	ldd	r19, Y+4	; 0x04
     ea2:	23 30       	cpi	r18, 0x03	; 3
     ea4:	31 05       	cpc	r19, r1
     ea6:	0c f0       	brlt	.+2      	; 0xeaa <KEYPAD_4x4_adjustKeyNumber+0x5e>
     ea8:	45 c0       	rjmp	.+138    	; 0xf34 <KEYPAD_4x4_adjustKeyNumber+0xe8>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
     eb4:	39 c0       	rjmp	.+114    	; 0xf28 <KEYPAD_4x4_adjustKeyNumber+0xdc>
     eb6:	67 c0       	rjmp	.+206    	; 0xf86 <KEYPAD_4x4_adjustKeyNumber+0x13a>
     eb8:	2b 81       	ldd	r18, Y+3	; 0x03
     eba:	3c 81       	ldd	r19, Y+4	; 0x04
     ebc:	26 30       	cpi	r18, 0x06	; 6
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <KEYPAD_4x4_adjustKeyNumber+0x78>
     ec2:	41 c0       	rjmp	.+130    	; 0xf46 <KEYPAD_4x4_adjustKeyNumber+0xfa>
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	87 30       	cpi	r24, 0x07	; 7
     eca:	91 05       	cpc	r25, r1
     ecc:	0c f0       	brlt	.+2      	; 0xed0 <KEYPAD_4x4_adjustKeyNumber+0x84>
     ece:	3e c0       	rjmp	.+124    	; 0xf4c <KEYPAD_4x4_adjustKeyNumber+0x100>
     ed0:	37 c0       	rjmp	.+110    	; 0xf40 <KEYPAD_4x4_adjustKeyNumber+0xf4>
     ed2:	2b 81       	ldd	r18, Y+3	; 0x03
     ed4:	3c 81       	ldd	r19, Y+4	; 0x04
     ed6:	2c 30       	cpi	r18, 0x0C	; 12
     ed8:	31 05       	cpc	r19, r1
     eda:	09 f4       	brne	.+2      	; 0xede <KEYPAD_4x4_adjustKeyNumber+0x92>
     edc:	46 c0       	rjmp	.+140    	; 0xf6a <KEYPAD_4x4_adjustKeyNumber+0x11e>
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	8d 30       	cpi	r24, 0x0D	; 13
     ee4:	91 05       	cpc	r25, r1
     ee6:	5c f4       	brge	.+22     	; 0xefe <KEYPAD_4x4_adjustKeyNumber+0xb2>
     ee8:	2b 81       	ldd	r18, Y+3	; 0x03
     eea:	3c 81       	ldd	r19, Y+4	; 0x04
     eec:	2a 30       	cpi	r18, 0x0A	; 10
     eee:	31 05       	cpc	r19, r1
     ef0:	b1 f1       	breq	.+108    	; 0xf5e <KEYPAD_4x4_adjustKeyNumber+0x112>
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	8b 30       	cpi	r24, 0x0B	; 11
     ef8:	91 05       	cpc	r25, r1
     efa:	a4 f5       	brge	.+104    	; 0xf64 <KEYPAD_4x4_adjustKeyNumber+0x118>
     efc:	2d c0       	rjmp	.+90     	; 0xf58 <KEYPAD_4x4_adjustKeyNumber+0x10c>
     efe:	2b 81       	ldd	r18, Y+3	; 0x03
     f00:	3c 81       	ldd	r19, Y+4	; 0x04
     f02:	2e 30       	cpi	r18, 0x0E	; 14
     f04:	31 05       	cpc	r19, r1
     f06:	b9 f1       	breq	.+110    	; 0xf76 <KEYPAD_4x4_adjustKeyNumber+0x12a>
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	8e 30       	cpi	r24, 0x0E	; 14
     f0e:	91 05       	cpc	r25, r1
     f10:	7c f1       	brlt	.+94     	; 0xf70 <KEYPAD_4x4_adjustKeyNumber+0x124>
     f12:	2b 81       	ldd	r18, Y+3	; 0x03
     f14:	3c 81       	ldd	r19, Y+4	; 0x04
     f16:	2f 30       	cpi	r18, 0x0F	; 15
     f18:	31 05       	cpc	r19, r1
     f1a:	79 f1       	breq	.+94     	; 0xf7a <KEYPAD_4x4_adjustKeyNumber+0x12e>
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	80 31       	cpi	r24, 0x10	; 16
     f22:	91 05       	cpc	r25, r1
     f24:	69 f1       	breq	.+90     	; 0xf80 <KEYPAD_4x4_adjustKeyNumber+0x134>
     f26:	2f c0       	rjmp	.+94     	; 0xf86 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     f28:	87 e0       	ldi	r24, 0x07	; 7
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	2e c0       	rjmp	.+92     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	2b c0       	rjmp	.+86     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     f34:	89 e0       	ldi	r24, 0x09	; 9
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	28 c0       	rjmp	.+80     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
     f3a:	85 e2       	ldi	r24, 0x25	; 37
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	25 c0       	rjmp	.+74     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     f40:	84 e0       	ldi	r24, 0x04	; 4
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	22 c0       	rjmp	.+68     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     f46:	85 e0       	ldi	r24, 0x05	; 5
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	1f c0       	rjmp	.+62     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     f4c:	86 e0       	ldi	r24, 0x06	; 6
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	1c c0       	rjmp	.+56     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     f52:	8a e2       	ldi	r24, 0x2A	; 42
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	19 c0       	rjmp	.+50     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	16 c0       	rjmp	.+44     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	13 c0       	rjmp	.+38     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	10 c0       	rjmp	.+32     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     f6a:	8d e2       	ldi	r24, 0x2D	; 45
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
     f70:	8d e0       	ldi	r24, 0x0D	; 13
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
     f76:	19 82       	std	Y+1, r1	; 0x01
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     f7a:	8d e3       	ldi	r24, 0x3D	; 61
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     f80:	8b e2       	ldi	r24, 0x2B	; 43
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
} 
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	0e 94 97 03 	call	0x72e	; 0x72e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	0e 94 97 03 	call	0x72e	; 0x72e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	0e 94 97 03 	call	0x72e	; 0x72e <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	6f ef       	ldi	r22, 0xFF	; 255
     fc4:	0e 94 08 06 	call	0xc10	; 0xc10 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     fc8:	88 e3       	ldi	r24, 0x38	; 56
     fca:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     fce:	8c e0       	ldi	r24, 0x0C	; 12
     fd0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommand>
}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <LCD_sendCommand+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_port_value = 0;
     fec:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tas = 50ns */
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	6a 81       	ldd	r22, Y+2	; 0x02
    1028:	0e 94 4c 06 	call	0xc98	; 0xc98 <GPIO_writePort>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	delay_ms(1); /* delay for processing Th = 13ns */
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
#endif
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <LCD_displayCharacter+0x6>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	8a 83       	std	Y+2, r24	; 0x02
	uint8 lcd_port_value = 0;
    1064:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	41 e0       	ldi	r20, 0x01	; 1
    106c:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tas = 50ns */
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	62 e0       	ldi	r22, 0x02	; 2
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	6a 81       	ldd	r22, Y+2	; 0x02
    10a0:	0e 94 4c 06 	call	0xc98	; 0xc98 <GPIO_writePort>
	delay_ms(1); /* delay for processing Tdsw = 100ns */
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	0e 94 82 04 	call	0x904	; 0x904 <GPIO_writePin>
	delay_ms(1); /* delay for processing Th = 13ns */
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 63 00 	call	0xc6	; 0xc6 <delay_ms>
#endif
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <LCD_displayString+0x6>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	9b 83       	std	Y+3, r25	; 0x03
    10de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10e0:	19 82       	std	Y+1, r1	; 0x01
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	fc 01       	movw	r30, r24
    10f0:	e2 0f       	add	r30, r18
    10f2:	f3 1f       	adc	r31, r19
    10f4:	80 81       	ld	r24, Z
    10f6:	0e 94 2c 08 	call	0x1058	; 0x1058 <LCD_displayCharacter>
		i++;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	fc 01       	movw	r30, r24
    110c:	e2 0f       	add	r30, r18
    110e:	f3 1f       	adc	r31, r19
    1110:	80 81       	ld	r24, Z
    1112:	88 23       	and	r24, r24
    1114:	39 f7       	brne	.-50     	; 0x10e4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <LCD_moveCursor+0x6>
    1128:	00 d0       	rcall	.+0      	; 0x112a <LCD_moveCursor+0x8>
    112a:	0f 92       	push	r0
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	8a 83       	std	Y+2, r24	; 0x02
    1132:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	c1 f0       	breq	.+48     	; 0x1178 <LCD_moveCursor+0x56>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <LCD_moveCursor+0x3a>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	61 f0       	breq	.+24     	; 0x1172 <LCD_moveCursor+0x50>
    115a:	19 c0       	rjmp	.+50     	; 0x118e <LCD_moveCursor+0x6c>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	69 f0       	breq	.+26     	; 0x1180 <LCD_moveCursor+0x5e>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	61 f0       	breq	.+24     	; 0x1188 <LCD_moveCursor+0x66>
    1170:	0e c0       	rjmp	.+28     	; 0x118e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	0b c0       	rjmp	.+22     	; 0x118e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	80 5c       	subi	r24, 0xC0	; 192
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	07 c0       	rjmp	.+14     	; 0x118e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	80 5f       	subi	r24, 0xF0	; 240
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	03 c0       	rjmp	.+6      	; 0x118e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	80 5b       	subi	r24, 0xB0	; 176
    118c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	80 68       	ori	r24, 0x80	; 128
    1192:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommand>
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <LCD_displayStringRowColumn+0x6>
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <LCD_displayStringRowColumn+0x8>
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	6a 83       	std	Y+2, r22	; 0x02
    11b6:	5c 83       	std	Y+4, r21	; 0x04
    11b8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	6a 81       	ldd	r22, Y+2	; 0x02
    11be:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	62 97       	sbiw	r28, 0x12	; 18
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	9a 8b       	std	Y+18, r25	; 0x12
    11ee:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    11f0:	89 89       	ldd	r24, Y+17	; 0x11
    11f2:	9a 89       	ldd	r25, Y+18	; 0x12
    11f4:	9e 01       	movw	r18, r28
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	b9 01       	movw	r22, r18
    11fc:	4a e0       	ldi	r20, 0x0A	; 10
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <itoa>
   LCD_displayString(buff); /* Display the string */
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayString>
}
    120c:	62 96       	adiw	r28, 0x12	; 18
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommand>
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <TIMER_Init>:
/*
 * Description:
 * Initialize timer 0, 1 or 2 with specified configurations:
 */
void TIMER_Init( TIMER_ConfigType* config )
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	2a 97       	sbiw	r28, 0x0a	; 10
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
	/* Select the required timer. */
	switch(config->timerID)
    124a:	e9 81       	ldd	r30, Y+1	; 0x01
    124c:	fa 81       	ldd	r31, Y+2	; 0x02
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3a 87       	std	Y+10, r19	; 0x0a
    1256:	29 87       	std	Y+9, r18	; 0x09
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <TIMER_Init+0x32>
    1262:	51 c0       	rjmp	.+162    	; 0x1306 <TIMER_Init+0xd4>
    1264:	29 85       	ldd	r18, Y+9	; 0x09
    1266:	3a 85       	ldd	r19, Y+10	; 0x0a
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <TIMER_Init+0x3e>
    126e:	95 c0       	rjmp	.+298    	; 0x139a <TIMER_Init+0x168>
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	09 f0       	breq	.+2      	; 0x127a <TIMER_Init+0x48>
    1278:	d5 c0       	rjmp	.+426    	; 0x1424 <TIMER_Init+0x1f2>
	{
	/***********************************TIMER0***********************************/
	case TIMER0_ID:
		/* Put the required initial value of timer in the timer0 8bits counter register.*/
		TCNT0 = (uint8)config->initialValue;
    127a:	a2 e5       	ldi	r26, 0x52	; 82
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	8c 93       	st	X, r24
		 * FOC0 = 1 Non PWM mode.
		 * WGM01:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
		 * COM01:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
		 * CS02:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
		 */
		TCCR0 = (1<<FOC0);
    1288:	e3 e5       	ldi	r30, 0x53	; 83
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 e8       	ldi	r24, 0x80	; 128
    128e:	80 83       	st	Z, r24
		/* Inserting clock in the first three bits in TCCR0. */
		TCCR0 = (TCCR0&~(0x07)) | (config->prescaler);
    1290:	a3 e5       	ldi	r26, 0x53	; 83
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e3 e5       	ldi	r30, 0x53	; 83
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	98 2f       	mov	r25, r24
    129c:	98 7f       	andi	r25, 0xF8	; 248
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	86 81       	ldd	r24, Z+6	; 0x06
    12a4:	89 2b       	or	r24, r25
    12a6:	8c 93       	st	X, r24
		switch(config->mode)
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	81 81       	ldd	r24, Z+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	38 87       	std	Y+8, r19	; 0x08
    12b4:	2f 83       	std	Y+7, r18	; 0x07
    12b6:	8f 81       	ldd	r24, Y+7	; 0x07
    12b8:	98 85       	ldd	r25, Y+8	; 0x08
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	31 f0       	breq	.+12     	; 0x12ca <TIMER_Init+0x98>
    12be:	2f 81       	ldd	r18, Y+7	; 0x07
    12c0:	38 85       	ldd	r19, Y+8	; 0x08
    12c2:	21 30       	cpi	r18, 0x01	; 1
    12c4:	31 05       	cpc	r19, r1
    12c6:	49 f0       	breq	.+18     	; 0x12da <TIMER_Init+0xa8>
    12c8:	ad c0       	rjmp	.+346    	; 0x1424 <TIMER_Init+0x1f2>
		{
		case OVERFLOW_MODE:
			/* Enable overflow interrupt for required mode. */
			TIMSK |= (1<<TOIE0);
    12ca:	a9 e5       	ldi	r26, 0x59	; 89
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e9 e5       	ldi	r30, 0x59	; 89
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	8c 93       	st	X, r24
    12d8:	a5 c0       	rjmp	.+330    	; 0x1424 <TIMER_Init+0x1f2>
			break;
			/* Set bits that need to be set in compare mode, otherwise let them 0s. */
		case COMPARE_MODE:
			TCCR0 |= (1<<WGM01);
    12da:	a3 e5       	ldi	r26, 0x53	; 83
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e3 e5       	ldi	r30, 0x53	; 83
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	88 60       	ori	r24, 0x08	; 8
    12e6:	8c 93       	st	X, r24
			/* Store compare value in case of mode is COMPARE_MODE. */
			OCR0 = config->compareValue;
    12e8:	ac e5       	ldi	r26, 0x5C	; 92
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	84 81       	ldd	r24, Z+4	; 0x04
    12f2:	95 81       	ldd	r25, Z+5	; 0x05
    12f4:	8c 93       	st	X, r24
			/* Enable compare match interrupt for required mode. */
			TIMSK |= (1<<OCIE0);
    12f6:	a9 e5       	ldi	r26, 0x59	; 89
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	82 60       	ori	r24, 0x02	; 2
    1302:	8c 93       	st	X, r24
    1304:	8f c0       	rjmp	.+286    	; 0x1424 <TIMER_Init+0x1f2>
		}
		break;
		/***********************************TIMER1***********************************/
		case TIMER1_ID:
			/* Put the required initial value of timer in the timer1 16 bits counter register.*/
			TCNT1 = config->initialValue;
    1306:	ac e4       	ldi	r26, 0x4C	; 76
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e9 81       	ldd	r30, Y+1	; 0x01
    130c:	fa 81       	ldd	r31, Y+2	; 0x02
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	9c 93       	st	X, r25
    1316:	8e 93       	st	-X, r24
			 * FOC1A,FOC1B = 1 Non PWM mode.
			 * WGM01:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
			 * COM1A1:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
			 * CS02:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1318:	ef e4       	ldi	r30, 0x4F	; 79
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8c e0       	ldi	r24, 0x0C	; 12
    131e:	80 83       	st	Z, r24
			/* Inserting clock in the first three bits in TCCR0. */
			TCCR1B = (TCCR1B&~(0x07)) | (config->prescaler);
    1320:	ae e4       	ldi	r26, 0x4E	; 78
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ee e4       	ldi	r30, 0x4E	; 78
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	98 2f       	mov	r25, r24
    132c:	98 7f       	andi	r25, 0xF8	; 248
    132e:	e9 81       	ldd	r30, Y+1	; 0x01
    1330:	fa 81       	ldd	r31, Y+2	; 0x02
    1332:	86 81       	ldd	r24, Z+6	; 0x06
    1334:	89 2b       	or	r24, r25
    1336:	8c 93       	st	X, r24
			switch(config->mode)
    1338:	e9 81       	ldd	r30, Y+1	; 0x01
    133a:	fa 81       	ldd	r31, Y+2	; 0x02
    133c:	81 81       	ldd	r24, Z+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3e 83       	std	Y+6, r19	; 0x06
    1344:	2d 83       	std	Y+5, r18	; 0x05
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	31 f0       	breq	.+12     	; 0x135a <TIMER_Init+0x128>
    134e:	2d 81       	ldd	r18, Y+5	; 0x05
    1350:	3e 81       	ldd	r19, Y+6	; 0x06
    1352:	21 30       	cpi	r18, 0x01	; 1
    1354:	31 05       	cpc	r19, r1
    1356:	49 f0       	breq	.+18     	; 0x136a <TIMER_Init+0x138>
    1358:	65 c0       	rjmp	.+202    	; 0x1424 <TIMER_Init+0x1f2>
			{
			case OVERFLOW_MODE:
				/* Enable overflow interrupt for required mode. */
				TIMSK |= (1<<TOIE1);
    135a:	a9 e5       	ldi	r26, 0x59	; 89
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e9 e5       	ldi	r30, 0x59	; 89
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	84 60       	ori	r24, 0x04	; 4
    1366:	8c 93       	st	X, r24
    1368:	5d c0       	rjmp	.+186    	; 0x1424 <TIMER_Init+0x1f2>
				break;
				/* Set bits that need to be set in compare mode, otherwise let them 0s. */
			case COMPARE_MODE:
				TCCR1B |= (1<<WGM12);
    136a:	ae e4       	ldi	r26, 0x4E	; 78
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ee e4       	ldi	r30, 0x4E	; 78
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	88 60       	ori	r24, 0x08	; 8
    1376:	8c 93       	st	X, r24
				/* Store compare value in case of mode is COMPARE_MODE. */
				OCR1A = config->compareValue;
    1378:	aa e4       	ldi	r26, 0x4A	; 74
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e9 81       	ldd	r30, Y+1	; 0x01
    137e:	fa 81       	ldd	r31, Y+2	; 0x02
    1380:	84 81       	ldd	r24, Z+4	; 0x04
    1382:	95 81       	ldd	r25, Z+5	; 0x05
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	9c 93       	st	X, r25
    1388:	8e 93       	st	-X, r24
				/* Enable compare match interrupt for required mode. */
				TIMSK |= (1<<OCIE1A);
    138a:	a9 e5       	ldi	r26, 0x59	; 89
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e9 e5       	ldi	r30, 0x59	; 89
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	80 61       	ori	r24, 0x10	; 16
    1396:	8c 93       	st	X, r24
    1398:	45 c0       	rjmp	.+138    	; 0x1424 <TIMER_Init+0x1f2>
			}
			break;
			/***********************************TIMER2***********************************/
			case TIMER2_ID:
				/* Put the required initial value of timer in the timer2 8bits counter register.*/
				TCNT2 = (uint8)config->initialValue;
    139a:	a4 e4       	ldi	r26, 0x44	; 68
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e9 81       	ldd	r30, Y+1	; 0x01
    13a0:	fa 81       	ldd	r31, Y+2	; 0x02
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	8c 93       	st	X, r24
				 * FOC2 = 1 Non PWM mode.
				 * WGM21:0 = 00 if Normal(overflow) mode and = 10 in Compare mode.
				 * COM01:0 = 00 if Normal(overflow) mode and = 00 in Compare mode.
				 * CS22:0 = 000 if no clock source and a value = TIMER_Prescaler if there is a clock.
				 */
				TCCR2 = (1<<FOC2);
    13a8:	e5 e4       	ldi	r30, 0x45	; 69
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 e8       	ldi	r24, 0x80	; 128
    13ae:	80 83       	st	Z, r24
				/* Inserting clock in the first three bits in TCCR0. */
				TCCR2 = (TCCR2&~(0x07)) | (config->prescaler);
    13b0:	a5 e4       	ldi	r26, 0x45	; 69
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e4       	ldi	r30, 0x45	; 69
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	98 2f       	mov	r25, r24
    13bc:	98 7f       	andi	r25, 0xF8	; 248
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	86 81       	ldd	r24, Z+6	; 0x06
    13c4:	89 2b       	or	r24, r25
    13c6:	8c 93       	st	X, r24
				switch(config->mode)
    13c8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ca:	fa 81       	ldd	r31, Y+2	; 0x02
    13cc:	81 81       	ldd	r24, Z+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3c 83       	std	Y+4, r19	; 0x04
    13d4:	2b 83       	std	Y+3, r18	; 0x03
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	31 f0       	breq	.+12     	; 0x13ea <TIMER_Init+0x1b8>
    13de:	2b 81       	ldd	r18, Y+3	; 0x03
    13e0:	3c 81       	ldd	r19, Y+4	; 0x04
    13e2:	21 30       	cpi	r18, 0x01	; 1
    13e4:	31 05       	cpc	r19, r1
    13e6:	49 f0       	breq	.+18     	; 0x13fa <TIMER_Init+0x1c8>
    13e8:	1d c0       	rjmp	.+58     	; 0x1424 <TIMER_Init+0x1f2>
				{
				case OVERFLOW_MODE:
					/* Enable overflow interrupt for required mode. */
					TIMSK |= (1<<TOIE2);
    13ea:	a9 e5       	ldi	r26, 0x59	; 89
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e9 e5       	ldi	r30, 0x59	; 89
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 64       	ori	r24, 0x40	; 64
    13f6:	8c 93       	st	X, r24
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <TIMER_Init+0x1f2>
					break;
					/* Set bits that need to be set in compare mode, otherwise let them 0s. */
				case COMPARE_MODE:
					TCCR2 |= (1<<WGM21);
    13fa:	a5 e4       	ldi	r26, 0x45	; 69
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e4       	ldi	r30, 0x45	; 69
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	8c 93       	st	X, r24
					/* Store compare value in case of mode is COMPARE_MODE. */
					OCR2 = config->compareValue;
    1408:	a3 e4       	ldi	r26, 0x43	; 67
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	84 81       	ldd	r24, Z+4	; 0x04
    1412:	95 81       	ldd	r25, Z+5	; 0x05
    1414:	8c 93       	st	X, r24
					/* Enable compare match interrupt for required mode. */
					TIMSK |= (1<<OCIE2);
    1416:	a9 e5       	ldi	r26, 0x59	; 89
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e9 e5       	ldi	r30, 0x59	; 89
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	80 68       	ori	r24, 0x80	; 128
    1422:	8c 93       	st	X, r24
					break;
				}
	}
}
    1424:	2a 96       	adiw	r28, 0x0a	; 10
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <TIMER_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void TIMER_setCallBack( void(*a_ptr)( void ), TIMER_ID timerID)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <TIMER_setCallBack+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <TIMER_setCallBack+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	switch(timerID)
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3d 83       	std	Y+5, r19	; 0x05
    1452:	2c 83       	std	Y+4, r18	; 0x04
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <TIMER_setCallBack+0x48>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	91 f0       	breq	.+36     	; 0x148c <TIMER_setCallBack+0x56>
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	a1 f4       	brne	.+40     	; 0x1498 <TIMER_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_timer0CallBackPtr = a_ptr;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	90 93 1f 01 	sts	0x011F, r25
    1478:	80 93 1e 01 	sts	0x011E, r24
    147c:	0d c0       	rjmp	.+26     	; 0x1498 <TIMER_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_timer1CallBackPtr = a_ptr;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	90 93 21 01 	sts	0x0121, r25
    1486:	80 93 20 01 	sts	0x0120, r24
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <TIMER_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_timer2CallBackPtr = a_ptr;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	90 93 23 01 	sts	0x0123, r25
    1494:	80 93 22 01 	sts	0x0122, r24
		break;
	}
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <TIMER_Deinit>:
/*
 * Description:
 * Stops the timer by stopping its clock.
 */
void TIMER_Deinit( TIMER_ID timerID )
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <TIMER_Deinit+0x6>
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	89 83       	std	Y+1, r24	; 0x01
	switch(timerID)
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3b 83       	std	Y+3, r19	; 0x03
    14be:	2a 83       	std	Y+2, r18	; 0x02
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	69 f0       	breq	.+26     	; 0x14e4 <TIMER_Deinit+0x3c>
    14ca:	2a 81       	ldd	r18, Y+2	; 0x02
    14cc:	3b 81       	ldd	r19, Y+3	; 0x03
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	61 f0       	breq	.+24     	; 0x14ec <TIMER_Deinit+0x44>
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	59 f4       	brne	.+22     	; 0x14f2 <TIMER_Deinit+0x4a>
	{
	case TIMER0_ID:
		TCCR0 = 0;
    14dc:	e3 e5       	ldi	r30, 0x53	; 83
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	10 82       	st	Z, r1
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <TIMER_Deinit+0x4a>
		break;
	case TIMER1_ID:
		TCCR1B = 0;
    14e4:	ee e4       	ldi	r30, 0x4E	; 78
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	10 82       	st	Z, r1
    14ea:	03 c0       	rjmp	.+6      	; 0x14f2 <TIMER_Deinit+0x4a>
		break;
	case TIMER2_ID:
		TCCR2 = 0;
    14ec:	e5 e4       	ldi	r30, 0x45	; 69
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	10 82       	st	Z, r1
		break;
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <__vector_9>:
/*
 * Description:
 * Calls the call back function of timer 0 in case of Overflow interrupt occurs.
 */
ISR( TIMER0_OVF_vect )
{
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR)
    1528:	80 91 1e 01 	lds	r24, 0x011E
    152c:	90 91 1f 01 	lds	r25, 0x011F
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	29 f0       	breq	.+10     	; 0x153e <__vector_9+0x40>
	{
		(*g_timer0CallBackPtr)();
    1534:	e0 91 1e 01 	lds	r30, 0x011E
    1538:	f0 91 1f 01 	lds	r31, 0x011F
    153c:	09 95       	icall
	}
	TIFR |= TOV0;
    153e:	e8 e5       	ldi	r30, 0x58	; 88
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	a8 e5       	ldi	r26, 0x58	; 88
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	8c 91       	ld	r24, X
    1548:	80 83       	st	Z, r24
}
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	ff 91       	pop	r31
    1550:	ef 91       	pop	r30
    1552:	bf 91       	pop	r27
    1554:	af 91       	pop	r26
    1556:	9f 91       	pop	r25
    1558:	8f 91       	pop	r24
    155a:	7f 91       	pop	r23
    155c:	6f 91       	pop	r22
    155e:	5f 91       	pop	r21
    1560:	4f 91       	pop	r20
    1562:	3f 91       	pop	r19
    1564:	2f 91       	pop	r18
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <__vector_19>:
/*
 * Description:
 * Calls the call back function of timer 0 in case of compare match interrupt occurs.
 */
ISR( TIMER0_COMP_vect )
{
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	2f 93       	push	r18
    157c:	3f 93       	push	r19
    157e:	4f 93       	push	r20
    1580:	5f 93       	push	r21
    1582:	6f 93       	push	r22
    1584:	7f 93       	push	r23
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	af 93       	push	r26
    158c:	bf 93       	push	r27
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR)
    159a:	80 91 1e 01 	lds	r24, 0x011E
    159e:	90 91 1f 01 	lds	r25, 0x011F
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	29 f0       	breq	.+10     	; 0x15b0 <__vector_19+0x40>
	{
		(*g_timer0CallBackPtr)();
    15a6:	e0 91 1e 01 	lds	r30, 0x011E
    15aa:	f0 91 1f 01 	lds	r31, 0x011F
    15ae:	09 95       	icall
	}
	TIFR |= OCF0;
    15b0:	a8 e5       	ldi	r26, 0x58	; 88
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e8 e5       	ldi	r30, 0x58	; 88
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	8c 93       	st	X, r24
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <__vector_8>:
/*
 * Description:
 * Calls the call back function of timer 1 in case of Overflow interrupt occurs.
 */
ISR( TIMER1_OVF_vect )
{
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	2f 93       	push	r18
    15f0:	3f 93       	push	r19
    15f2:	4f 93       	push	r20
    15f4:	5f 93       	push	r21
    15f6:	6f 93       	push	r22
    15f8:	7f 93       	push	r23
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	af 93       	push	r26
    1600:	bf 93       	push	r27
    1602:	ef 93       	push	r30
    1604:	ff 93       	push	r31
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR)
    160e:	80 91 20 01 	lds	r24, 0x0120
    1612:	90 91 21 01 	lds	r25, 0x0121
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	29 f0       	breq	.+10     	; 0x1624 <__vector_8+0x40>
	{
		(*g_timer1CallBackPtr)();
    161a:	e0 91 20 01 	lds	r30, 0x0120
    161e:	f0 91 21 01 	lds	r31, 0x0121
    1622:	09 95       	icall
	}
	TIFR |= TOV1;
    1624:	a8 e5       	ldi	r26, 0x58	; 88
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e5       	ldi	r30, 0x58	; 88
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	8c 93       	st	X, r24
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <__vector_6>:
/*
 * Description:
 * Calls the call back function of timer 1 in case of compare match interrupt occurs.
 */
ISR( TIMER1_COMPA_vect )
{
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	2f 93       	push	r18
    1664:	3f 93       	push	r19
    1666:	4f 93       	push	r20
    1668:	5f 93       	push	r21
    166a:	6f 93       	push	r22
    166c:	7f 93       	push	r23
    166e:	8f 93       	push	r24
    1670:	9f 93       	push	r25
    1672:	af 93       	push	r26
    1674:	bf 93       	push	r27
    1676:	ef 93       	push	r30
    1678:	ff 93       	push	r31
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR)
    1682:	80 91 20 01 	lds	r24, 0x0120
    1686:	90 91 21 01 	lds	r25, 0x0121
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	29 f0       	breq	.+10     	; 0x1698 <__vector_6+0x40>
	{
		(*g_timer1CallBackPtr)();
    168e:	e0 91 20 01 	lds	r30, 0x0120
    1692:	f0 91 21 01 	lds	r31, 0x0121
    1696:	09 95       	icall
	}
	TIFR |= OCF1A;
    1698:	a8 e5       	ldi	r26, 0x58	; 88
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e8 e5       	ldi	r30, 0x58	; 88
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	84 60       	ori	r24, 0x04	; 4
    16a4:	8c 93       	st	X, r24
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	bf 91       	pop	r27
    16b0:	af 91       	pop	r26
    16b2:	9f 91       	pop	r25
    16b4:	8f 91       	pop	r24
    16b6:	7f 91       	pop	r23
    16b8:	6f 91       	pop	r22
    16ba:	5f 91       	pop	r21
    16bc:	4f 91       	pop	r20
    16be:	3f 91       	pop	r19
    16c0:	2f 91       	pop	r18
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <__vector_4>:
/*
 * Description:
 * Calls the call back function of timer 2 in case of Overflow interrupt occurs.
 */
ISR( TIMER2_OVF_vect )
{
    16cc:	1f 92       	push	r1
    16ce:	0f 92       	push	r0
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	0f 92       	push	r0
    16d4:	11 24       	eor	r1, r1
    16d6:	2f 93       	push	r18
    16d8:	3f 93       	push	r19
    16da:	4f 93       	push	r20
    16dc:	5f 93       	push	r21
    16de:	6f 93       	push	r22
    16e0:	7f 93       	push	r23
    16e2:	8f 93       	push	r24
    16e4:	9f 93       	push	r25
    16e6:	af 93       	push	r26
    16e8:	bf 93       	push	r27
    16ea:	ef 93       	push	r30
    16ec:	ff 93       	push	r31
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR)
    16f6:	80 91 22 01 	lds	r24, 0x0122
    16fa:	90 91 23 01 	lds	r25, 0x0123
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	29 f0       	breq	.+10     	; 0x170c <__vector_4+0x40>
	{
		(*g_timer2CallBackPtr)();
    1702:	e0 91 22 01 	lds	r30, 0x0122
    1706:	f0 91 23 01 	lds	r31, 0x0123
    170a:	09 95       	icall
	}
	TIFR |= TOV2;
    170c:	a8 e5       	ldi	r26, 0x58	; 88
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e8 e5       	ldi	r30, 0x58	; 88
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	86 60       	ori	r24, 0x06	; 6
    1718:	8c 93       	st	X, r24
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_3>:
/*
 * Description:
 * Calls the call back function of timer 2 in case of compare match interrupt occurs.
 */
ISR( TIMER2_COMP_vect )
{
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	2f 93       	push	r18
    174c:	3f 93       	push	r19
    174e:	4f 93       	push	r20
    1750:	5f 93       	push	r21
    1752:	6f 93       	push	r22
    1754:	7f 93       	push	r23
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	af 93       	push	r26
    175c:	bf 93       	push	r27
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR)
    176a:	80 91 22 01 	lds	r24, 0x0122
    176e:	90 91 23 01 	lds	r25, 0x0123
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	29 f0       	breq	.+10     	; 0x1780 <__vector_3+0x40>
	{
		(*g_timer2CallBackPtr)();
    1776:	e0 91 22 01 	lds	r30, 0x0122
    177a:	f0 91 23 01 	lds	r31, 0x0123
    177e:	09 95       	icall
	}
	TIFR |= OCF2;
    1780:	a8 e5       	ldi	r26, 0x58	; 88
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e8 e5       	ldi	r30, 0x58	; 88
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	87 60       	ori	r24, 0x07	; 7
    178c:	8c 93       	st	X, r24
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init( UART_ConfigType* config )
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <UART_init+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <UART_init+0x8>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <UART_init+0xa>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	9c 83       	std	Y+4, r25	; 0x04
    17c4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    17c6:	1a 82       	std	Y+2, r1	; 0x02
    17c8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    17ca:	eb e2       	ldi	r30, 0x2B	; 43
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 initially and i will change it later while i select the data bits.
	 * RXB8 & TXB8 not used for 8-bit data mode /////////
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    17d2:	ea e2       	ldi	r30, 0x2A	; 42
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	88 e1       	ldi	r24, 0x18	; 24
    17d8:	80 83       	st	Z, r24
	 * USBS    = inserted according to configurations
	 * UCSZ1:0 = 11 For 8-bit data mode /////////////////////
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	/* Insert the value of parity type in bits 5:4, and number of stop bits according to configurations.*/
	UCSRC = (1<<URSEL) | ((UCSRC&~(0x30))|((config->parity)<<4)) | ((config->stopBits)<<USBS);
    17da:	a0 e4       	ldi	r26, 0x40	; 64
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e0 e4       	ldi	r30, 0x40	; 64
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	2f 7c       	andi	r18, 0xCF	; 207
    17e8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ea:	fc 81       	ldd	r31, Y+4	; 0x04
    17ec:	83 81       	ldd	r24, Z+3	; 0x03
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	82 95       	swap	r24
    17f4:	92 95       	swap	r25
    17f6:	90 7f       	andi	r25, 0xF0	; 240
    17f8:	98 27       	eor	r25, r24
    17fa:	80 7f       	andi	r24, 0xF0	; 240
    17fc:	98 27       	eor	r25, r24
    17fe:	82 2b       	or	r24, r18
    1800:	28 2f       	mov	r18, r24
    1802:	20 68       	ori	r18, 0x80	; 128
    1804:	eb 81       	ldd	r30, Y+3	; 0x03
    1806:	fc 81       	ldd	r31, Y+4	; 0x04
    1808:	84 81       	ldd	r24, Z+4	; 0x04
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	82 2b       	or	r24, r18
    181c:	8c 93       	st	X, r24

	/* Configure registers according to required data bits*/
	switch(config->dataLength)
    181e:	eb 81       	ldd	r30, Y+3	; 0x03
    1820:	fc 81       	ldd	r31, Y+4	; 0x04
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3e 83       	std	Y+6, r19	; 0x06
    182a:	2d 83       	std	Y+5, r18	; 0x05
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	99 23       	and	r25, r25
    1832:	34 f1       	brlt	.+76     	; 0x1880 <UART_init+0xcc>
    1834:	2d 81       	ldd	r18, Y+5	; 0x05
    1836:	3e 81       	ldd	r19, Y+6	; 0x06
    1838:	24 30       	cpi	r18, 0x04	; 4
    183a:	31 05       	cpc	r19, r1
    183c:	34 f0       	brlt	.+12     	; 0x184a <UART_init+0x96>
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	91 05       	cpc	r25, r1
    1846:	71 f0       	breq	.+28     	; 0x1864 <UART_init+0xb0>
    1848:	1b c0       	rjmp	.+54     	; 0x1880 <UART_init+0xcc>
	case BITS_5:
	case BITS_6:
	case BITS_7:
	case BITS_8:
		/* Keep UCSZ2 at UCSRB register 0 as it is and insert number of bits on UCSRC register at first 2 bits.*/
		UCSRC = (UCSRC&~(0x03))|(config->dataLength);
    184a:	a0 e4       	ldi	r26, 0x40	; 64
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e0 e4       	ldi	r30, 0x40	; 64
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	98 2f       	mov	r25, r24
    1856:	9c 7f       	andi	r25, 0xFC	; 252
    1858:	eb 81       	ldd	r30, Y+3	; 0x03
    185a:	fc 81       	ldd	r31, Y+4	; 0x04
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	89 2b       	or	r24, r25
    1860:	8c 93       	st	X, r24
    1862:	0e c0       	rjmp	.+28     	; 0x1880 <UART_init+0xcc>
		break;
	case BITS_9:
		/* Set UCSZ2 at UCSRB register to 1 and insert 0b11 at first 2 bits.*/
		UCSRB |= (1<<UCSZ2);
    1864:	aa e2       	ldi	r26, 0x2A	; 42
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ea e2       	ldi	r30, 0x2A	; 42
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	84 60       	ori	r24, 0x04	; 4
    1870:	8c 93       	st	X, r24
		UCSRC |= 0x03;
    1872:	a0 e4       	ldi	r26, 0x40	; 64
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e0 e4       	ldi	r30, 0x40	; 64
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	83 60       	ori	r24, 0x03	; 3
    187e:	8c 93       	st	X, r24
		break;
	}
	
	/* Calculate the UBRR register value according to configurations */
	ubrr_value = (uint16)(((F_CPU / (config->bitRate * 8UL))) - 1);
    1880:	eb 81       	ldd	r30, Y+3	; 0x03
    1882:	fc 81       	ldd	r31, Y+4	; 0x04
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	cc 01       	movw	r24, r24
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	aa 1f       	adc	r26, r26
    1894:	bb 1f       	adc	r27, r27
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	aa 1f       	adc	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	aa 1f       	adc	r26, r26
    18a4:	bb 1f       	adc	r27, r27
    18a6:	9c 01       	movw	r18, r24
    18a8:	ad 01       	movw	r20, r26
    18aa:	80 e4       	ldi	r24, 0x40	; 64
    18ac:	92 e4       	ldi	r25, 0x42	; 66
    18ae:	af e0       	ldi	r26, 0x0F	; 15
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__udivmodsi4>
    18ba:	da 01       	movw	r26, r20
    18bc:	c9 01       	movw	r24, r18
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    18c4:	e0 e4       	ldi	r30, 0x40	; 64
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	89 2f       	mov	r24, r25
    18ce:	99 27       	eor	r25, r25
    18d0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    18d2:	e9 e2       	ldi	r30, 0x29	; 41
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	80 83       	st	Z, r24
}
    18da:	26 96       	adiw	r28, 0x06	; 6
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	0f 92       	push	r0
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    18f8:	eb e2       	ldi	r30, 0x2B	; 43
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	80 72       	andi	r24, 0x20	; 32
    1904:	90 70       	andi	r25, 0x00	; 0
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	b9 f3       	breq	.-18     	; 0x18f8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    190a:	ec e2       	ldi	r30, 0x2C	; 44
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1922:	eb e2       	ldi	r30, 0x2B	; 43
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	88 23       	and	r24, r24
    192a:	dc f7       	brge	.-10     	; 0x1922 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    192c:	ec e2       	ldi	r30, 0x2C	; 44
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <UART_sendString+0x6>
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9b 83       	std	Y+3, r25	; 0x03
    1946:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1948:	19 82       	std	Y+1, r1	; 0x01
    194a:	0e c0       	rjmp	.+28     	; 0x1968 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	fc 01       	movw	r30, r24
    1958:	e2 0f       	add	r30, r18
    195a:	f3 1f       	adc	r31, r19
    195c:	80 81       	ld	r24, Z
    195e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_sendByte>
		i++;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	8f 5f       	subi	r24, 0xFF	; 255
    1966:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	9b 81       	ldd	r25, Y+3	; 0x03
    1972:	fc 01       	movw	r30, r24
    1974:	e2 0f       	add	r30, r18
    1976:	f3 1f       	adc	r31, r19
    1978:	80 81       	ld	r24, Z
    197a:	88 23       	and	r24, r24
    197c:	39 f7       	brne	.-50     	; 0x194c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <UART_receiveString+0xa>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9b 83       	std	Y+3, r25	; 0x03
    199c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    199e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	9b 81       	ldd	r25, Y+3	; 0x03
    19aa:	8c 01       	movw	r16, r24
    19ac:	02 0f       	add	r16, r18
    19ae:	13 1f       	adc	r17, r19
    19b0:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
    19b4:	f8 01       	movw	r30, r16
    19b6:	80 83       	st	Z, r24
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ca:	8c 01       	movw	r16, r24
    19cc:	02 0f       	add	r16, r18
    19ce:	13 1f       	adc	r17, r19
    19d0:	0e 94 8d 0c 	call	0x191a	; 0x191a <UART_recieveByte>
    19d4:	f8 01       	movw	r30, r16
    19d6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	fc 01       	movw	r30, r24
    19e4:	e2 0f       	add	r30, r18
    19e6:	f3 1f       	adc	r31, r19
    19e8:	80 81       	ld	r24, Z
    19ea:	83 32       	cpi	r24, 0x23	; 35
    19ec:	31 f7       	brne	.-52     	; 0x19ba <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	fc 01       	movw	r30, r24
    19fa:	e2 0f       	add	r30, r18
    19fc:	f3 1f       	adc	r31, r19
    19fe:	10 82       	st	Z, r1
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	08 95       	ret

00001a10 <__udivmodsi4>:
    1a10:	a1 e2       	ldi	r26, 0x21	; 33
    1a12:	1a 2e       	mov	r1, r26
    1a14:	aa 1b       	sub	r26, r26
    1a16:	bb 1b       	sub	r27, r27
    1a18:	fd 01       	movw	r30, r26
    1a1a:	0d c0       	rjmp	.+26     	; 0x1a36 <__udivmodsi4_ep>

00001a1c <__udivmodsi4_loop>:
    1a1c:	aa 1f       	adc	r26, r26
    1a1e:	bb 1f       	adc	r27, r27
    1a20:	ee 1f       	adc	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	a2 17       	cp	r26, r18
    1a26:	b3 07       	cpc	r27, r19
    1a28:	e4 07       	cpc	r30, r20
    1a2a:	f5 07       	cpc	r31, r21
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <__udivmodsi4_ep>
    1a2e:	a2 1b       	sub	r26, r18
    1a30:	b3 0b       	sbc	r27, r19
    1a32:	e4 0b       	sbc	r30, r20
    1a34:	f5 0b       	sbc	r31, r21

00001a36 <__udivmodsi4_ep>:
    1a36:	66 1f       	adc	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	1a 94       	dec	r1
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <__udivmodsi4_loop>
    1a42:	60 95       	com	r22
    1a44:	70 95       	com	r23
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	bd 01       	movw	r22, r26
    1a50:	cf 01       	movw	r24, r30
    1a52:	08 95       	ret

00001a54 <itoa>:
    1a54:	fb 01       	movw	r30, r22
    1a56:	9f 01       	movw	r18, r30
    1a58:	e8 94       	clt
    1a5a:	42 30       	cpi	r20, 0x02	; 2
    1a5c:	c4 f0       	brlt	.+48     	; 0x1a8e <itoa+0x3a>
    1a5e:	45 32       	cpi	r20, 0x25	; 37
    1a60:	b4 f4       	brge	.+44     	; 0x1a8e <itoa+0x3a>
    1a62:	4a 30       	cpi	r20, 0x0A	; 10
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <itoa+0x1c>
    1a66:	97 fb       	bst	r25, 7
    1a68:	1e f4       	brtc	.+6      	; 0x1a70 <itoa+0x1c>
    1a6a:	90 95       	com	r25
    1a6c:	81 95       	neg	r24
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	64 2f       	mov	r22, r20
    1a72:	77 27       	eor	r23, r23
    1a74:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__udivmodhi4>
    1a78:	80 5d       	subi	r24, 0xD0	; 208
    1a7a:	8a 33       	cpi	r24, 0x3A	; 58
    1a7c:	0c f0       	brlt	.+2      	; 0x1a80 <itoa+0x2c>
    1a7e:	89 5d       	subi	r24, 0xD9	; 217
    1a80:	81 93       	st	Z+, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	a1 f7       	brne	.-24     	; 0x1a70 <itoa+0x1c>
    1a88:	16 f4       	brtc	.+4      	; 0x1a8e <itoa+0x3a>
    1a8a:	5d e2       	ldi	r21, 0x2D	; 45
    1a8c:	51 93       	st	Z+, r21
    1a8e:	10 82       	st	Z, r1
    1a90:	c9 01       	movw	r24, r18
    1a92:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <strrev>

00001a96 <strrev>:
    1a96:	dc 01       	movw	r26, r24
    1a98:	fc 01       	movw	r30, r24
    1a9a:	67 2f       	mov	r22, r23
    1a9c:	71 91       	ld	r23, Z+
    1a9e:	77 23       	and	r23, r23
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <strrev+0x4>
    1aa2:	32 97       	sbiw	r30, 0x02	; 2
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <strrev+0x18>
    1aa6:	7c 91       	ld	r23, X
    1aa8:	6d 93       	st	X+, r22
    1aaa:	70 83       	st	Z, r23
    1aac:	62 91       	ld	r22, -Z
    1aae:	ae 17       	cp	r26, r30
    1ab0:	bf 07       	cpc	r27, r31
    1ab2:	c8 f3       	brcs	.-14     	; 0x1aa6 <strrev+0x10>
    1ab4:	08 95       	ret

00001ab6 <__udivmodhi4>:
    1ab6:	aa 1b       	sub	r26, r26
    1ab8:	bb 1b       	sub	r27, r27
    1aba:	51 e1       	ldi	r21, 0x11	; 17
    1abc:	07 c0       	rjmp	.+14     	; 0x1acc <__udivmodhi4_ep>

00001abe <__udivmodhi4_loop>:
    1abe:	aa 1f       	adc	r26, r26
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	a6 17       	cp	r26, r22
    1ac4:	b7 07       	cpc	r27, r23
    1ac6:	10 f0       	brcs	.+4      	; 0x1acc <__udivmodhi4_ep>
    1ac8:	a6 1b       	sub	r26, r22
    1aca:	b7 0b       	sbc	r27, r23

00001acc <__udivmodhi4_ep>:
    1acc:	88 1f       	adc	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	5a 95       	dec	r21
    1ad2:	a9 f7       	brne	.-22     	; 0x1abe <__udivmodhi4_loop>
    1ad4:	80 95       	com	r24
    1ad6:	90 95       	com	r25
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	08 95       	ret

00001ade <_exit>:
    1ade:	f8 94       	cli

00001ae0 <__stop_program>:
    1ae0:	ff cf       	rjmp	.-2      	; 0x1ae0 <__stop_program>
