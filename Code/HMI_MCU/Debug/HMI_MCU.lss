
HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000292c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  0000292c  000029a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000024a8  00000000  00000000  00002a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e15  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000099b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af eb       	ldi	r26, 0xBF	; 191
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8f eb       	ldi	r24, 0xBF	; 191
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
void requestNewPassword( uint8* password, uint8* reEnteredPassword );
void displayError (Error error);


int main ( void )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6d 97       	sbiw	r28, 0x1d	; 29
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	UART_init(9600);
     b4a:	60 e8       	ldi	r22, 0x80	; 128
     b4c:	75 e2       	ldi	r23, 0x25	; 37
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 18 13 	call	0x2630	; 0x2630 <UART_init>

	LCD_init();
     b56:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <LCD_init>
	uint8 password[5];
	uint8 reEnteredPassword[5];

	requestNewPassword(password, reEnteredPassword);
     b5a:	ce 01       	movw	r24, r28
     b5c:	44 96       	adiw	r24, 0x14	; 20
     b5e:	9e 01       	movw	r18, r28
     b60:	27 5e       	subi	r18, 0xE7	; 231
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	b9 01       	movw	r22, r18
     b66:	0e 94 9a 06 	call	0xd34	; 0xd34 <requestNewPassword>
	/////////////////////////////////////////////////////////////////////
	for(uint8 i = 0; i < 5; i++)
     b6a:	1a 8a       	std	Y+18, r1	; 0x12
     b6c:	10 c0       	rjmp	.+32     	; 0xb8e <main+0x58>
	{
		LCD_intgerToString(password[i]);
     b6e:	8a 89       	ldd	r24, Y+18	; 0x12
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	ce 01       	movw	r24, r28
     b76:	44 96       	adiw	r24, 0x14	; 20
     b78:	fc 01       	movw	r30, r24
     b7a:	e2 0f       	add	r30, r18
     b7c:	f3 1f       	adc	r31, r19
     b7e:	80 81       	ld	r24, Z
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_intgerToString>
	uint8 password[5];
	uint8 reEnteredPassword[5];

	requestNewPassword(password, reEnteredPassword);
	/////////////////////////////////////////////////////////////////////
	for(uint8 i = 0; i < 5; i++)
     b88:	8a 89       	ldd	r24, Y+18	; 0x12
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	8a 8b       	std	Y+18, r24	; 0x12
     b8e:	8a 89       	ldd	r24, Y+18	; 0x12
     b90:	85 30       	cpi	r24, 0x05	; 5
     b92:	68 f3       	brcs	.-38     	; 0xb6e <main+0x38>
	{
		LCD_intgerToString(password[i]);
	}
	for(uint8 i = 0; i < 5; i++)
     b94:	19 8a       	std	Y+17, r1	; 0x11
     b96:	10 c0       	rjmp	.+32     	; 0xbb8 <main+0x82>
	{
		LCD_intgerToString(reEnteredPassword[i]);
     b98:	89 89       	ldd	r24, Y+17	; 0x11
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	ce 01       	movw	r24, r28
     ba0:	49 96       	adiw	r24, 0x19	; 25
     ba2:	fc 01       	movw	r30, r24
     ba4:	e2 0f       	add	r30, r18
     ba6:	f3 1f       	adc	r31, r19
     ba8:	80 81       	ld	r24, Z
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_intgerToString>
	/////////////////////////////////////////////////////////////////////
	for(uint8 i = 0; i < 5; i++)
	{
		LCD_intgerToString(password[i]);
	}
	for(uint8 i = 0; i < 5; i++)
     bb2:	89 89       	ldd	r24, Y+17	; 0x11
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	89 8b       	std	Y+17, r24	; 0x11
     bb8:	89 89       	ldd	r24, Y+17	; 0x11
     bba:	85 30       	cpi	r24, 0x05	; 5
     bbc:	68 f3       	brcs	.-38     	; 0xb98 <main+0x62>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	aa e7       	ldi	r26, 0x7A	; 122
     bc4:	b4 e4       	ldi	r27, 0x44	; 68
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a ef       	ldi	r20, 0xFA	; 250
     bdc:	54 e4       	ldi	r21, 0x44	; 68
     bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <main+0xda>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <main+0x158>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <main+0x13a>
     c52:	88 ec       	ldi	r24, 0xC8	; 200
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <main+0x128>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <main+0x11c>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <main+0x164>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	}
	/////////////////////////////////////////////////////////////////////


	_delay_ms(1000);
	while(UART_recieveByte() != CONTROL_MCU_READY);
     ca2:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <UART_recieveByte>
     ca6:	80 31       	cpi	r24, 0x10	; 16
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0x16c>
	/* Sending password */
	for (uint8 i = 0; i < 5; i++)
     caa:	18 8a       	std	Y+16, r1	; 0x10
     cac:	0e c0       	rjmp	.+28     	; 0xcca <main+0x194>
	{
		UART_sendByte(password[i]);
     cae:	88 89       	ldd	r24, Y+16	; 0x10
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	ce 01       	movw	r24, r28
     cb6:	44 96       	adiw	r24, 0x14	; 20
     cb8:	fc 01       	movw	r30, r24
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	80 81       	ld	r24, Z
     cc0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <UART_sendByte>


	_delay_ms(1000);
	while(UART_recieveByte() != CONTROL_MCU_READY);
	/* Sending password */
	for (uint8 i = 0; i < 5; i++)
     cc4:	88 89       	ldd	r24, Y+16	; 0x10
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	88 8b       	std	Y+16, r24	; 0x10
     cca:	88 89       	ldd	r24, Y+16	; 0x10
     ccc:	85 30       	cpi	r24, 0x05	; 5
     cce:	78 f3       	brcs	.-34     	; 0xcae <main+0x178>
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < 5; i++)
     cd0:	1f 86       	std	Y+15, r1	; 0x0f
     cd2:	0e c0       	rjmp	.+28     	; 0xcf0 <main+0x1ba>
	{
		UART_sendByte(reEnteredPassword[i]);
     cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	ce 01       	movw	r24, r28
     cdc:	49 96       	adiw	r24, 0x19	; 25
     cde:	fc 01       	movw	r30, r24
     ce0:	e2 0f       	add	r30, r18
     ce2:	f3 1f       	adc	r31, r19
     ce4:	80 81       	ld	r24, Z
     ce6:	0e 94 64 13 	call	0x26c8	; 0x26c8 <UART_sendByte>
	for (uint8 i = 0; i < 5; i++)
	{
		UART_sendByte(password[i]);
	}
	/* Sending reentered password */
	for (uint8 i = 0; i < 5; i++)
     cea:	8f 85       	ldd	r24, Y+15	; 0x0f
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	8f 87       	std	Y+15, r24	; 0x0f
     cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf2:	85 30       	cpi	r24, 0x05	; 5
     cf4:	78 f3       	brcs	.-34     	; 0xcd4 <main+0x19e>
//	UART_sendByte(HMI_MCU_READY);
//	uint8 compareResult = UART_recieveByte();
//	while(UART_recieveByte() != CONTROL_MCU_READY);
//	UART_sendByte(password[0]);
////	UART_sendByte(reEnteredPassword[0]);
	UART_sendByte(HMI_MCU_READY);
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <UART_sendByte>
	uint8 compareResult = UART_recieveByte();
     cfc:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <UART_recieveByte>
     d00:	8b 8b       	std	Y+19, r24	; 0x13

	if(compareResult)
     d02:	8b 89       	ldd	r24, Y+19	; 0x13
     d04:	88 23       	and	r24, r24
     d06:	59 f0       	breq	.+22     	; 0xd1e <main+0x1e8>
	{
		LCD_clearScreen();
     d08:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		LCD_displayString("Match");
     d14:	80 e6       	ldi	r24, 0x60	; 96
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <main+0x1fc>
	}
	else
	{
		LCD_clearScreen();
     d1e:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		LCD_displayString("Mis Match");
     d2a:	86 e6       	ldi	r24, 0x66	; 102
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
     d32:	ff cf       	rjmp	.-2      	; 0xd32 <main+0x1fc>

00000d34 <requestNewPassword>:
}



void requestNewPassword( uint8* password, uint8* reEnteredPassword )
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	c1 54       	subi	r28, 0x41	; 65
     d3e:	d0 40       	sbci	r29, 0x00	; 0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	9f af       	std	Y+63, r25	; 0x3f
     d4c:	8e af       	std	Y+62, r24	; 0x3e
     d4e:	fe 01       	movw	r30, r28
     d50:	e0 5c       	subi	r30, 0xC0	; 192
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	71 83       	std	Z+1, r23	; 0x01
     d56:	60 83       	st	Z, r22
	uint8 i = 0;
     d58:	1d ae       	std	Y+61, r1	; 0x3d
	uint8 key;
	boolean errorFlag = LOGIC_HIGH;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8b af       	std	Y+59, r24	; 0x3b
     d5e:	11 c1       	rjmp	.+546    	; 0xf82 <requestNewPassword+0x24e>
	/* Enter password till pressing '=' */
	while(errorFlag == LOGIC_HIGH)
	{
		i = 0;
     d60:	1d ae       	std	Y+61, r1	; 0x3d
		/* Request new password from user and then press '=' key*/
		LCD_displayString("Enter new pass.:");
     d62:	80 e7       	ldi	r24, 0x70	; 112
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
		LCD_moveCursor(1, 0);
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		errorFlag = LOGIC_LOW;
     d72:	1b ae       	std	Y+59, r1	; 0x3b
		while(1)
		{
			key = KEYPAD_getPressedKey();
     d74:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <KEYPAD_getPressedKey>
     d78:	8c af       	std	Y+60, r24	; 0x3c
			password[i] = key;
     d7a:	8d ad       	ldd	r24, Y+61	; 0x3d
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	8e ad       	ldd	r24, Y+62	; 0x3e
     d82:	9f ad       	ldd	r25, Y+63	; 0x3f
     d84:	fc 01       	movw	r30, r24
     d86:	e2 0f       	add	r30, r18
     d88:	f3 1f       	adc	r31, r19
     d8a:	8c ad       	ldd	r24, Y+60	; 0x3c
     d8c:	80 83       	st	Z, r24
			/*If user press '=' -> end of edit.*/
			if(key == '=')
     d8e:	8c ad       	ldd	r24, Y+60	; 0x3c
     d90:	8d 33       	cpi	r24, 0x3D	; 61
     d92:	09 f0       	breq	.+2      	; 0xd96 <requestNewPassword+0x62>
     d94:	77 c0       	rjmp	.+238    	; 0xe84 <requestNewPassword+0x150>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a6 e9       	ldi	r26, 0x96	; 150
     d9c:	b3 e4       	ldi	r27, 0x43	; 67
     d9e:	8d ab       	std	Y+53, r24	; 0x35
     da0:	9e ab       	std	Y+54, r25	; 0x36
     da2:	af ab       	std	Y+55, r26	; 0x37
     da4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da6:	6d a9       	ldd	r22, Y+53	; 0x35
     da8:	7e a9       	ldd	r23, Y+54	; 0x36
     daa:	8f a9       	ldd	r24, Y+55	; 0x37
     dac:	98 ad       	ldd	r25, Y+56	; 0x38
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	4a ef       	ldi	r20, 0xFA	; 250
     db4:	54 e4       	ldi	r21, 0x44	; 68
     db6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	89 ab       	std	Y+49, r24	; 0x31
     dc0:	9a ab       	std	Y+50, r25	; 0x32
     dc2:	ab ab       	std	Y+51, r26	; 0x33
     dc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dc6:	69 a9       	ldd	r22, Y+49	; 0x31
     dc8:	7a a9       	ldd	r23, Y+50	; 0x32
     dca:	8b a9       	ldd	r24, Y+51	; 0x33
     dcc:	9c a9       	ldd	r25, Y+52	; 0x34
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dda:	88 23       	and	r24, r24
     ddc:	2c f4       	brge	.+10     	; 0xde8 <requestNewPassword+0xb4>
		__ticks = 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	98 ab       	std	Y+48, r25	; 0x30
     de4:	8f a7       	std	Y+47, r24	; 0x2f
     de6:	3f c0       	rjmp	.+126    	; 0xe66 <requestNewPassword+0x132>
	else if (__tmp > 65535)
     de8:	69 a9       	ldd	r22, Y+49	; 0x31
     dea:	7a a9       	ldd	r23, Y+50	; 0x32
     dec:	8b a9       	ldd	r24, Y+51	; 0x33
     dee:	9c a9       	ldd	r25, Y+52	; 0x34
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	57 e4       	ldi	r21, 0x47	; 71
     df8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	4c f5       	brge	.+82     	; 0xe52 <requestNewPassword+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e00:	6d a9       	ldd	r22, Y+53	; 0x35
     e02:	7e a9       	ldd	r23, Y+54	; 0x36
     e04:	8f a9       	ldd	r24, Y+55	; 0x37
     e06:	98 ad       	ldd	r25, Y+56	; 0x38
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e2       	ldi	r20, 0x20	; 32
     e0e:	51 e4       	ldi	r21, 0x41	; 65
     e10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	98 ab       	std	Y+48, r25	; 0x30
     e26:	8f a7       	std	Y+47, r24	; 0x2f
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <requestNewPassword+0x114>
     e2a:	88 ec       	ldi	r24, 0xC8	; 200
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9e a7       	std	Y+46, r25	; 0x2e
     e30:	8d a7       	std	Y+45, r24	; 0x2d
     e32:	8d a5       	ldd	r24, Y+45	; 0x2d
     e34:	9e a5       	ldd	r25, Y+46	; 0x2e
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <requestNewPassword+0x102>
     e3a:	9e a7       	std	Y+46, r25	; 0x2e
     e3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e40:	98 a9       	ldd	r25, Y+48	; 0x30
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	98 ab       	std	Y+48, r25	; 0x30
     e46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	8f a5       	ldd	r24, Y+47	; 0x2f
     e4a:	98 a9       	ldd	r25, Y+48	; 0x30
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	69 f7       	brne	.-38     	; 0xe2a <requestNewPassword+0xf6>
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <requestNewPassword+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	69 a9       	ldd	r22, Y+49	; 0x31
     e54:	7a a9       	ldd	r23, Y+50	; 0x32
     e56:	8b a9       	ldd	r24, Y+51	; 0x33
     e58:	9c a9       	ldd	r25, Y+52	; 0x34
     e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	98 ab       	std	Y+48, r25	; 0x30
     e64:	8f a7       	std	Y+47, r24	; 0x2f
     e66:	8f a5       	ldd	r24, Y+47	; 0x2f
     e68:	98 a9       	ldd	r25, Y+48	; 0x30
     e6a:	9c a7       	std	Y+44, r25	; 0x2c
     e6c:	8b a7       	std	Y+43, r24	; 0x2b
     e6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     e70:	9c a5       	ldd	r25, Y+44	; 0x2c
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <requestNewPassword+0x13e>
     e76:	9c a7       	std	Y+44, r25	; 0x2c
     e78:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_displayCharacter('*');
			_delay_ms(300);
			i++;
		}
		/* Display error if password is not 5 characters. */
		if(i != 5)
     e7a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e7c:	85 30       	cpi	r24, 0x05	; 5
     e7e:	09 f0       	breq	.+2      	; 0xe82 <requestNewPassword+0x14e>
     e80:	7a c0       	rjmp	.+244    	; 0xf76 <requestNewPassword+0x242>
     e82:	7f c0       	rjmp	.+254    	; 0xf82 <requestNewPassword+0x24e>
			if(key == '=')
			{
				_delay_ms(300);
				break;
			}
			LCD_displayCharacter('*');
     e84:	8a e2       	ldi	r24, 0x2A	; 42
     e86:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_displayCharacter>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a6 e9       	ldi	r26, 0x96	; 150
     e90:	b3 e4       	ldi	r27, 0x43	; 67
     e92:	8f a3       	std	Y+39, r24	; 0x27
     e94:	98 a7       	std	Y+40, r25	; 0x28
     e96:	a9 a7       	std	Y+41, r26	; 0x29
     e98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9a:	6f a1       	ldd	r22, Y+39	; 0x27
     e9c:	78 a5       	ldd	r23, Y+40	; 0x28
     e9e:	89 a5       	ldd	r24, Y+41	; 0x29
     ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	4a ef       	ldi	r20, 0xFA	; 250
     ea8:	54 e4       	ldi	r21, 0x44	; 68
     eaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	8b a3       	std	Y+35, r24	; 0x23
     eb4:	9c a3       	std	Y+36, r25	; 0x24
     eb6:	ad a3       	std	Y+37, r26	; 0x25
     eb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eba:	6b a1       	ldd	r22, Y+35	; 0x23
     ebc:	7c a1       	ldd	r23, Y+36	; 0x24
     ebe:	8d a1       	ldd	r24, Y+37	; 0x25
     ec0:	9e a1       	ldd	r25, Y+38	; 0x26
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e8       	ldi	r20, 0x80	; 128
     ec8:	5f e3       	ldi	r21, 0x3F	; 63
     eca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ece:	88 23       	and	r24, r24
     ed0:	2c f4       	brge	.+10     	; 0xedc <requestNewPassword+0x1a8>
		__ticks = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9a a3       	std	Y+34, r25	; 0x22
     ed8:	89 a3       	std	Y+33, r24	; 0x21
     eda:	3f c0       	rjmp	.+126    	; 0xf5a <requestNewPassword+0x226>
	else if (__tmp > 65535)
     edc:	6b a1       	ldd	r22, Y+35	; 0x23
     ede:	7c a1       	ldd	r23, Y+36	; 0x24
     ee0:	8d a1       	ldd	r24, Y+37	; 0x25
     ee2:	9e a1       	ldd	r25, Y+38	; 0x26
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	57 e4       	ldi	r21, 0x47	; 71
     eec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	4c f5       	brge	.+82     	; 0xf46 <requestNewPassword+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef4:	6f a1       	ldd	r22, Y+39	; 0x27
     ef6:	78 a5       	ldd	r23, Y+40	; 0x28
     ef8:	89 a5       	ldd	r24, Y+41	; 0x29
     efa:	9a a5       	ldd	r25, Y+42	; 0x2a
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e2       	ldi	r20, 0x20	; 32
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9a a3       	std	Y+34, r25	; 0x22
     f1a:	89 a3       	std	Y+33, r24	; 0x21
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <requestNewPassword+0x208>
     f1e:	88 ec       	ldi	r24, 0xC8	; 200
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	98 a3       	std	Y+32, r25	; 0x20
     f24:	8f 8f       	std	Y+31, r24	; 0x1f
     f26:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f28:	98 a1       	ldd	r25, Y+32	; 0x20
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <requestNewPassword+0x1f6>
     f2e:	98 a3       	std	Y+32, r25	; 0x20
     f30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	89 a1       	ldd	r24, Y+33	; 0x21
     f34:	9a a1       	ldd	r25, Y+34	; 0x22
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	9a a3       	std	Y+34, r25	; 0x22
     f3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3c:	89 a1       	ldd	r24, Y+33	; 0x21
     f3e:	9a a1       	ldd	r25, Y+34	; 0x22
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	69 f7       	brne	.-38     	; 0xf1e <requestNewPassword+0x1ea>
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <requestNewPassword+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f46:	6b a1       	ldd	r22, Y+35	; 0x23
     f48:	7c a1       	ldd	r23, Y+36	; 0x24
     f4a:	8d a1       	ldd	r24, Y+37	; 0x25
     f4c:	9e a1       	ldd	r25, Y+38	; 0x26
     f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9a a3       	std	Y+34, r25	; 0x22
     f58:	89 a3       	std	Y+33, r24	; 0x21
     f5a:	89 a1       	ldd	r24, Y+33	; 0x21
     f5c:	9a a1       	ldd	r25, Y+34	; 0x22
     f5e:	9e 8f       	std	Y+30, r25	; 0x1e
     f60:	8d 8f       	std	Y+29, r24	; 0x1d
     f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <requestNewPassword+0x232>
     f6a:	9e 8f       	std	Y+30, r25	; 0x1e
     f6c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			i++;
     f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	8d af       	std	Y+61, r24	; 0x3d
     f74:	ff ce       	rjmp	.-514    	; 0xd74 <requestNewPassword+0x40>
		}
		/* Display error if password is not 5 characters. */
		if(i != 5)
		{
			errorFlag = LOGIC_HIGH;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	8b af       	std	Y+59, r24	; 0x3b
			Error error = PASS_LENGTH_ERROR;
     f7a:	1a ae       	std	Y+58, r1	; 0x3a
			displayError(error);
     f7c:	8a ad       	ldd	r24, Y+58	; 0x3a
     f7e:	0e 94 ed 08 	call	0x11da	; 0x11da <displayError>
{
	uint8 i = 0;
	uint8 key;
	boolean errorFlag = LOGIC_HIGH;
	/* Enter password till pressing '=' */
	while(errorFlag == LOGIC_HIGH)
     f82:	8b ad       	ldd	r24, Y+59	; 0x3b
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	09 f4       	brne	.+2      	; 0xf8a <requestNewPassword+0x256>
     f88:	eb ce       	rjmp	.-554    	; 0xd60 <requestNewPassword+0x2c>
			Error error = PASS_LENGTH_ERROR;
			displayError(error);
		}
	}

	LCD_clearScreen();
     f8a:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_clearScreen>

	i = 0;
     f8e:	1d ae       	std	Y+61, r1	; 0x3d
	errorFlag = LOGIC_HIGH;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	8b af       	std	Y+59, r24	; 0x3b
     f94:	14 c1       	rjmp	.+552    	; 0x11be <requestNewPassword+0x48a>
	/* Enter password till pressing '=' */
	while(errorFlag == LOGIC_HIGH)
	{
		i = 0;
     f96:	1d ae       	std	Y+61, r1	; 0x3d
		LCD_displayString("Re-enter pass.:");
     f98:	81 e8       	ldi	r24, 0x81	; 129
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
		LCD_moveCursor(1, 0);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		errorFlag = LOGIC_LOW;
     fa8:	1b ae       	std	Y+59, r1	; 0x3b
		while(1)
		{
			key = KEYPAD_getPressedKey();
     faa:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <KEYPAD_getPressedKey>
     fae:	8c af       	std	Y+60, r24	; 0x3c
			reEnteredPassword[i] = key;
     fb0:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	fe 01       	movw	r30, r28
     fb8:	e0 5c       	subi	r30, 0xC0	; 192
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	fc 01       	movw	r30, r24
     fc2:	e2 0f       	add	r30, r18
     fc4:	f3 1f       	adc	r31, r19
     fc6:	8c ad       	ldd	r24, Y+60	; 0x3c
     fc8:	80 83       	st	Z, r24
			/*If user press '=' -> end of edit.*/
			if(key == '=')
     fca:	8c ad       	ldd	r24, Y+60	; 0x3c
     fcc:	8d 33       	cpi	r24, 0x3D	; 61
     fce:	09 f0       	breq	.+2      	; 0xfd2 <requestNewPassword+0x29e>
     fd0:	77 c0       	rjmp	.+238    	; 0x10c0 <requestNewPassword+0x38c>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a6 e9       	ldi	r26, 0x96	; 150
     fd8:	b3 e4       	ldi	r27, 0x43	; 67
     fda:	89 8f       	std	Y+25, r24	; 0x19
     fdc:	9a 8f       	std	Y+26, r25	; 0x1a
     fde:	ab 8f       	std	Y+27, r26	; 0x1b
     fe0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe2:	69 8d       	ldd	r22, Y+25	; 0x19
     fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4a ef       	ldi	r20, 0xFA	; 250
     ff0:	54 e4       	ldi	r21, 0x44	; 68
     ff2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8d 8b       	std	Y+21, r24	; 0x15
     ffc:	9e 8b       	std	Y+22, r25	; 0x16
     ffe:	af 8b       	std	Y+23, r26	; 0x17
    1000:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1002:	6d 89       	ldd	r22, Y+21	; 0x15
    1004:	7e 89       	ldd	r23, Y+22	; 0x16
    1006:	8f 89       	ldd	r24, Y+23	; 0x17
    1008:	98 8d       	ldd	r25, Y+24	; 0x18
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1016:	88 23       	and	r24, r24
    1018:	2c f4       	brge	.+10     	; 0x1024 <requestNewPassword+0x2f0>
		__ticks = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9c 8b       	std	Y+20, r25	; 0x14
    1020:	8b 8b       	std	Y+19, r24	; 0x13
    1022:	3f c0       	rjmp	.+126    	; 0x10a2 <requestNewPassword+0x36e>
	else if (__tmp > 65535)
    1024:	6d 89       	ldd	r22, Y+21	; 0x15
    1026:	7e 89       	ldd	r23, Y+22	; 0x16
    1028:	8f 89       	ldd	r24, Y+23	; 0x17
    102a:	98 8d       	ldd	r25, Y+24	; 0x18
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	4f e7       	ldi	r20, 0x7F	; 127
    1032:	57 e4       	ldi	r21, 0x47	; 71
    1034:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1038:	18 16       	cp	r1, r24
    103a:	4c f5       	brge	.+82     	; 0x108e <requestNewPassword+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103c:	69 8d       	ldd	r22, Y+25	; 0x19
    103e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1042:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9c 8b       	std	Y+20, r25	; 0x14
    1062:	8b 8b       	std	Y+19, r24	; 0x13
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <requestNewPassword+0x350>
    1066:	88 ec       	ldi	r24, 0xC8	; 200
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9a 8b       	std	Y+18, r25	; 0x12
    106c:	89 8b       	std	Y+17, r24	; 0x11
    106e:	89 89       	ldd	r24, Y+17	; 0x11
    1070:	9a 89       	ldd	r25, Y+18	; 0x12
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <requestNewPassword+0x33e>
    1076:	9a 8b       	std	Y+18, r25	; 0x12
    1078:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107a:	8b 89       	ldd	r24, Y+19	; 0x13
    107c:	9c 89       	ldd	r25, Y+20	; 0x14
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	9c 8b       	std	Y+20, r25	; 0x14
    1082:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1084:	8b 89       	ldd	r24, Y+19	; 0x13
    1086:	9c 89       	ldd	r25, Y+20	; 0x14
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	69 f7       	brne	.-38     	; 0x1066 <requestNewPassword+0x332>
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <requestNewPassword+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108e:	6d 89       	ldd	r22, Y+21	; 0x15
    1090:	7e 89       	ldd	r23, Y+22	; 0x16
    1092:	8f 89       	ldd	r24, Y+23	; 0x17
    1094:	98 8d       	ldd	r25, Y+24	; 0x18
    1096:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	9c 8b       	std	Y+20, r25	; 0x14
    10a0:	8b 8b       	std	Y+19, r24	; 0x13
    10a2:	8b 89       	ldd	r24, Y+19	; 0x13
    10a4:	9c 89       	ldd	r25, Y+20	; 0x14
    10a6:	98 8b       	std	Y+16, r25	; 0x10
    10a8:	8f 87       	std	Y+15, r24	; 0x0f
    10aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ac:	98 89       	ldd	r25, Y+16	; 0x10
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <requestNewPassword+0x37a>
    10b2:	98 8b       	std	Y+16, r25	; 0x10
    10b4:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_displayCharacter('*');
			_delay_ms(300);
			i++;
		}
		/* Display error if password is not 5 characters. */
		if(i != 5)
    10b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b8:	85 30       	cpi	r24, 0x05	; 5
    10ba:	09 f0       	breq	.+2      	; 0x10be <requestNewPassword+0x38a>
    10bc:	7a c0       	rjmp	.+244    	; 0x11b2 <requestNewPassword+0x47e>
    10be:	7f c0       	rjmp	.+254    	; 0x11be <requestNewPassword+0x48a>
			if(key == '=')
			{
				_delay_ms(300);
				break;
			}
			LCD_displayCharacter('*');
    10c0:	8a e2       	ldi	r24, 0x2A	; 42
    10c2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_displayCharacter>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a6 e9       	ldi	r26, 0x96	; 150
    10cc:	b3 e4       	ldi	r27, 0x43	; 67
    10ce:	8b 87       	std	Y+11, r24	; 0x0b
    10d0:	9c 87       	std	Y+12, r25	; 0x0c
    10d2:	ad 87       	std	Y+13, r26	; 0x0d
    10d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8f 83       	std	Y+7, r24	; 0x07
    10f0:	98 87       	std	Y+8, r25	; 0x08
    10f2:	a9 87       	std	Y+9, r26	; 0x09
    10f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <requestNewPassword+0x3e4>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <requestNewPassword+0x462>
	else if (__tmp > 65535)
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <requestNewPassword+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6b 85       	ldd	r22, Y+11	; 0x0b
    1132:	7c 85       	ldd	r23, Y+12	; 0x0c
    1134:	8d 85       	ldd	r24, Y+13	; 0x0d
    1136:	9e 85       	ldd	r25, Y+14	; 0x0e
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <requestNewPassword+0x444>
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <requestNewPassword+0x432>
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <requestNewPassword+0x426>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <requestNewPassword+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <requestNewPassword+0x46e>
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			i++;
    11aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	8d af       	std	Y+61, r24	; 0x3d
    11b0:	fc ce       	rjmp	.-520    	; 0xfaa <requestNewPassword+0x276>
		}
		/* Display error if password is not 5 characters. */
		if(i != 5)
		{
			errorFlag = LOGIC_HIGH;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	8b af       	std	Y+59, r24	; 0x3b
			Error error = PASS_LENGTH_ERROR;
    11b6:	19 ae       	std	Y+57, r1	; 0x39
			displayError(error);
    11b8:	89 ad       	ldd	r24, Y+57	; 0x39
    11ba:	0e 94 ed 08 	call	0x11da	; 0x11da <displayError>
	LCD_clearScreen();

	i = 0;
	errorFlag = LOGIC_HIGH;
	/* Enter password till pressing '=' */
	while(errorFlag == LOGIC_HIGH)
    11be:	8b ad       	ldd	r24, Y+59	; 0x3b
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <requestNewPassword+0x492>
    11c4:	e8 ce       	rjmp	.-560    	; 0xf96 <requestNewPassword+0x262>
			errorFlag = LOGIC_HIGH;
			Error error = PASS_LENGTH_ERROR;
			displayError(error);
		}
	}
}
    11c6:	cf 5b       	subi	r28, 0xBF	; 191
    11c8:	df 4f       	sbci	r29, 0xFF	; 255
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <displayError>:

void displayError( Error error )
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	6f 97       	sbiw	r28, 0x1f	; 31
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(error)
    11f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3f 8f       	std	Y+31, r19	; 0x1f
    11f8:	2e 8f       	std	Y+30, r18	; 0x1e
    11fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	39 f0       	breq	.+14     	; 0x1210 <displayError+0x36>
    1202:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1204:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1206:	21 30       	cpi	r18, 0x01	; 1
    1208:	31 05       	cpc	r19, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <displayError+0x34>
    120c:	88 c0       	rjmp	.+272    	; 0x131e <displayError+0x144>
    120e:	0d c1       	rjmp	.+538    	; 0x142a <displayError+0x250>
	{
	case PASS_LENGTH_ERROR:
		LCD_clearScreen();
    1210:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		LCD_displayString("Password must be");
    121c:	81 e9       	ldi	r24, 0x91	; 145
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
		LCD_moveCursor(1, 0);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		LCD_displayString("5 characters");
    122c:	82 ea       	ldi	r24, 0xA2	; 162
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	aa e7       	ldi	r26, 0x7A	; 122
    123a:	b4 e4       	ldi	r27, 0x44	; 68
    123c:	89 8f       	std	Y+25, r24	; 0x19
    123e:	9a 8f       	std	Y+26, r25	; 0x1a
    1240:	ab 8f       	std	Y+27, r26	; 0x1b
    1242:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1244:	69 8d       	ldd	r22, Y+25	; 0x19
    1246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a ef       	ldi	r20, 0xFA	; 250
    1252:	54 e4       	ldi	r21, 0x44	; 68
    1254:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8d 8b       	std	Y+21, r24	; 0x15
    125e:	9e 8b       	std	Y+22, r25	; 0x16
    1260:	af 8b       	std	Y+23, r26	; 0x17
    1262:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1264:	6d 89       	ldd	r22, Y+21	; 0x15
    1266:	7e 89       	ldd	r23, Y+22	; 0x16
    1268:	8f 89       	ldd	r24, Y+23	; 0x17
    126a:	98 8d       	ldd	r25, Y+24	; 0x18
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1278:	88 23       	and	r24, r24
    127a:	2c f4       	brge	.+10     	; 0x1286 <displayError+0xac>
		__ticks = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9c 8b       	std	Y+20, r25	; 0x14
    1282:	8b 8b       	std	Y+19, r24	; 0x13
    1284:	3f c0       	rjmp	.+126    	; 0x1304 <displayError+0x12a>
	else if (__tmp > 65535)
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	3f ef       	ldi	r19, 0xFF	; 255
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	57 e4       	ldi	r21, 0x47	; 71
    1296:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	4c f5       	brge	.+82     	; 0x12f0 <displayError+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129e:	69 8d       	ldd	r22, Y+25	; 0x19
    12a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	8b 8b       	std	Y+19, r24	; 0x13
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <displayError+0x10c>
    12c8:	88 ec       	ldi	r24, 0xC8	; 200
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9a 8b       	std	Y+18, r25	; 0x12
    12ce:	89 8b       	std	Y+17, r24	; 0x11
    12d0:	89 89       	ldd	r24, Y+17	; 0x11
    12d2:	9a 89       	ldd	r25, Y+18	; 0x12
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <displayError+0xfa>
    12d8:	9a 8b       	std	Y+18, r25	; 0x12
    12da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8b 89       	ldd	r24, Y+19	; 0x13
    12de:	9c 89       	ldd	r25, Y+20	; 0x14
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9c 8b       	std	Y+20, r25	; 0x14
    12e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8b 89       	ldd	r24, Y+19	; 0x13
    12e8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <displayError+0xee>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <displayError+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	6d 89       	ldd	r22, Y+21	; 0x15
    12f2:	7e 89       	ldd	r23, Y+22	; 0x16
    12f4:	8f 89       	ldd	r24, Y+23	; 0x17
    12f6:	98 8d       	ldd	r25, Y+24	; 0x18
    12f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	9c 89       	ldd	r25, Y+20	; 0x14
    1308:	98 8b       	std	Y+16, r25	; 0x10
    130a:	8f 87       	std	Y+15, r24	; 0x0f
    130c:	8f 85       	ldd	r24, Y+15	; 0x0f
    130e:	98 89       	ldd	r25, Y+16	; 0x10
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <displayError+0x136>
    1314:	98 8b       	std	Y+16, r25	; 0x10
    1316:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_clearScreen();
    1318:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_clearScreen>
    131c:	86 c0       	rjmp	.+268    	; 0x142a <displayError+0x250>
		break;
	case PASS_REENTERING_ERROR:
		LCD_clearScreen();
    131e:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_clearScreen>
		LCD_moveCursor(0, 6);
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	66 e0       	ldi	r22, 0x06	; 6
    1326:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		LCD_displayString("Error");
    132a:	8f ea       	ldi	r24, 0xAF	; 175
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
		LCD_moveCursor(1, 3);
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	63 e0       	ldi	r22, 0x03	; 3
    1336:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		LCD_displayString("Try Again");
    133a:	85 eb       	ldi	r24, 0xB5	; 181
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	aa e7       	ldi	r26, 0x7A	; 122
    1348:	b4 e4       	ldi	r27, 0x44	; 68
    134a:	8b 87       	std	Y+11, r24	; 0x0b
    134c:	9c 87       	std	Y+12, r25	; 0x0c
    134e:	ad 87       	std	Y+13, r26	; 0x0d
    1350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a ef       	ldi	r20, 0xFA	; 250
    1360:	54 e4       	ldi	r21, 0x44	; 68
    1362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	8f 83       	std	Y+7, r24	; 0x07
    136c:	98 87       	std	Y+8, r25	; 0x08
    136e:	a9 87       	std	Y+9, r26	; 0x09
    1370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <displayError+0x1ba>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9e 83       	std	Y+6, r25	; 0x06
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <displayError+0x238>
	else if (__tmp > 65535)
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <displayError+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <displayError+0x21a>
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <displayError+0x208>
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <displayError+0x1fc>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <displayError+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <displayError+0x244>
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    1426:	0e 94 0e 13 	call	0x261c	; 0x261c <LCD_clearScreen>
		break;
	}
}
    142a:	6f 96       	adiw	r28, 0x1f	; 31
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <GPIO_setupPinDirection>:
 * This function is used to setup pin direction
 * It requires the port number and pin number and the required direction for the pin.
 * If the port number or pin number are not correct, the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 a_portID, uint8 a_pinID, PinDirectionType a_direction)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <GPIO_setupPinDirection+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <GPIO_setupPinDirection+0x8>
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	6a 83       	std	Y+2, r22	; 0x02
    144e:	4b 83       	std	Y+3, r20	; 0x03
	/*If the port number or pin number are not correct, the function will not handle the request.*/
	if(a_portID >= NUMBER_OF_PORTS || a_pinID >= NUMBER_OF_PINS_PER_PORT)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	08 f0       	brcs	.+2      	; 0x1458 <GPIO_setupPinDirection+0x1c>
    1456:	d5 c0       	rjmp	.+426    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	87 30       	cpi	r24, 0x07	; 7
    145c:	08 f0       	brcs	.+2      	; 0x1460 <GPIO_setupPinDirection+0x24>
    145e:	d1 c0       	rjmp	.+418    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
		/*
		 * Select the correct register based on port
		 * If required direction is input, clear bit in the port DDR register
		 * If required direction is output, set bit in the port DDR register
		 */
		switch(a_portID)
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3d 83       	std	Y+5, r19	; 0x05
    1468:	2c 83       	std	Y+4, r18	; 0x04
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <GPIO_setupPinDirection+0x3a>
    1474:	43 c0       	rjmp	.+134    	; 0x14fc <GPIO_setupPinDirection+0xc0>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <GPIO_setupPinDirection+0x4e>
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	71 f0       	breq	.+28     	; 0x14a4 <GPIO_setupPinDirection+0x68>
    1488:	bc c0       	rjmp	.+376    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <GPIO_setupPinDirection+0x5a>
    1494:	5f c0       	rjmp	.+190    	; 0x1554 <GPIO_setupPinDirection+0x118>
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <GPIO_setupPinDirection+0x66>
    14a0:	85 c0       	rjmp	.+266    	; 0x15ac <GPIO_setupPinDirection+0x170>
    14a2:	af c0       	rjmp	.+350    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(a_direction == PIN_INPUT)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 23       	and	r24, r24
    14a8:	a9 f4       	brne	.+42     	; 0x14d4 <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA, a_pinID);
    14aa:	aa e3       	ldi	r26, 0x3A	; 58
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ea e3       	ldi	r30, 0x3A	; 58
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_setupPinDirection+0x8c>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_setupPinDirection+0x88>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	97 c0       	rjmp	.+302    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA, a_pinID);
    14d4:	aa e3       	ldi	r26, 0x3A	; 58
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ea e3       	ldi	r30, 0x3A	; 58
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_setupPinDirection+0xb6>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_setupPinDirection+0xb2>
    14f6:	84 2b       	or	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	83 c0       	rjmp	.+262    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(a_direction == PIN_INPUT)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	88 23       	and	r24, r24
    1500:	a9 f4       	brne	.+42     	; 0x152c <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB, a_pinID);
    1502:	a7 e3       	ldi	r26, 0x37	; 55
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e3       	ldi	r30, 0x37	; 55
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_setupPinDirection+0xe4>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_setupPinDirection+0xe0>
    1524:	80 95       	com	r24
    1526:	84 23       	and	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	6b c0       	rjmp	.+214    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB, a_pinID);
    152c:	a7 e3       	ldi	r26, 0x37	; 55
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e7 e3       	ldi	r30, 0x37	; 55
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_setupPinDirection+0x10e>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_setupPinDirection+0x10a>
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	57 c0       	rjmp	.+174    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(a_direction == PIN_INPUT)
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 23       	and	r24, r24
    1558:	a9 f4       	brne	.+42     	; 0x1584 <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC, a_pinID);
    155a:	a4 e3       	ldi	r26, 0x34	; 52
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e4 e3       	ldi	r30, 0x34	; 52
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_setupPinDirection+0x13c>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_setupPinDirection+0x138>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	3f c0       	rjmp	.+126    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC, a_pinID);
    1584:	a4 e3       	ldi	r26, 0x34	; 52
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e4 e3       	ldi	r30, 0x34	; 52
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <GPIO_setupPinDirection+0x166>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <GPIO_setupPinDirection+0x162>
    15a6:	84 2b       	or	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	2b c0       	rjmp	.+86     	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(a_direction == PIN_INPUT)
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	88 23       	and	r24, r24
    15b0:	a9 f4       	brne	.+42     	; 0x15dc <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD, a_pinID);
    15b2:	a1 e3       	ldi	r26, 0x31	; 49
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e1 e3       	ldi	r30, 0x31	; 49
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_setupPinDirection+0x194>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_setupPinDirection+0x190>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	13 c0       	rjmp	.+38     	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD, a_pinID);
    15dc:	a1 e3       	ldi	r26, 0x31	; 49
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e1 e3       	ldi	r30, 0x31	; 49
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_setupPinDirection+0x1be>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_setupPinDirection+0x1ba>
    15fe:	84 2b       	or	r24, r20
    1600:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <GPIO_writePin>:
 * This function is used to write LOGIC_HIGH or LOGIC_LOW on certain pin.
 * It requires port number and pin number and the required value to be written.
 * If the port number or pin number are not correct, the function will not handle the request.
 */
void GPIO_writePin(uint8 a_portID, uint8 a_pinID, boolean a_value)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <GPIO_writePin+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <GPIO_writePin+0x8>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	6a 83       	std	Y+2, r22	; 0x02
    1624:	4b 83       	std	Y+3, r20	; 0x03
	/*If the port number or pin number are not correct, the function will not handle the request.*/
	if(a_portID >= NUMBER_OF_PORTS || a_pinID >= NUMBER_OF_PINS_PER_PORT)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	08 f0       	brcs	.+2      	; 0x162e <GPIO_writePin+0x1c>
    162c:	d5 c0       	rjmp	.+426    	; 0x17d8 <GPIO_writePin+0x1c6>
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	87 30       	cpi	r24, 0x07	; 7
    1632:	08 f0       	brcs	.+2      	; 0x1636 <GPIO_writePin+0x24>
    1634:	d1 c0       	rjmp	.+418    	; 0x17d8 <GPIO_writePin+0x1c6>
		/*
		 * Select the correct register based on port
		 * If required value is FALSE, clear bit in the port PORT register
		 * If required value is TRUE, set bit in the port PORT register
		 */
		switch(a_portID)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3d 83       	std	Y+5, r19	; 0x05
    163e:	2c 83       	std	Y+4, r18	; 0x04
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <GPIO_writePin+0x3a>
    164a:	43 c0       	rjmp	.+134    	; 0x16d2 <GPIO_writePin+0xc0>
    164c:	2c 81       	ldd	r18, Y+4	; 0x04
    164e:	3d 81       	ldd	r19, Y+5	; 0x05
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	2c f4       	brge	.+10     	; 0x1660 <GPIO_writePin+0x4e>
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	71 f0       	breq	.+28     	; 0x167a <GPIO_writePin+0x68>
    165e:	bc c0       	rjmp	.+376    	; 0x17d8 <GPIO_writePin+0x1c6>
    1660:	2c 81       	ldd	r18, Y+4	; 0x04
    1662:	3d 81       	ldd	r19, Y+5	; 0x05
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <GPIO_writePin+0x5a>
    166a:	5f c0       	rjmp	.+190    	; 0x172a <GPIO_writePin+0x118>
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <GPIO_writePin+0x66>
    1676:	85 c0       	rjmp	.+266    	; 0x1782 <GPIO_writePin+0x170>
    1678:	af c0       	rjmp	.+350    	; 0x17d8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(a_value == LOGIC_HIGH)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA, a_pinID);
    1680:	ab e3       	ldi	r26, 0x3B	; 59
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_writePin+0x8c>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_writePin+0x88>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	98 c0       	rjmp	.+304    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, a_pinID);
    16a8:	ab e3       	ldi	r26, 0x3B	; 59
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e3       	ldi	r30, 0x3B	; 59
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_writePin+0xb4>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_writePin+0xb0>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	83 c0       	rjmp	.+262    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(a_value == LOGIC_HIGH)
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	a1 f4       	brne	.+40     	; 0x1700 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB, a_pinID);
    16d8:	a8 e3       	ldi	r26, 0x38	; 56
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e8 e3       	ldi	r30, 0x38	; 56
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <GPIO_writePin+0xe4>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <GPIO_writePin+0xe0>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	6c c0       	rjmp	.+216    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, a_pinID);
    1700:	a8 e3       	ldi	r26, 0x38	; 56
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_writePin+0x10c>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_writePin+0x108>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	57 c0       	rjmp	.+174    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(a_value == LOGIC_HIGH)
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	a1 f4       	brne	.+40     	; 0x1758 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC, a_pinID);
    1730:	a5 e3       	ldi	r26, 0x35	; 53
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e5 e3       	ldi	r30, 0x35	; 53
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <GPIO_writePin+0x13c>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <GPIO_writePin+0x138>
    1752:	84 2b       	or	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	40 c0       	rjmp	.+128    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, a_pinID);
    1758:	a5 e3       	ldi	r26, 0x35	; 53
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e3       	ldi	r30, 0x35	; 53
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <GPIO_writePin+0x164>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <GPIO_writePin+0x160>
    177a:	80 95       	com	r24
    177c:	84 23       	and	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	2b c0       	rjmp	.+86     	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(a_value == LOGIC_HIGH)
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	a1 f4       	brne	.+40     	; 0x17b0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD, a_pinID);
    1788:	a2 e3       	ldi	r26, 0x32	; 50
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <GPIO_writePin+0x194>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <GPIO_writePin+0x190>
    17aa:	84 2b       	or	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	14 c0       	rjmp	.+40     	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, a_pinID);
    17b0:	a2 e3       	ldi	r26, 0x32	; 50
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <GPIO_writePin+0x1bc>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <GPIO_writePin+0x1b8>
    17d2:	80 95       	com	r24
    17d4:	84 23       	and	r24, r20
    17d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <GPIO_readPin>:
 * Description:
 * Read the value of certain pin LOGIC_HIGH or LOGIC_LOW.
 * If the port number or pin number are not correct, the function will not handle the request.
 */
boolean GPIO_readPin(uint8 a_portID, uint8 a_pinID)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <GPIO_readPin+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <GPIO_readPin+0x8>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <GPIO_readPin+0xa>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	8a 83       	std	Y+2, r24	; 0x02
    17f8:	6b 83       	std	Y+3, r22	; 0x03
	/*If the port number or pin number are not correct, the function will not handle the request.*/
	if(a_portID >= NUMBER_OF_PORTS || a_pinID >= NUMBER_OF_PINS_PER_PORT)
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	18 f4       	brcc	.+6      	; 0x1806 <GPIO_readPin+0x1e>
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	87 30       	cpi	r24, 0x07	; 7
    1804:	10 f0       	brcs	.+4      	; 0x180a <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1806:	1e 82       	std	Y+6, r1	; 0x06
    1808:	83 c0       	rjmp	.+262    	; 0x1910 <GPIO_readPin+0x128>
	}
	else
	{
		/* Select the correct PIN register according to the port id. */
		boolean result = LOGIC_LOW;
    180a:	19 82       	std	Y+1, r1	; 0x01
		switch(a_portID)
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3d 83       	std	Y+5, r19	; 0x05
    1814:	2c 83       	std	Y+4, r18	; 0x04
    1816:	4c 81       	ldd	r20, Y+4	; 0x04
    1818:	5d 81       	ldd	r21, Y+5	; 0x05
    181a:	41 30       	cpi	r20, 0x01	; 1
    181c:	51 05       	cpc	r21, r1
    181e:	79 f1       	breq	.+94     	; 0x187e <GPIO_readPin+0x96>
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	91 05       	cpc	r25, r1
    1828:	34 f4       	brge	.+12     	; 0x1836 <GPIO_readPin+0x4e>
    182a:	2c 81       	ldd	r18, Y+4	; 0x04
    182c:	3d 81       	ldd	r19, Y+5	; 0x05
    182e:	21 15       	cp	r18, r1
    1830:	31 05       	cpc	r19, r1
    1832:	69 f0       	breq	.+26     	; 0x184e <GPIO_readPin+0x66>
    1834:	6b c0       	rjmp	.+214    	; 0x190c <GPIO_readPin+0x124>
    1836:	4c 81       	ldd	r20, Y+4	; 0x04
    1838:	5d 81       	ldd	r21, Y+5	; 0x05
    183a:	42 30       	cpi	r20, 0x02	; 2
    183c:	51 05       	cpc	r21, r1
    183e:	b9 f1       	breq	.+110    	; 0x18ae <GPIO_readPin+0xc6>
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <GPIO_readPin+0x64>
    184a:	49 c0       	rjmp	.+146    	; 0x18de <GPIO_readPin+0xf6>
    184c:	5f c0       	rjmp	.+190    	; 0x190c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			(BIT_IS_SET(PINA, a_pinID))? (result = LOGIC_HIGH): (result = LOGIC_LOW);
    184e:	e9 e3       	ldi	r30, 0x39	; 57
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a9 01       	movw	r20, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <GPIO_readPin+0x7e>
    1862:	55 95       	asr	r21
    1864:	47 95       	ror	r20
    1866:	8a 95       	dec	r24
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <GPIO_readPin+0x7a>
    186a:	ca 01       	movw	r24, r20
    186c:	81 70       	andi	r24, 0x01	; 1
    186e:	90 70       	andi	r25, 0x00	; 0
    1870:	88 23       	and	r24, r24
    1872:	19 f0       	breq	.+6      	; 0x187a <GPIO_readPin+0x92>
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	49 c0       	rjmp	.+146    	; 0x190c <GPIO_readPin+0x124>
    187a:	19 82       	std	Y+1, r1	; 0x01
    187c:	47 c0       	rjmp	.+142    	; 0x190c <GPIO_readPin+0x124>
			break;
		case PORTB_ID:
			(BIT_IS_SET(PINB, a_pinID))? (result = LOGIC_HIGH): (result = LOGIC_LOW);
    187e:	e6 e3       	ldi	r30, 0x36	; 54
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a9 01       	movw	r20, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <GPIO_readPin+0xae>
    1892:	55 95       	asr	r21
    1894:	47 95       	ror	r20
    1896:	8a 95       	dec	r24
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <GPIO_readPin+0xaa>
    189a:	ca 01       	movw	r24, r20
    189c:	81 70       	andi	r24, 0x01	; 1
    189e:	90 70       	andi	r25, 0x00	; 0
    18a0:	88 23       	and	r24, r24
    18a2:	19 f0       	breq	.+6      	; 0x18aa <GPIO_readPin+0xc2>
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	31 c0       	rjmp	.+98     	; 0x190c <GPIO_readPin+0x124>
    18aa:	19 82       	std	Y+1, r1	; 0x01
    18ac:	2f c0       	rjmp	.+94     	; 0x190c <GPIO_readPin+0x124>
			break;
		case PORTC_ID:
			(BIT_IS_SET(PINC, a_pinID))? (result = LOGIC_HIGH): (result = LOGIC_LOW);
    18ae:	e3 e3       	ldi	r30, 0x33	; 51
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a9 01       	movw	r20, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_readPin+0xde>
    18c2:	55 95       	asr	r21
    18c4:	47 95       	ror	r20
    18c6:	8a 95       	dec	r24
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_readPin+0xda>
    18ca:	ca 01       	movw	r24, r20
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	90 70       	andi	r25, 0x00	; 0
    18d0:	88 23       	and	r24, r24
    18d2:	19 f0       	breq	.+6      	; 0x18da <GPIO_readPin+0xf2>
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	19 c0       	rjmp	.+50     	; 0x190c <GPIO_readPin+0x124>
    18da:	19 82       	std	Y+1, r1	; 0x01
    18dc:	17 c0       	rjmp	.+46     	; 0x190c <GPIO_readPin+0x124>
			break;
		case PORTD_ID:
			(BIT_IS_SET(PIND, a_pinID))? (result = LOGIC_HIGH): (result = LOGIC_LOW);
    18de:	e0 e3       	ldi	r30, 0x30	; 48
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_readPin+0x10e>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_readPin+0x10a>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	88 23       	and	r24, r24
    1902:	19 f0       	breq	.+6      	; 0x190a <GPIO_readPin+0x122>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	01 c0       	rjmp	.+2      	; 0x190c <GPIO_readPin+0x124>
    190a:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return result;
    190c:	59 81       	ldd	r21, Y+1	; 0x01
    190e:	5e 83       	std	Y+6, r21	; 0x06
    1910:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    1912:	26 96       	adiw	r28, 0x06	; 6
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <GPIO_setupPortDirection>:
 * This function is used to setup port direction
 * It requires the port number and the required direction for the port.
 * If the port number are not correct, the function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 a_portID, PortDirectionType a_direction)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <GPIO_setupPortDirection+0x6>
    192a:	00 d0       	rcall	.+0      	; 0x192c <GPIO_setupPortDirection+0x8>
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	6a 83       	std	Y+2, r22	; 0x02
	/* Check that port id is valid */
	if(a_portID >= NUMBER_OF_PORTS)
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	84 30       	cpi	r24, 0x04	; 4
    1938:	90 f5       	brcc	.+100    	; 0x199e <GPIO_setupPortDirection+0x7a>
		return;
	}
	else
	{
		/* Select the correct PORT register according to sent port id */
		switch(a_portID)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3c 83       	std	Y+4, r19	; 0x04
    1942:	2b 83       	std	Y+3, r18	; 0x03
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	d1 f0       	breq	.+52     	; 0x1982 <GPIO_setupPortDirection+0x5e>
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	3c 81       	ldd	r19, Y+4	; 0x04
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	2c f4       	brge	.+10     	; 0x1962 <GPIO_setupPortDirection+0x3e>
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	61 f0       	breq	.+24     	; 0x1978 <GPIO_setupPortDirection+0x54>
    1960:	1e c0       	rjmp	.+60     	; 0x199e <GPIO_setupPortDirection+0x7a>
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	81 f0       	breq	.+32     	; 0x198c <GPIO_setupPortDirection+0x68>
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	81 f0       	breq	.+32     	; 0x1996 <GPIO_setupPortDirection+0x72>
    1976:	13 c0       	rjmp	.+38     	; 0x199e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = a_direction;
    1978:	ea e3       	ldi	r30, 0x3A	; 58
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	80 83       	st	Z, r24
    1980:	0e c0       	rjmp	.+28     	; 0x199e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = a_direction;
    1982:	e7 e3       	ldi	r30, 0x37	; 55
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
    198a:	09 c0       	rjmp	.+18     	; 0x199e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = a_direction;
    198c:	e4 e3       	ldi	r30, 0x34	; 52
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	80 83       	st	Z, r24
    1994:	04 c0       	rjmp	.+8      	; 0x199e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = a_direction;
    1996:	e1 e3       	ldi	r30, 0x31	; 49
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	80 83       	st	Z, r24
			break;
		}
	}
}
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <GPIO_writePort>:
 * This function is used to write 8bits value on certain port.
 * It requires port number and the required value to be written.
 * If the port number is not correct, the function will not handle the request.
 */
void GPIO_writePort(uint8 a_portID, uint8 a_value)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <GPIO_writePort+0x6>
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <GPIO_writePort+0x8>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	6a 83       	std	Y+2, r22	; 0x02
	/* Check that port id is valid */
	if(a_portID >= NUMBER_OF_PORTS)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	84 30       	cpi	r24, 0x04	; 4
    19c0:	90 f5       	brcc	.+100    	; 0x1a26 <GPIO_writePort+0x7a>
		return;
	}
	else
	{
		/* Select the correct PORT register according to sent port id */
		switch(a_portID)
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3c 83       	std	Y+4, r19	; 0x04
    19ca:	2b 83       	std	Y+3, r18	; 0x03
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	d1 f0       	breq	.+52     	; 0x1a0a <GPIO_writePort+0x5e>
    19d6:	2b 81       	ldd	r18, Y+3	; 0x03
    19d8:	3c 81       	ldd	r19, Y+4	; 0x04
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	2c f4       	brge	.+10     	; 0x19ea <GPIO_writePort+0x3e>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <GPIO_writePort+0x54>
    19e8:	1e c0       	rjmp	.+60     	; 0x1a26 <GPIO_writePort+0x7a>
    19ea:	2b 81       	ldd	r18, Y+3	; 0x03
    19ec:	3c 81       	ldd	r19, Y+4	; 0x04
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	81 f0       	breq	.+32     	; 0x1a14 <GPIO_writePort+0x68>
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	91 05       	cpc	r25, r1
    19fc:	81 f0       	breq	.+32     	; 0x1a1e <GPIO_writePort+0x72>
    19fe:	13 c0       	rjmp	.+38     	; 0x1a26 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = a_value;
    1a00:	eb e3       	ldi	r30, 0x3B	; 59
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	80 83       	st	Z, r24
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = a_value;
    1a0a:	e8 e3       	ldi	r30, 0x38	; 56
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	80 83       	st	Z, r24
    1a12:	09 c0       	rjmp	.+18     	; 0x1a26 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = a_value;
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	80 83       	st	Z, r24
    1a1c:	04 c0       	rjmp	.+8      	; 0x1a26 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = a_value;
    1a1e:	e2 e3       	ldi	r30, 0x32	; 50
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <GPIO_readPort>:
 * Description:
 * Read the 8bits value of certain port.
 * If the port number is not correct, the function will not handle the request.
 */
uint8 GPIO_readPort(uint8 a_portID)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <GPIO_readPort+0x6>
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <GPIO_readPort+0x8>
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	89 83       	std	Y+1, r24	; 0x01
	/* Check that port id is valid */
	if(a_portID >= NUMBER_OF_PORTS)
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	10 f0       	brcs	.+4      	; 0x1a4c <GPIO_readPort+0x18>
	{
		return 0;
    1a48:	1c 82       	std	Y+4, r1	; 0x04
    1a4a:	34 c0       	rjmp	.+104    	; 0x1ab4 <GPIO_readPort+0x80>
	}
	else
	{
		/* Select the correct PIN register according to sent port id */
		switch(a_portID)
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	3b 83       	std	Y+3, r19	; 0x03
    1a54:	2a 83       	std	Y+2, r18	; 0x02
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	d1 f0       	breq	.+52     	; 0x1a94 <GPIO_readPort+0x60>
    1a60:	2a 81       	ldd	r18, Y+2	; 0x02
    1a62:	3b 81       	ldd	r19, Y+3	; 0x03
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <GPIO_readPort+0x40>
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	61 f0       	breq	.+24     	; 0x1a8a <GPIO_readPort+0x56>
    1a72:	1f c0       	rjmp	.+62     	; 0x1ab2 <GPIO_readPort+0x7e>
    1a74:	2a 81       	ldd	r18, Y+2	; 0x02
    1a76:	3b 81       	ldd	r19, Y+3	; 0x03
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	81 f0       	breq	.+32     	; 0x1a9e <GPIO_readPort+0x6a>
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	83 30       	cpi	r24, 0x03	; 3
    1a84:	91 05       	cpc	r25, r1
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <GPIO_readPort+0x74>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PINA;
    1a8a:	e9 e3       	ldi	r30, 0x39	; 57
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	90 81       	ld	r25, Z
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	10 c0       	rjmp	.+32     	; 0x1ab4 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			return PINB;
    1a94:	e6 e3       	ldi	r30, 0x36	; 54
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	20 81       	ld	r18, Z
    1a9a:	2c 83       	std	Y+4, r18	; 0x04
    1a9c:	0b c0       	rjmp	.+22     	; 0x1ab4 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			return PINC;
    1a9e:	e3 e3       	ldi	r30, 0x33	; 51
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	30 81       	ld	r19, Z
    1aa4:	3c 83       	std	Y+4, r19	; 0x04
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			return PIND;
    1aa8:	e0 e3       	ldi	r30, 0x30	; 48
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8c 83       	std	Y+4, r24	; 0x04
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <GPIO_readPort+0x80>
			break;
		default:
			return 0;
    1ab2:	1c 82       	std	Y+4, r1	; 0x04
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <KEYPAD_getPressedKey+0x6>
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1ad0:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1ad2:	1b 82       	std	Y+3, r1	; 0x03
    1ad4:	43 c0       	rjmp	.+134    	; 0x1b5c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	0e 94 92 0c 	call	0x1924	; 0x1924 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	98 2f       	mov	r25, r24
    1ae2:	9c 5f       	subi	r25, 0xFC	; 252
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	69 2f       	mov	r22, r25
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 01       	movw	r18, r24
    1af6:	2c 5f       	subi	r18, 0xFC	; 252
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <KEYPAD_getPressedKey+0x40>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	2a 95       	dec	r18
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <KEYPAD_getPressedKey+0x3c>
    1b08:	80 95       	com	r24
    1b0a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	69 81       	ldd	r22, Y+1	; 0x01
    1b10:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b14:	1a 82       	std	Y+2, r1	; 0x02
    1b16:	1c c0       	rjmp	.+56     	; 0x1b50 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1b1c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <GPIO_readPin>
    1b20:	88 23       	and	r24, r24
    1b22:	99 f4       	brne	.+38     	; 0x1b4a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	98 2f       	mov	r25, r24
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	89 0f       	add	r24, r25
    1b38:	8f 5f       	subi	r24, 0xFF	; 255
    1b3a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	8f 5f       	subi	r24, 0xFF	; 255
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	08 f3       	brcs	.-62     	; 0x1b18 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <KEYPAD_getPressedKey+0xa0>
    1b62:	b9 cf       	rjmp	.-142    	; 0x1ad6 <KEYPAD_getPressedKey+0x12>
    1b64:	b6 cf       	rjmp	.-148    	; 0x1ad2 <KEYPAD_getPressedKey+0xe>

00001b66 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b74:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3c 83       	std	Y+4, r19	; 0x04
    1b7e:	2b 83       	std	Y+3, r18	; 0x03
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	88 30       	cpi	r24, 0x08	; 8
    1b86:	91 05       	cpc	r25, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b8a:	70 c0       	rjmp	.+224    	; 0x1c6c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	29 30       	cpi	r18, 0x09	; 9
    1b92:	31 05       	cpc	r19, r1
    1b94:	5c f5       	brge	.+86     	; 0x1bec <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ba0:	59 c0       	rjmp	.+178    	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	25 30       	cpi	r18, 0x05	; 5
    1ba8:	31 05       	cpc	r19, r1
    1baa:	9c f4       	brge	.+38     	; 0x1bd2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1bb6:	48 c0       	rjmp	.+144    	; 0x1c48 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	23 30       	cpi	r18, 0x03	; 3
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	0c f0       	brlt	.+2      	; 0x1bc4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1bc2:	45 c0       	rjmp	.+138    	; 0x1c4e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1bce:	39 c0       	rjmp	.+114    	; 0x1c42 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1bd0:	67 c0       	rjmp	.+206    	; 0x1ca0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	26 30       	cpi	r18, 0x06	; 6
    1bd8:	31 05       	cpc	r19, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <KEYPAD_4x4_adjustKeyNumber+0x78>
    1bdc:	41 c0       	rjmp	.+130    	; 0x1c60 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	87 30       	cpi	r24, 0x07	; 7
    1be4:	91 05       	cpc	r25, r1
    1be6:	0c f0       	brlt	.+2      	; 0x1bea <KEYPAD_4x4_adjustKeyNumber+0x84>
    1be8:	3e c0       	rjmp	.+124    	; 0x1c66 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1bea:	37 c0       	rjmp	.+110    	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	2c 30       	cpi	r18, 0x0C	; 12
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1bf6:	46 c0       	rjmp	.+140    	; 0x1c84 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	8d 30       	cpi	r24, 0x0D	; 13
    1bfe:	91 05       	cpc	r25, r1
    1c00:	5c f4       	brge	.+22     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	2a 30       	cpi	r18, 0x0A	; 10
    1c08:	31 05       	cpc	r19, r1
    1c0a:	b1 f1       	breq	.+108    	; 0x1c78 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	8b 30       	cpi	r24, 0x0B	; 11
    1c12:	91 05       	cpc	r25, r1
    1c14:	a4 f5       	brge	.+104    	; 0x1c7e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c16:	2d c0       	rjmp	.+90     	; 0x1c72 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	2e 30       	cpi	r18, 0x0E	; 14
    1c1e:	31 05       	cpc	r19, r1
    1c20:	b9 f1       	breq	.+110    	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	8e 30       	cpi	r24, 0x0E	; 14
    1c28:	91 05       	cpc	r25, r1
    1c2a:	7c f1       	brlt	.+94     	; 0x1c8a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	2f 30       	cpi	r18, 0x0F	; 15
    1c32:	31 05       	cpc	r19, r1
    1c34:	79 f1       	breq	.+94     	; 0x1c94 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	80 31       	cpi	r24, 0x10	; 16
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	69 f1       	breq	.+90     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c40:	2f c0       	rjmp	.+94     	; 0x1ca0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c42:	87 e0       	ldi	r24, 0x07	; 7
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	2e c0       	rjmp	.+92     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1c48:	88 e0       	ldi	r24, 0x08	; 8
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	2b c0       	rjmp	.+86     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1c4e:	89 e0       	ldi	r24, 0x09	; 9
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	28 c0       	rjmp	.+80     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c54:	85 e2       	ldi	r24, 0x25	; 37
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	25 c0       	rjmp	.+74     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c5a:	84 e0       	ldi	r24, 0x04	; 4
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	22 c0       	rjmp	.+68     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c60:	85 e0       	ldi	r24, 0x05	; 5
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	1f c0       	rjmp	.+62     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c66:	86 e0       	ldi	r24, 0x06	; 6
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	1c c0       	rjmp	.+56     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c6c:	8a e2       	ldi	r24, 0x2A	; 42
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	19 c0       	rjmp	.+50     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	16 c0       	rjmp	.+44     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	13 c0       	rjmp	.+38     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	10 c0       	rjmp	.+32     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c84:	8d e2       	ldi	r24, 0x2D	; 45
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	0d c0       	rjmp	.+26     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c8a:	8d e0       	ldi	r24, 0x0D	; 13
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	0a c0       	rjmp	.+20     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c90:	19 82       	std	Y+1, r1	; 0x01
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c94:	8d e3       	ldi	r24, 0x3D	; 61
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c9a:	8b e2       	ldi	r24, 0x2B	; 43
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	62 e0       	ldi	r22, 0x02	; 2
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	6f ef       	ldi	r22, 0xFF	; 255
    1cde:	0e 94 92 0c 	call	0x1924	; 0x1924 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ce2:	88 e3       	ldi	r24, 0x38	; 56
    1ce4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ce8:	8c e0       	ldi	r24, 0x0C	; 12
    1cea:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_sendCommand>
}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	ea 97       	sbiw	r28, 0x3a	; 58
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1d10:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e8       	ldi	r26, 0x80	; 128
    1d2c:	bf e3       	ldi	r27, 0x3F	; 63
    1d2e:	8d ab       	std	Y+53, r24	; 0x35
    1d30:	9e ab       	std	Y+54, r25	; 0x36
    1d32:	af ab       	std	Y+55, r26	; 0x37
    1d34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	6d a9       	ldd	r22, Y+53	; 0x35
    1d38:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a e7       	ldi	r20, 0x7A	; 122
    1d44:	53 e4       	ldi	r21, 0x43	; 67
    1d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	89 ab       	std	Y+49, r24	; 0x31
    1d50:	9a ab       	std	Y+50, r25	; 0x32
    1d52:	ab ab       	std	Y+51, r26	; 0x33
    1d54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d56:	69 a9       	ldd	r22, Y+49	; 0x31
    1d58:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	98 ab       	std	Y+48, r25	; 0x30
    1d74:	8f a7       	std	Y+47, r24	; 0x2f
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1d78:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	6d a9       	ldd	r22, Y+53	; 0x35
    1d92:	7e a9       	ldd	r23, Y+54	; 0x36
    1d94:	8f a9       	ldd	r24, Y+55	; 0x37
    1d96:	98 ad       	ldd	r25, Y+56	; 0x38
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	98 ab       	std	Y+48, r25	; 0x30
    1db6:	8f a7       	std	Y+47, r24	; 0x2f
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <LCD_sendCommand+0xde>
    1dba:	89 e1       	ldi	r24, 0x19	; 25
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9e a7       	std	Y+46, r25	; 0x2e
    1dc0:	8d a7       	std	Y+45, r24	; 0x2d
    1dc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_sendCommand+0xcc>
    1dca:	9e a7       	std	Y+46, r25	; 0x2e
    1dcc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	98 ab       	std	Y+48, r25	; 0x30
    1dd6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dda:	98 a9       	ldd	r25, Y+48	; 0x30
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <LCD_sendCommand+0xc0>
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	69 a9       	ldd	r22, Y+49	; 0x31
    1de4:	7a a9       	ldd	r23, Y+50	; 0x32
    1de6:	8b a9       	ldd	r24, Y+51	; 0x33
    1de8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	98 ab       	std	Y+48, r25	; 0x30
    1df4:	8f a7       	std	Y+47, r24	; 0x2f
    1df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfa:	9c a7       	std	Y+44, r25	; 0x2c
    1dfc:	8b a7       	std	Y+43, r24	; 0x2b
    1dfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0x108>
    1e06:	9c a7       	std	Y+44, r25	; 0x2c
    1e08:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e8       	ldi	r26, 0x80	; 128
    1e1a:	bf e3       	ldi	r27, 0x3F	; 63
    1e1c:	8f a3       	std	Y+39, r24	; 0x27
    1e1e:	98 a7       	std	Y+40, r25	; 0x28
    1e20:	a9 a7       	std	Y+41, r26	; 0x29
    1e22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6f a1       	ldd	r22, Y+39	; 0x27
    1e26:	78 a5       	ldd	r23, Y+40	; 0x28
    1e28:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	53 e4       	ldi	r21, 0x43	; 67
    1e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8b a3       	std	Y+35, r24	; 0x23
    1e3e:	9c a3       	std	Y+36, r25	; 0x24
    1e40:	ad a3       	std	Y+37, r26	; 0x25
    1e42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e44:	6b a1       	ldd	r22, Y+35	; 0x23
    1e46:	7c a1       	ldd	r23, Y+36	; 0x24
    1e48:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1e66:	6b a1       	ldd	r22, Y+35	; 0x23
    1e68:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e80:	78 a5       	ldd	r23, Y+40	; 0x28
    1e82:	89 a5       	ldd	r24, Y+41	; 0x29
    1e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9a a3       	std	Y+34, r25	; 0x22
    1ea4:	89 a3       	std	Y+33, r24	; 0x21
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <LCD_sendCommand+0x1cc>
    1ea8:	89 e1       	ldi	r24, 0x19	; 25
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	98 a3       	std	Y+32, r25	; 0x20
    1eae:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb2:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_sendCommand+0x1ba>
    1eb8:	98 a3       	std	Y+32, r25	; 0x20
    1eba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
    1ec4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <LCD_sendCommand+0x1ae>
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9a a3       	std	Y+34, r25	; 0x22
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eea:	8d 8f       	std	Y+29, r24	; 0x1d
    1eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_sendCommand+0x1f6>
    1ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	6a ad       	ldd	r22, Y+58	; 0x3a
    1efc:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <GPIO_writePort>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e8       	ldi	r26, 0x80	; 128
    1f06:	bf e3       	ldi	r27, 0x3F	; 63
    1f08:	89 8f       	std	Y+25, r24	; 0x19
    1f0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	69 8d       	ldd	r22, Y+25	; 0x19
    1f12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8d 8b       	std	Y+21, r24	; 0x15
    1f2a:	9e 8b       	std	Y+22, r25	; 0x16
    1f2c:	af 8b       	std	Y+23, r26	; 0x17
    1f2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <LCD_sendCommand+0x258>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1f52:	6d 89       	ldd	r22, Y+21	; 0x15
    1f54:	7e 89       	ldd	r23, Y+22	; 0x16
    1f56:	8f 89       	ldd	r24, Y+23	; 0x17
    1f58:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_sendCommand+0x2b8>
    1f94:	89 e1       	ldi	r24, 0x19	; 25
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9a 8b       	std	Y+18, r25	; 0x12
    1f9a:	89 8b       	std	Y+17, r24	; 0x11
    1f9c:	89 89       	ldd	r24, Y+17	; 0x11
    1f9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_sendCommand+0x2a6>
    1fa4:	9a 8b       	std	Y+18, r25	; 0x12
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9c 8b       	std	Y+20, r25	; 0x14
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <LCD_sendCommand+0x29a>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9c 8b       	std	Y+20, r25	; 0x14
    1fce:	8b 8b       	std	Y+19, r24	; 0x13
    1fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd4:	98 8b       	std	Y+16, r25	; 0x10
    1fd6:	8f 87       	std	Y+15, r24	; 0x0f
    1fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fda:	98 89       	ldd	r25, Y+16	; 0x10
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_sendCommand+0x2e2>
    1fe0:	98 8b       	std	Y+16, r25	; 0x10
    1fe2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	62 e0       	ldi	r22, 0x02	; 2
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e8       	ldi	r26, 0x80	; 128
    1ff4:	bf e3       	ldi	r27, 0x3F	; 63
    1ff6:	8b 87       	std	Y+11, r24	; 0x0b
    1ff8:	9c 87       	std	Y+12, r25	; 0x0c
    1ffa:	ad 87       	std	Y+13, r26	; 0x0d
    1ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2000:	7c 85       	ldd	r23, Y+12	; 0x0c
    2002:	8d 85       	ldd	r24, Y+13	; 0x0d
    2004:	9e 85       	ldd	r25, Y+14	; 0x0e
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8f 83       	std	Y+7, r24	; 0x07
    2018:	98 87       	std	Y+8, r25	; 0x08
    201a:	a9 87       	std	Y+9, r26	; 0x09
    201c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <LCD_sendCommand+0x346>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	3f c0       	rjmp	.+126    	; 0x20be <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6b 85       	ldd	r22, Y+11	; 0x0b
    205a:	7c 85       	ldd	r23, Y+12	; 0x0c
    205c:	8d 85       	ldd	r24, Y+13	; 0x0d
    205e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_sendCommand+0x3a6>
    2082:	89 e1       	ldi	r24, 0x19	; 25
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_sendCommand+0x394>
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_sendCommand+0x388>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_sendCommand+0x3d0>
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20d2:	ea 96       	adiw	r28, 0x3a	; 58
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	ea 97       	sbiw	r28, 0x3a	; 58
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    20fa:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	61 e0       	ldi	r22, 0x01	; 1
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e8       	ldi	r26, 0x80	; 128
    2116:	bf e3       	ldi	r27, 0x3F	; 63
    2118:	8d ab       	std	Y+53, r24	; 0x35
    211a:	9e ab       	std	Y+54, r25	; 0x36
    211c:	af ab       	std	Y+55, r26	; 0x37
    211e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	6d a9       	ldd	r22, Y+53	; 0x35
    2122:	7e a9       	ldd	r23, Y+54	; 0x36
    2124:	8f a9       	ldd	r24, Y+55	; 0x37
    2126:	98 ad       	ldd	r25, Y+56	; 0x38
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a e7       	ldi	r20, 0x7A	; 122
    212e:	53 e4       	ldi	r21, 0x43	; 67
    2130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	89 ab       	std	Y+49, r24	; 0x31
    213a:	9a ab       	std	Y+50, r25	; 0x32
    213c:	ab ab       	std	Y+51, r26	; 0x33
    213e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2140:	69 a9       	ldd	r22, Y+49	; 0x31
    2142:	7a a9       	ldd	r23, Y+50	; 0x32
    2144:	8b a9       	ldd	r24, Y+51	; 0x33
    2146:	9c a9       	ldd	r25, Y+52	; 0x34
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	98 ab       	std	Y+48, r25	; 0x30
    215e:	8f a7       	std	Y+47, r24	; 0x2f
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2162:	69 a9       	ldd	r22, Y+49	; 0x31
    2164:	7a a9       	ldd	r23, Y+50	; 0x32
    2166:	8b a9       	ldd	r24, Y+51	; 0x33
    2168:	9c a9       	ldd	r25, Y+52	; 0x34
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	6d a9       	ldd	r22, Y+53	; 0x35
    217c:	7e a9       	ldd	r23, Y+54	; 0x36
    217e:	8f a9       	ldd	r24, Y+55	; 0x37
    2180:	98 ad       	ldd	r25, Y+56	; 0x38
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	98 ab       	std	Y+48, r25	; 0x30
    21a0:	8f a7       	std	Y+47, r24	; 0x2f
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <LCD_displayCharacter+0xde>
    21a4:	89 e1       	ldi	r24, 0x19	; 25
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9e a7       	std	Y+46, r25	; 0x2e
    21aa:	8d a7       	std	Y+45, r24	; 0x2d
    21ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_displayCharacter+0xcc>
    21b4:	9e a7       	std	Y+46, r25	; 0x2e
    21b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ba:	98 a9       	ldd	r25, Y+48	; 0x30
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	98 ab       	std	Y+48, r25	; 0x30
    21c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c4:	98 a9       	ldd	r25, Y+48	; 0x30
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <LCD_displayCharacter+0xc0>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	69 a9       	ldd	r22, Y+49	; 0x31
    21ce:	7a a9       	ldd	r23, Y+50	; 0x32
    21d0:	8b a9       	ldd	r24, Y+51	; 0x33
    21d2:	9c a9       	ldd	r25, Y+52	; 0x34
    21d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	98 ab       	std	Y+48, r25	; 0x30
    21de:	8f a7       	std	Y+47, r24	; 0x2f
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	9c a7       	std	Y+44, r25	; 0x2c
    21e6:	8b a7       	std	Y+43, r24	; 0x2b
    21e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_displayCharacter+0x108>
    21f0:	9c a7       	std	Y+44, r25	; 0x2c
    21f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	62 e0       	ldi	r22, 0x02	; 2
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	bf e3       	ldi	r27, 0x3F	; 63
    2206:	8f a3       	std	Y+39, r24	; 0x27
    2208:	98 a7       	std	Y+40, r25	; 0x28
    220a:	a9 a7       	std	Y+41, r26	; 0x29
    220c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	6f a1       	ldd	r22, Y+39	; 0x27
    2210:	78 a5       	ldd	r23, Y+40	; 0x28
    2212:	89 a5       	ldd	r24, Y+41	; 0x29
    2214:	9a a5       	ldd	r25, Y+42	; 0x2a
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8b a3       	std	Y+35, r24	; 0x23
    2228:	9c a3       	std	Y+36, r25	; 0x24
    222a:	ad a3       	std	Y+37, r26	; 0x25
    222c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    222e:	6b a1       	ldd	r22, Y+35	; 0x23
    2230:	7c a1       	ldd	r23, Y+36	; 0x24
    2232:	8d a1       	ldd	r24, Y+37	; 0x25
    2234:	9e a1       	ldd	r25, Y+38	; 0x26
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9a a3       	std	Y+34, r25	; 0x22
    224c:	89 a3       	std	Y+33, r24	; 0x21
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2250:	6b a1       	ldd	r22, Y+35	; 0x23
    2252:	7c a1       	ldd	r23, Y+36	; 0x24
    2254:	8d a1       	ldd	r24, Y+37	; 0x25
    2256:	9e a1       	ldd	r25, Y+38	; 0x26
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	6f a1       	ldd	r22, Y+39	; 0x27
    226a:	78 a5       	ldd	r23, Y+40	; 0x28
    226c:	89 a5       	ldd	r24, Y+41	; 0x29
    226e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9a a3       	std	Y+34, r25	; 0x22
    228e:	89 a3       	std	Y+33, r24	; 0x21
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_displayCharacter+0x1cc>
    2292:	89 e1       	ldi	r24, 0x19	; 25
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	98 a3       	std	Y+32, r25	; 0x20
    2298:	8f 8f       	std	Y+31, r24	; 0x1f
    229a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    229c:	98 a1       	ldd	r25, Y+32	; 0x20
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_displayCharacter+0x1ba>
    22a2:	98 a3       	std	Y+32, r25	; 0x20
    22a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9a a3       	std	Y+34, r25	; 0x22
    22ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	89 a1       	ldd	r24, Y+33	; 0x21
    22b2:	9a a1       	ldd	r25, Y+34	; 0x22
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_displayCharacter+0x1ae>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6b a1       	ldd	r22, Y+35	; 0x23
    22bc:	7c a1       	ldd	r23, Y+36	; 0x24
    22be:	8d a1       	ldd	r24, Y+37	; 0x25
    22c0:	9e a1       	ldd	r25, Y+38	; 0x26
    22c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9a a3       	std	Y+34, r25	; 0x22
    22cc:	89 a3       	std	Y+33, r24	; 0x21
    22ce:	89 a1       	ldd	r24, Y+33	; 0x21
    22d0:	9a a1       	ldd	r25, Y+34	; 0x22
    22d2:	9e 8f       	std	Y+30, r25	; 0x1e
    22d4:	8d 8f       	std	Y+29, r24	; 0x1d
    22d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_displayCharacter+0x1f6>
    22de:	9e 8f       	std	Y+30, r25	; 0x1e
    22e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	6a ad       	ldd	r22, Y+58	; 0x3a
    22e6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <GPIO_writePort>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	a0 e8       	ldi	r26, 0x80	; 128
    22f0:	bf e3       	ldi	r27, 0x3F	; 63
    22f2:	89 8f       	std	Y+25, r24	; 0x19
    22f4:	9a 8f       	std	Y+26, r25	; 0x1a
    22f6:	ab 8f       	std	Y+27, r26	; 0x1b
    22f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fa:	69 8d       	ldd	r22, Y+25	; 0x19
    22fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	4a e7       	ldi	r20, 0x7A	; 122
    2308:	53 e4       	ldi	r21, 0x43	; 67
    230a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8d 8b       	std	Y+21, r24	; 0x15
    2314:	9e 8b       	std	Y+22, r25	; 0x16
    2316:	af 8b       	std	Y+23, r26	; 0x17
    2318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    231a:	6d 89       	ldd	r22, Y+21	; 0x15
    231c:	7e 89       	ldd	r23, Y+22	; 0x16
    231e:	8f 89       	ldd	r24, Y+23	; 0x17
    2320:	98 8d       	ldd	r25, Y+24	; 0x18
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e8       	ldi	r20, 0x80	; 128
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    232e:	88 23       	and	r24, r24
    2330:	2c f4       	brge	.+10     	; 0x233c <LCD_displayCharacter+0x258>
		__ticks = 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	9c 8b       	std	Y+20, r25	; 0x14
    2338:	8b 8b       	std	Y+19, r24	; 0x13
    233a:	3f c0       	rjmp	.+126    	; 0x23ba <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    233c:	6d 89       	ldd	r22, Y+21	; 0x15
    233e:	7e 89       	ldd	r23, Y+22	; 0x16
    2340:	8f 89       	ldd	r24, Y+23	; 0x17
    2342:	98 8d       	ldd	r25, Y+24	; 0x18
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	3f ef       	ldi	r19, 0xFF	; 255
    2348:	4f e7       	ldi	r20, 0x7F	; 127
    234a:	57 e4       	ldi	r21, 0x47	; 71
    234c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2350:	18 16       	cp	r1, r24
    2352:	4c f5       	brge	.+82     	; 0x23a6 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2354:	69 8d       	ldd	r22, Y+25	; 0x19
    2356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e2       	ldi	r20, 0x20	; 32
    2362:	51 e4       	ldi	r21, 0x41	; 65
    2364:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9c 8b       	std	Y+20, r25	; 0x14
    237a:	8b 8b       	std	Y+19, r24	; 0x13
    237c:	0f c0       	rjmp	.+30     	; 0x239c <LCD_displayCharacter+0x2b8>
    237e:	89 e1       	ldi	r24, 0x19	; 25
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9a 8b       	std	Y+18, r25	; 0x12
    2384:	89 8b       	std	Y+17, r24	; 0x11
    2386:	89 89       	ldd	r24, Y+17	; 0x11
    2388:	9a 89       	ldd	r25, Y+18	; 0x12
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_displayCharacter+0x2a6>
    238e:	9a 8b       	std	Y+18, r25	; 0x12
    2390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	9c 8b       	std	Y+20, r25	; 0x14
    239a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239c:	8b 89       	ldd	r24, Y+19	; 0x13
    239e:	9c 89       	ldd	r25, Y+20	; 0x14
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	69 f7       	brne	.-38     	; 0x237e <LCD_displayCharacter+0x29a>
    23a4:	14 c0       	rjmp	.+40     	; 0x23ce <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a6:	6d 89       	ldd	r22, Y+21	; 0x15
    23a8:	7e 89       	ldd	r23, Y+22	; 0x16
    23aa:	8f 89       	ldd	r24, Y+23	; 0x17
    23ac:	98 8d       	ldd	r25, Y+24	; 0x18
    23ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9c 8b       	std	Y+20, r25	; 0x14
    23b8:	8b 8b       	std	Y+19, r24	; 0x13
    23ba:	8b 89       	ldd	r24, Y+19	; 0x13
    23bc:	9c 89       	ldd	r25, Y+20	; 0x14
    23be:	98 8b       	std	Y+16, r25	; 0x10
    23c0:	8f 87       	std	Y+15, r24	; 0x0f
    23c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c4:	98 89       	ldd	r25, Y+16	; 0x10
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_displayCharacter+0x2e2>
    23ca:	98 8b       	std	Y+16, r25	; 0x10
    23cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	62 e0       	ldi	r22, 0x02	; 2
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a0 e8       	ldi	r26, 0x80	; 128
    23de:	bf e3       	ldi	r27, 0x3F	; 63
    23e0:	8b 87       	std	Y+11, r24	; 0x0b
    23e2:	9c 87       	std	Y+12, r25	; 0x0c
    23e4:	ad 87       	std	Y+13, r26	; 0x0d
    23e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a e7       	ldi	r20, 0x7A	; 122
    23f6:	53 e4       	ldi	r21, 0x43	; 67
    23f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	8f 83       	std	Y+7, r24	; 0x07
    2402:	98 87       	std	Y+8, r25	; 0x08
    2404:	a9 87       	std	Y+9, r26	; 0x09
    2406:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e8       	ldi	r20, 0x80	; 128
    2416:	5f e3       	ldi	r21, 0x3F	; 63
    2418:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    241c:	88 23       	and	r24, r24
    241e:	2c f4       	brge	.+10     	; 0x242a <LCD_displayCharacter+0x346>
		__ticks = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	3f c0       	rjmp	.+126    	; 0x24a8 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	57 e4       	ldi	r21, 0x47	; 71
    243a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    243e:	18 16       	cp	r1, r24
    2440:	4c f5       	brge	.+82     	; 0x2494 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2442:	6b 85       	ldd	r22, Y+11	; 0x0b
    2444:	7c 85       	ldd	r23, Y+12	; 0x0c
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	9e 85       	ldd	r25, Y+14	; 0x0e
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	51 e4       	ldi	r21, 0x41	; 65
    2452:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
    246a:	0f c0       	rjmp	.+30     	; 0x248a <LCD_displayCharacter+0x3a6>
    246c:	89 e1       	ldi	r24, 0x19	; 25
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 83       	std	Y+4, r25	; 0x04
    2472:	8b 83       	std	Y+3, r24	; 0x03
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <LCD_displayCharacter+0x394>
    247c:	9c 83       	std	Y+4, r25	; 0x04
    247e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	69 f7       	brne	.-38     	; 0x246c <LCD_displayCharacter+0x388>
    2492:	14 c0       	rjmp	.+40     	; 0x24bc <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2494:	6f 81       	ldd	r22, Y+7	; 0x07
    2496:	78 85       	ldd	r23, Y+8	; 0x08
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_displayCharacter+0x3d0>
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24bc:	ea 96       	adiw	r28, 0x3a	; 58
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <LCD_displayString+0x6>
    24d4:	0f 92       	push	r0
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	9b 83       	std	Y+3, r25	; 0x03
    24dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24de:	19 82       	std	Y+1, r1	; 0x01
    24e0:	0e c0       	rjmp	.+28     	; 0x24fe <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	9b 81       	ldd	r25, Y+3	; 0x03
    24ec:	fc 01       	movw	r30, r24
    24ee:	e2 0f       	add	r30, r18
    24f0:	f3 1f       	adc	r31, r19
    24f2:	80 81       	ld	r24, Z
    24f4:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_displayCharacter>
		i++;
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	8f 5f       	subi	r24, 0xFF	; 255
    24fc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	9b 81       	ldd	r25, Y+3	; 0x03
    2508:	fc 01       	movw	r30, r24
    250a:	e2 0f       	add	r30, r18
    250c:	f3 1f       	adc	r31, r19
    250e:	80 81       	ld	r24, Z
    2510:	88 23       	and	r24, r24
    2512:	39 f7       	brne	.-50     	; 0x24e2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <LCD_moveCursor+0x6>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <LCD_moveCursor+0x8>
    2528:	0f 92       	push	r0
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	3d 83       	std	Y+5, r19	; 0x05
    253a:	2c 83       	std	Y+4, r18	; 0x04
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	9d 81       	ldd	r25, Y+5	; 0x05
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	91 05       	cpc	r25, r1
    2544:	c1 f0       	breq	.+48     	; 0x2576 <LCD_moveCursor+0x56>
    2546:	2c 81       	ldd	r18, Y+4	; 0x04
    2548:	3d 81       	ldd	r19, Y+5	; 0x05
    254a:	22 30       	cpi	r18, 0x02	; 2
    254c:	31 05       	cpc	r19, r1
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_moveCursor+0x3a>
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	9d 81       	ldd	r25, Y+5	; 0x05
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	61 f0       	breq	.+24     	; 0x2570 <LCD_moveCursor+0x50>
    2558:	19 c0       	rjmp	.+50     	; 0x258c <LCD_moveCursor+0x6c>
    255a:	2c 81       	ldd	r18, Y+4	; 0x04
    255c:	3d 81       	ldd	r19, Y+5	; 0x05
    255e:	22 30       	cpi	r18, 0x02	; 2
    2560:	31 05       	cpc	r19, r1
    2562:	69 f0       	breq	.+26     	; 0x257e <LCD_moveCursor+0x5e>
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	9d 81       	ldd	r25, Y+5	; 0x05
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	91 05       	cpc	r25, r1
    256c:	61 f0       	breq	.+24     	; 0x2586 <LCD_moveCursor+0x66>
    256e:	0e c0       	rjmp	.+28     	; 0x258c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	0b c0       	rjmp	.+22     	; 0x258c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	80 5c       	subi	r24, 0xC0	; 192
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	07 c0       	rjmp	.+14     	; 0x258c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	80 5f       	subi	r24, 0xF0	; 240
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	03 c0       	rjmp	.+6      	; 0x258c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	80 5b       	subi	r24, 0xB0	; 176
    258a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	80 68       	ori	r24, 0x80	; 128
    2590:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_sendCommand>
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <LCD_displayStringRowColumn+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <LCD_displayStringRowColumn+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	6a 83       	std	Y+2, r22	; 0x02
    25b4:	5c 83       	std	Y+4, r21	; 0x04
    25b6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	6a 81       	ldd	r22, Y+2	; 0x02
    25bc:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	62 97       	sbiw	r28, 0x12	; 18
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	9a 8b       	std	Y+18, r25	; 0x12
    25ec:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    25ee:	89 89       	ldd	r24, Y+17	; 0x11
    25f0:	9a 89       	ldd	r25, Y+18	; 0x12
    25f2:	9e 01       	movw	r18, r28
    25f4:	2f 5f       	subi	r18, 0xFF	; 255
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	b9 01       	movw	r22, r18
    25fa:	4a e0       	ldi	r20, 0x0A	; 10
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	0e 94 4f 14 	call	0x289e	; 0x289e <itoa>
   LCD_displayString(buff); /* Display the string */
    2602:	ce 01       	movw	r24, r28
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
}
    260a:	62 96       	adiw	r28, 0x12	; 18
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_sendCommand>
}
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	00 d0       	rcall	.+0      	; 0x2636 <UART_init+0x6>
    2636:	00 d0       	rcall	.+0      	; 0x2638 <UART_init+0x8>
    2638:	00 d0       	rcall	.+0      	; 0x263a <UART_init+0xa>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	6b 83       	std	Y+3, r22	; 0x03
    2640:	7c 83       	std	Y+4, r23	; 0x04
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2646:	1a 82       	std	Y+2, r1	; 0x02
    2648:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    264a:	eb e2       	ldi	r30, 0x2B	; 43
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2652:	ea e2       	ldi	r30, 0x2A	; 42
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	88 e1       	ldi	r24, 0x18	; 24
    2658:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    265a:	e0 e4       	ldi	r30, 0x40	; 64
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	86 e8       	ldi	r24, 0x86	; 134
    2660:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	ad 81       	ldd	r26, Y+5	; 0x05
    2668:	be 81       	ldd	r27, Y+6	; 0x06
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	aa 1f       	adc	r26, r26
    2670:	bb 1f       	adc	r27, r27
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	aa 1f       	adc	r26, r26
    2678:	bb 1f       	adc	r27, r27
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	aa 1f       	adc	r26, r26
    2680:	bb 1f       	adc	r27, r27
    2682:	9c 01       	movw	r18, r24
    2684:	ad 01       	movw	r20, r26
    2686:	80 e4       	ldi	r24, 0x40	; 64
    2688:	92 e4       	ldi	r25, 0x42	; 66
    268a:	af e0       	ldi	r26, 0x0F	; 15
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__udivmodsi4>
    2696:	da 01       	movw	r26, r20
    2698:	c9 01       	movw	r24, r18
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    26a0:	e0 e4       	ldi	r30, 0x40	; 64
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	89 2f       	mov	r24, r25
    26aa:	99 27       	eor	r25, r25
    26ac:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    26ae:	e9 e2       	ldi	r30, 0x29	; 41
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 83       	st	Z, r24
}
    26b6:	26 96       	adiw	r28, 0x06	; 6
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	0f 92       	push	r0
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26d4:	eb e2       	ldi	r30, 0x2B	; 43
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	80 72       	andi	r24, 0x20	; 32
    26e0:	90 70       	andi	r25, 0x00	; 0
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	b9 f3       	breq	.-18     	; 0x26d4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    26e6:	ec e2       	ldi	r30, 0x2C	; 44
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    26ee:	0f 90       	pop	r0
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26fe:	eb e2       	ldi	r30, 0x2B	; 43
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	88 23       	and	r24, r24
    2706:	dc f7       	brge	.-10     	; 0x26fe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2708:	ec e2       	ldi	r30, 0x2C	; 44
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
}
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <UART_sendString+0x6>
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	9b 83       	std	Y+3, r25	; 0x03
    2722:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	0e c0       	rjmp	.+28     	; 0x2744 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	fc 01       	movw	r30, r24
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	80 81       	ld	r24, Z
    273a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <UART_sendByte>
		i++;
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	8f 5f       	subi	r24, 0xFF	; 255
    2742:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	fc 01       	movw	r30, r24
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	80 81       	ld	r24, Z
    2756:	88 23       	and	r24, r24
    2758:	39 f7       	brne	.-50     	; 0x2728 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	00 d0       	rcall	.+0      	; 0x2770 <UART_receiveString+0xa>
    2770:	0f 92       	push	r0
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	9b 83       	std	Y+3, r25	; 0x03
    2778:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    277a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	9b 81       	ldd	r25, Y+3	; 0x03
    2786:	8c 01       	movw	r16, r24
    2788:	02 0f       	add	r16, r18
    278a:	13 1f       	adc	r17, r19
    278c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <UART_recieveByte>
    2790:	f8 01       	movw	r30, r16
    2792:	80 83       	st	Z, r24
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	8f 5f       	subi	r24, 0xFF	; 255
    279a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	9b 81       	ldd	r25, Y+3	; 0x03
    27a6:	8c 01       	movw	r16, r24
    27a8:	02 0f       	add	r16, r18
    27aa:	13 1f       	adc	r17, r19
    27ac:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <UART_recieveByte>
    27b0:	f8 01       	movw	r30, r16
    27b2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	9b 81       	ldd	r25, Y+3	; 0x03
    27be:	fc 01       	movw	r30, r24
    27c0:	e2 0f       	add	r30, r18
    27c2:	f3 1f       	adc	r31, r19
    27c4:	80 81       	ld	r24, Z
    27c6:	83 32       	cpi	r24, 0x23	; 35
    27c8:	31 f7       	brne	.-52     	; 0x2796 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	9b 81       	ldd	r25, Y+3	; 0x03
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	10 82       	st	Z, r1
}
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	08 95       	ret

000027ec <__udivmodsi4>:
    27ec:	a1 e2       	ldi	r26, 0x21	; 33
    27ee:	1a 2e       	mov	r1, r26
    27f0:	aa 1b       	sub	r26, r26
    27f2:	bb 1b       	sub	r27, r27
    27f4:	fd 01       	movw	r30, r26
    27f6:	0d c0       	rjmp	.+26     	; 0x2812 <__udivmodsi4_ep>

000027f8 <__udivmodsi4_loop>:
    27f8:	aa 1f       	adc	r26, r26
    27fa:	bb 1f       	adc	r27, r27
    27fc:	ee 1f       	adc	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	a2 17       	cp	r26, r18
    2802:	b3 07       	cpc	r27, r19
    2804:	e4 07       	cpc	r30, r20
    2806:	f5 07       	cpc	r31, r21
    2808:	20 f0       	brcs	.+8      	; 0x2812 <__udivmodsi4_ep>
    280a:	a2 1b       	sub	r26, r18
    280c:	b3 0b       	sbc	r27, r19
    280e:	e4 0b       	sbc	r30, r20
    2810:	f5 0b       	sbc	r31, r21

00002812 <__udivmodsi4_ep>:
    2812:	66 1f       	adc	r22, r22
    2814:	77 1f       	adc	r23, r23
    2816:	88 1f       	adc	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	1a 94       	dec	r1
    281c:	69 f7       	brne	.-38     	; 0x27f8 <__udivmodsi4_loop>
    281e:	60 95       	com	r22
    2820:	70 95       	com	r23
    2822:	80 95       	com	r24
    2824:	90 95       	com	r25
    2826:	9b 01       	movw	r18, r22
    2828:	ac 01       	movw	r20, r24
    282a:	bd 01       	movw	r22, r26
    282c:	cf 01       	movw	r24, r30
    282e:	08 95       	ret

00002830 <__prologue_saves__>:
    2830:	2f 92       	push	r2
    2832:	3f 92       	push	r3
    2834:	4f 92       	push	r4
    2836:	5f 92       	push	r5
    2838:	6f 92       	push	r6
    283a:	7f 92       	push	r7
    283c:	8f 92       	push	r8
    283e:	9f 92       	push	r9
    2840:	af 92       	push	r10
    2842:	bf 92       	push	r11
    2844:	cf 92       	push	r12
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	ca 1b       	sub	r28, r26
    285a:	db 0b       	sbc	r29, r27
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	09 94       	ijmp

00002868 <__epilogue_restores__>:
    2868:	2a 88       	ldd	r2, Y+18	; 0x12
    286a:	39 88       	ldd	r3, Y+17	; 0x11
    286c:	48 88       	ldd	r4, Y+16	; 0x10
    286e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2870:	6e 84       	ldd	r6, Y+14	; 0x0e
    2872:	7d 84       	ldd	r7, Y+13	; 0x0d
    2874:	8c 84       	ldd	r8, Y+12	; 0x0c
    2876:	9b 84       	ldd	r9, Y+11	; 0x0b
    2878:	aa 84       	ldd	r10, Y+10	; 0x0a
    287a:	b9 84       	ldd	r11, Y+9	; 0x09
    287c:	c8 84       	ldd	r12, Y+8	; 0x08
    287e:	df 80       	ldd	r13, Y+7	; 0x07
    2880:	ee 80       	ldd	r14, Y+6	; 0x06
    2882:	fd 80       	ldd	r15, Y+5	; 0x05
    2884:	0c 81       	ldd	r16, Y+4	; 0x04
    2886:	1b 81       	ldd	r17, Y+3	; 0x03
    2888:	aa 81       	ldd	r26, Y+2	; 0x02
    288a:	b9 81       	ldd	r27, Y+1	; 0x01
    288c:	ce 0f       	add	r28, r30
    288e:	d1 1d       	adc	r29, r1
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	ed 01       	movw	r28, r26
    289c:	08 95       	ret

0000289e <itoa>:
    289e:	fb 01       	movw	r30, r22
    28a0:	9f 01       	movw	r18, r30
    28a2:	e8 94       	clt
    28a4:	42 30       	cpi	r20, 0x02	; 2
    28a6:	c4 f0       	brlt	.+48     	; 0x28d8 <itoa+0x3a>
    28a8:	45 32       	cpi	r20, 0x25	; 37
    28aa:	b4 f4       	brge	.+44     	; 0x28d8 <itoa+0x3a>
    28ac:	4a 30       	cpi	r20, 0x0A	; 10
    28ae:	29 f4       	brne	.+10     	; 0x28ba <itoa+0x1c>
    28b0:	97 fb       	bst	r25, 7
    28b2:	1e f4       	brtc	.+6      	; 0x28ba <itoa+0x1c>
    28b4:	90 95       	com	r25
    28b6:	81 95       	neg	r24
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	64 2f       	mov	r22, r20
    28bc:	77 27       	eor	r23, r23
    28be:	0e 94 80 14 	call	0x2900	; 0x2900 <__udivmodhi4>
    28c2:	80 5d       	subi	r24, 0xD0	; 208
    28c4:	8a 33       	cpi	r24, 0x3A	; 58
    28c6:	0c f0       	brlt	.+2      	; 0x28ca <itoa+0x2c>
    28c8:	89 5d       	subi	r24, 0xD9	; 217
    28ca:	81 93       	st	Z+, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	a1 f7       	brne	.-24     	; 0x28ba <itoa+0x1c>
    28d2:	16 f4       	brtc	.+4      	; 0x28d8 <itoa+0x3a>
    28d4:	5d e2       	ldi	r21, 0x2D	; 45
    28d6:	51 93       	st	Z+, r21
    28d8:	10 82       	st	Z, r1
    28da:	c9 01       	movw	r24, r18
    28dc:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <strrev>

000028e0 <strrev>:
    28e0:	dc 01       	movw	r26, r24
    28e2:	fc 01       	movw	r30, r24
    28e4:	67 2f       	mov	r22, r23
    28e6:	71 91       	ld	r23, Z+
    28e8:	77 23       	and	r23, r23
    28ea:	e1 f7       	brne	.-8      	; 0x28e4 <strrev+0x4>
    28ec:	32 97       	sbiw	r30, 0x02	; 2
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <strrev+0x18>
    28f0:	7c 91       	ld	r23, X
    28f2:	6d 93       	st	X+, r22
    28f4:	70 83       	st	Z, r23
    28f6:	62 91       	ld	r22, -Z
    28f8:	ae 17       	cp	r26, r30
    28fa:	bf 07       	cpc	r27, r31
    28fc:	c8 f3       	brcs	.-14     	; 0x28f0 <strrev+0x10>
    28fe:	08 95       	ret

00002900 <__udivmodhi4>:
    2900:	aa 1b       	sub	r26, r26
    2902:	bb 1b       	sub	r27, r27
    2904:	51 e1       	ldi	r21, 0x11	; 17
    2906:	07 c0       	rjmp	.+14     	; 0x2916 <__udivmodhi4_ep>

00002908 <__udivmodhi4_loop>:
    2908:	aa 1f       	adc	r26, r26
    290a:	bb 1f       	adc	r27, r27
    290c:	a6 17       	cp	r26, r22
    290e:	b7 07       	cpc	r27, r23
    2910:	10 f0       	brcs	.+4      	; 0x2916 <__udivmodhi4_ep>
    2912:	a6 1b       	sub	r26, r22
    2914:	b7 0b       	sbc	r27, r23

00002916 <__udivmodhi4_ep>:
    2916:	88 1f       	adc	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	5a 95       	dec	r21
    291c:	a9 f7       	brne	.-22     	; 0x2908 <__udivmodhi4_loop>
    291e:	80 95       	com	r24
    2920:	90 95       	com	r25
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	08 95       	ret

00002928 <_exit>:
    2928:	f8 94       	cli

0000292a <__stop_program>:
    292a:	ff cf       	rjmp	.-2      	; 0x292a <__stop_program>
